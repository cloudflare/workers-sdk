name: Release a hotfix
on:
  workflow_dispatch:
    inputs:
      pr-number:
        description: "Which PR should be released?"
        required: true
      confirm:
        description: "Confirm that the PR is up to date with the last published release, with the specific additional changes that should be released as part of this hotfix and the relevant package patch versions bumped"
        type: boolean
        required: true
      label:
        description: "Which dist-tag should this release have?"
        type: string
        default: hotfix
        required: true
jobs:
  hotfix-release:
    name: Hotfix Release
    if: ${{ inputs.confirm == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check user for team affiliation
        uses: tspascoal/get-user-teams-membership@v2
        id: teamAffiliation
        with:
          GITHUB_TOKEN: ${{ secrets.READ_ONLY_ORG_GITHUB_TOKEN }}
          username: ${{ github.actor }}
          team: wrangler

      - name: Stop workflow if user is not a wrangler team member
        if: ${{ steps.teamAffiliation.outputs.isTeamMember == false }}
        run: |
          echo "You must be on the "wrangler" team to trigger this job."
          exit 1

      - name: "Checkout PR"
        run: gh pr checkout ${{ inputs.pr-number }}
        env:
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Install Dependencies
        uses: ./.github/actions/install-dependencies
        with:
          turbo-api: ${{ secrets.TURBO_API }}
          turbo-team: ${{ secrets.TURBO_TEAM }}
          turbo-token: ${{ secrets.TURBO_TOKEN }}
          turbo-signature: ${{ secrets.TURBO_REMOTE_CACHE_SIGNATURE_KEY }}

      - name: Build all packages
        run: pnpm run build
        env:
          CI_OS: ${{ runner.os }}

      - name: Publish packages
        run: pnpm publish -r --tag ${{ inputs.label }} --filter wrangler --filter miniflare --filter create-cloudflare
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
