From 16ded598b00356eaa00940713a25502cf32c2206 Mon Sep 17 00:00:00 2001
From: Samuel Macleod <smacleod@cloudflare.com>
Date: Mon, 3 Apr 2023 11:18:10 +0100
Subject: [PATCH 01/13] Add Custom workbench for Cloudflare

---
 src/vs/code/browser/workbench/workbench.ts | 522 +++------------------
 1 file changed, 76 insertions(+), 446 deletions(-)

diff --git a/src/vs/code/browser/workbench/workbench.ts b/src/vs/code/browser/workbench/workbench.ts
index 9f34c85..3920de3 100644
--- a/src/vs/code/browser/workbench/workbench.ts
+++ b/src/vs/code/browser/workbench/workbench.ts
@@ -3,375 +3,53 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { isStandalone } from 'vs/base/browser/browser';
-import { CancellationToken } from 'vs/base/common/cancellation';
-import { parse } from 'vs/base/common/marshalling';
-import { Emitter } from 'vs/base/common/event';
-import { Disposable, IDisposable } from 'vs/base/common/lifecycle';
-import { Schemas } from 'vs/base/common/network';
-import { isEqual } from 'vs/base/common/resources';
-import { URI, UriComponents } from 'vs/base/common/uri';
-import { request } from 'vs/base/parts/request/browser/request';
-import product from 'vs/platform/product/common/product';
-import { isFolderToOpen, isWorkspaceToOpen } from 'vs/platform/window/common/window';
-import { create } from 'vs/workbench/workbench.web.main';
-import { posix } from 'vs/base/common/path';
-import { ltrim } from 'vs/base/common/strings';
-import type { ICredentialsProvider } from 'vs/platform/credentials/common/credentials';
-import type { IURLCallbackProvider } from 'vs/workbench/services/url/browser/urlService';
-import type { IWorkbenchConstructionOptions } from 'vs/workbench/browser/web.api';
-import type { IWorkspace, IWorkspaceProvider } from 'vs/workbench/services/host/browser/browserHostService';
+import { isStandalone } from "vs/base/browser/browser";
 
-interface ICredential {
-	service: string;
-	account: string;
-	password: string;
-}
-
-class LocalStorageCredentialsProvider implements ICredentialsProvider {
-
-	private static readonly CREDENTIALS_STORAGE_KEY = 'credentials.provider';
-
-	private readonly authService: string | undefined;
-
-	constructor() {
-		let authSessionInfo: { readonly id: string; readonly accessToken: string; readonly providerId: string; readonly canSignOut?: boolean; readonly scopes: string[][] } | undefined;
-		const authSessionElement = document.getElementById('vscode-workbench-auth-session');
-		const authSessionElementAttribute = authSessionElement ? authSessionElement.getAttribute('data-settings') : undefined;
-		if (authSessionElementAttribute) {
-			try {
-				authSessionInfo = JSON.parse(authSessionElementAttribute);
-			} catch (error) { /* Invalid session is passed. Ignore. */ }
-		}
-
-		if (authSessionInfo) {
-			// Settings Sync Entry
-			this.setPassword(`${product.urlProtocol}.login`, 'account', JSON.stringify(authSessionInfo));
-
-			// Auth extension Entry
-			this.authService = `${product.urlProtocol}-${authSessionInfo.providerId}.login`;
-			this.setPassword(this.authService, 'account', JSON.stringify(authSessionInfo.scopes.map(scopes => ({
-				id: authSessionInfo!.id,
-				scopes,
-				accessToken: authSessionInfo!.accessToken
-			}))));
-		}
-	}
-
-	private _credentials: ICredential[] | undefined;
-	private get credentials(): ICredential[] {
-		if (!this._credentials) {
-			try {
-				const serializedCredentials = window.localStorage.getItem(LocalStorageCredentialsProvider.CREDENTIALS_STORAGE_KEY);
-				if (serializedCredentials) {
-					this._credentials = JSON.parse(serializedCredentials);
-				}
-			} catch (error) {
-				// ignore
-			}
-
-			if (!Array.isArray(this._credentials)) {
-				this._credentials = [];
-			}
-		}
-
-		return this._credentials;
-	}
-
-	private save(): void {
-		window.localStorage.setItem(LocalStorageCredentialsProvider.CREDENTIALS_STORAGE_KEY, JSON.stringify(this.credentials));
-	}
-
-	async getPassword(service: string, account: string): Promise<string | null> {
-		return this.doGetPassword(service, account);
-	}
-
-	private async doGetPassword(service: string, account?: string): Promise<string | null> {
-		for (const credential of this.credentials) {
-			if (credential.service === service) {
-				if (typeof account !== 'string' || account === credential.account) {
-					return credential.password;
-				}
-			}
-		}
-
-		return null;
-	}
-
-	async setPassword(service: string, account: string, password: string): Promise<void> {
-		this.doDeletePassword(service, account);
-
-		this.credentials.push({ service, account, password });
-
-		this.save();
-
-		try {
-			if (password && service === this.authService) {
-				const value = JSON.parse(password);
-				if (Array.isArray(value) && value.length === 0) {
-					await this.logout(service);
-				}
-			}
-		} catch (error) {
-			console.log(error);
-		}
-	}
-
-	async deletePassword(service: string, account: string): Promise<boolean> {
-		const result = await this.doDeletePassword(service, account);
-
-		if (result && service === this.authService) {
-			try {
-				await this.logout(service);
-			} catch (error) {
-				console.log(error);
-			}
-		}
-
-		return result;
-	}
-
-	private async doDeletePassword(service: string, account: string): Promise<boolean> {
-		let found = false;
-
-		this._credentials = this.credentials.filter(credential => {
-			if (credential.service === service && credential.account === account) {
-				found = true;
-
-				return false;
-			}
-
-			return true;
-		});
-
-		if (found) {
-			this.save();
-		}
-
-		return found;
-	}
-
-	async findPassword(service: string): Promise<string | null> {
-		return this.doGetPassword(service);
-	}
-
-	async findCredentials(service: string): Promise<Array<{ account: string; password: string }>> {
-		return this.credentials
-			.filter(credential => credential.service === service)
-			.map(({ account, password }) => ({ account, password }));
-	}
-
-	private async logout(service: string): Promise<void> {
-		const queryValues: Map<string, string> = new Map();
-		queryValues.set('logout', String(true));
-		queryValues.set('service', service);
-
-		await request({
-			url: doCreateUri('/auth/logout', queryValues).toString(true)
-		}, CancellationToken.None);
-	}
-
-	async clear(): Promise<void> {
-		window.localStorage.removeItem(LocalStorageCredentialsProvider.CREDENTIALS_STORAGE_KEY);
-	}
-}
-
-class LocalStorageURLCallbackProvider extends Disposable implements IURLCallbackProvider {
-
-	private static REQUEST_ID = 0;
-
-	private static QUERY_KEYS: ('scheme' | 'authority' | 'path' | 'query' | 'fragment')[] = [
-		'scheme',
-		'authority',
-		'path',
-		'query',
-		'fragment'
-	];
-
-	private readonly _onCallback = this._register(new Emitter<URI>());
-	readonly onCallback = this._onCallback.event;
-
-	private pendingCallbacks = new Set<number>();
-	private lastTimeChecked = Date.now();
-	private checkCallbacksTimeout: unknown | undefined = undefined;
-	private onDidChangeLocalStorageDisposable: IDisposable | undefined;
-
-	constructor(private readonly _callbackRoute: string) {
-		super();
-	}
-
-	create(options: Partial<UriComponents> = {}): URI {
-		const id = ++LocalStorageURLCallbackProvider.REQUEST_ID;
-		const queryParams: string[] = [`vscode-reqid=${id}`];
-
-		for (const key of LocalStorageURLCallbackProvider.QUERY_KEYS) {
-			const value = options[key];
-
-			if (value) {
-				queryParams.push(`vscode-${key}=${encodeURIComponent(value)}`);
-			}
-		}
-
-		// TODO@joao remove eventually
-		// https://github.com/microsoft/vscode-dev/issues/62
-		// https://github.com/microsoft/vscode/blob/159479eb5ae451a66b5dac3c12d564f32f454796/extensions/github-authentication/src/githubServer.ts#L50-L50
-		if (!(options.authority === 'vscode.github-authentication' && options.path === '/dummy')) {
-			const key = `vscode-web.url-callbacks[${id}]`;
-			window.localStorage.removeItem(key);
-
-			this.pendingCallbacks.add(id);
-			this.startListening();
-		}
+import { URI, UriComponents } from "vs/base/common/uri";
 
-		return URI.parse(window.location.href).with({ path: this._callbackRoute, query: queryParams.join('&') });
-	}
-
-	private startListening(): void {
-		if (this.onDidChangeLocalStorageDisposable) {
-			return;
-		}
-
-		const fn = () => this.onDidChangeLocalStorage();
-		window.addEventListener('storage', fn);
-		this.onDidChangeLocalStorageDisposable = { dispose: () => window.removeEventListener('storage', fn) };
-	}
-
-	private stopListening(): void {
-		this.onDidChangeLocalStorageDisposable?.dispose();
-		this.onDidChangeLocalStorageDisposable = undefined;
-	}
-
-	// this fires every time local storage changes, but we
-	// don't want to check more often than once a second
-	private async onDidChangeLocalStorage(): Promise<void> {
-		const ellapsed = Date.now() - this.lastTimeChecked;
-
-		if (ellapsed > 1000) {
-			this.checkCallbacks();
-		} else if (this.checkCallbacksTimeout === undefined) {
-			this.checkCallbacksTimeout = setTimeout(() => {
-				this.checkCallbacksTimeout = undefined;
-				this.checkCallbacks();
-			}, 1000 - ellapsed);
-		}
-	}
-
-	private checkCallbacks(): void {
-		let pendingCallbacks: Set<number> | undefined;
-
-		for (const id of this.pendingCallbacks) {
-			const key = `vscode-web.url-callbacks[${id}]`;
-			const result = window.localStorage.getItem(key);
-
-			if (result !== null) {
-				try {
-					this._onCallback.fire(URI.revive(JSON.parse(result)));
-				} catch (error) {
-					console.error(error);
-				}
-
-				pendingCallbacks = pendingCallbacks ?? new Set(this.pendingCallbacks);
-				pendingCallbacks.delete(id);
-				window.localStorage.removeItem(key);
-			}
-		}
-
-		if (pendingCallbacks) {
-			this.pendingCallbacks = pendingCallbacks;
+import { create } from "vs/workbench/workbench.web.main";
 
-			if (this.pendingCallbacks.size === 0) {
-				this.stopListening();
-			}
-		}
-
-		this.lastTimeChecked = Date.now();
-	}
-}
+import type { IWorkbenchConstructionOptions } from "vs/workbench/browser/web.api";
+import type {
+	IWorkspace,
+	IWorkspaceProvider,
+} from "vs/workbench/services/host/browser/browserHostService";
 
 class WorkspaceProvider implements IWorkspaceProvider {
+	private static QUERY_PARAM_EMPTY_WINDOW = "ew";
 
-	private static QUERY_PARAM_EMPTY_WINDOW = 'ew';
-	private static QUERY_PARAM_FOLDER = 'folder';
-	private static QUERY_PARAM_WORKSPACE = 'workspace';
-
-	private static QUERY_PARAM_PAYLOAD = 'payload';
-
-	static create(config: IWorkbenchConstructionOptions & { folderUri?: UriComponents; workspaceUri?: UriComponents }) {
-		let foundWorkspace = false;
-		let workspace: IWorkspace;
-		let payload = Object.create(null);
-
-		const query = new URL(document.location.href).searchParams;
-		query.forEach((value, key) => {
-			switch (key) {
-
-				// Folder
-				case WorkspaceProvider.QUERY_PARAM_FOLDER:
-					if (config.remoteAuthority && value.startsWith(posix.sep)) {
-						// when connected to a remote and having a value
-						// that is a path (begins with a `/`), assume this
-						// is a vscode-remote resource as simplified URL.
-						workspace = { folderUri: URI.from({ scheme: Schemas.vscodeRemote, path: value, authority: config.remoteAuthority }) };
-					} else {
-						workspace = { folderUri: URI.parse(value) };
-					}
-					foundWorkspace = true;
-					break;
+	private static QUERY_PARAM_PAYLOAD = "payload";
 
-				// Workspace
-				case WorkspaceProvider.QUERY_PARAM_WORKSPACE:
-					if (config.remoteAuthority && value.startsWith(posix.sep)) {
-						// when connected to a remote and having a value
-						// that is a path (begins with a `/`), assume this
-						// is a vscode-remote resource as simplified URL.
-						workspace = { workspaceUri: URI.from({ scheme: Schemas.vscodeRemote, path: value, authority: config.remoteAuthority }) };
-					} else {
-						workspace = { workspaceUri: URI.parse(value) };
-					}
-					foundWorkspace = true;
-					break;
-
-				// Empty
-				case WorkspaceProvider.QUERY_PARAM_EMPTY_WINDOW:
-					workspace = undefined;
-					foundWorkspace = true;
-					break;
-
-				// Payload
-				case WorkspaceProvider.QUERY_PARAM_PAYLOAD:
-					try {
-						payload = parse(value); // use marshalling#parse() to revive potential URIs
-					} catch (error) {
-						console.error(error); // possible invalid JSON
-					}
-					break;
-			}
-		});
-
-		// If no workspace is provided through the URL, check for config
-		// attribute from server
-		if (!foundWorkspace) {
-			if (config.folderUri) {
-				workspace = { folderUri: URI.revive(config.folderUri) };
-			} else if (config.workspaceUri) {
-				workspace = { workspaceUri: URI.revive(config.workspaceUri) };
-			}
+	static create(
+		config: IWorkbenchConstructionOptions & {
+			folderUri?: UriComponents;
+			workspaceUri?: UriComponents;
 		}
+	) {
+		let payload = Object.create(null);
 
-		return new WorkspaceProvider(workspace, payload, config);
+		return new WorkspaceProvider(
+			{ folderUri: URI.revive(config.folderUri)! },
+			payload
+		);
 	}
 
 	readonly trusted = true;
 
 	private constructor(
 		readonly workspace: IWorkspace,
-		readonly payload: object,
-		private readonly config: IWorkbenchConstructionOptions
-	) {
-	}
-
-	async open(workspace: IWorkspace, options?: { reuse?: boolean; payload?: object }): Promise<boolean> {
-		if (options?.reuse && !options.payload && this.isSame(this.workspace, workspace)) {
+		readonly payload: object
+	) {}
+
+	async open(
+		workspace: IWorkspace,
+		options?: { reuse?: boolean; payload?: object }
+	): Promise<boolean> {
+		if (
+			options?.reuse &&
+			!options.payload &&
+			this.isSame(this.workspace, workspace)
+		) {
 			return true; // return early if workspace and environment is not changing and we are reusing window
 		}
 
@@ -383,7 +61,7 @@ class WorkspaceProvider implements IWorkspaceProvider {
 			} else {
 				let result;
 				if (isStandalone()) {
-					result = window.open(targetHref, '_blank', 'toolbar=no'); // ensures to open another 'standalone' window!
+					result = window.open(targetHref, "_blank", "toolbar=no"); // ensures to open another 'standalone' window!
 				} else {
 					result = window.open(targetHref);
 				}
@@ -394,122 +72,74 @@ class WorkspaceProvider implements IWorkspaceProvider {
 		return false;
 	}
 
-	private createTargetUrl(workspace: IWorkspace, options?: { reuse?: boolean; payload?: object }): string | undefined {
-
+	private createTargetUrl(
+		workspace: IWorkspace,
+		options?: { reuse?: boolean; payload?: object }
+	): string | undefined {
 		// Empty
 		let targetHref: string | undefined = undefined;
 		if (!workspace) {
 			targetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_EMPTY_WINDOW}=true`;
 		}
 
-		// Folder
-		else if (isFolderToOpen(workspace)) {
-			let queryParamFolder: string;
-			if (this.config.remoteAuthority && workspace.folderUri.scheme === Schemas.vscodeRemote) {
-				// when connected to a remote and having a folder
-				// for that remote, only use the path as query
-				// value to form shorter, nicer URLs.
-				// ensure paths are absolute (begin with `/`)
-				// clipboard: ltrim(workspace.folderUri.path, posix.sep)
-				queryParamFolder = `${posix.sep}${ltrim(workspace.folderUri.path, posix.sep)}`;
-			} else {
-				queryParamFolder = encodeURIComponent(workspace.folderUri.toString(true));
-			}
-
-			targetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_FOLDER}=${queryParamFolder}`;
-		}
-
-		// Workspace
-		else if (isWorkspaceToOpen(workspace)) {
-			let queryParamWorkspace: string;
-			if (this.config.remoteAuthority && workspace.workspaceUri.scheme === Schemas.vscodeRemote) {
-				// when connected to a remote and having a workspace
-				// for that remote, only use the path as query
-				// value to form shorter, nicer URLs.
-				// ensure paths are absolute (begin with `/`)
-				queryParamWorkspace = `${posix.sep}${ltrim(workspace.workspaceUri.path, posix.sep)}`;
-			} else {
-				queryParamWorkspace = encodeURIComponent(workspace.workspaceUri.toString(true));
-			}
-
-			targetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_WORKSPACE}=${queryParamWorkspace}`;
-		}
-
 		// Append payload if any
 		if (options?.payload) {
-			targetHref += `&${WorkspaceProvider.QUERY_PARAM_PAYLOAD}=${encodeURIComponent(JSON.stringify(options.payload))}`;
+			targetHref += `&${
+				WorkspaceProvider.QUERY_PARAM_PAYLOAD
+			}=${encodeURIComponent(JSON.stringify(options.payload))}`;
 		}
 
 		return targetHref;
 	}
 
 	private isSame(workspaceA: IWorkspace, workspaceB: IWorkspace): boolean {
-		if (!workspaceA || !workspaceB) {
-			return workspaceA === workspaceB; // both empty
-		}
-
-		if (isFolderToOpen(workspaceA) && isFolderToOpen(workspaceB)) {
-			return isEqual(workspaceA.folderUri, workspaceB.folderUri); // same workspace
-		}
-
-		if (isWorkspaceToOpen(workspaceA) && isWorkspaceToOpen(workspaceB)) {
-			return isEqual(workspaceA.workspaceUri, workspaceB.workspaceUri); // same workspace
-		}
-
-		return false;
+		return true;
 	}
 
 	hasRemote(): boolean {
-		if (this.workspace) {
-			if (isFolderToOpen(this.workspace)) {
-				return this.workspace.folderUri.scheme === Schemas.vscodeRemote;
-			}
-
-			if (isWorkspaceToOpen(this.workspace)) {
-				return this.workspace.workspaceUri.scheme === Schemas.vscodeRemote;
-			}
-		}
-
 		return true;
 	}
 }
-
-function doCreateUri(path: string, queryValues: Map<string, string>): URI {
-	let query: string | undefined = undefined;
-
-	if (queryValues) {
-		let index = 0;
-		queryValues.forEach((value, key) => {
-			if (!query) {
-				query = '';
-			}
-
-			const prefix = (index++ === 0) ? '' : '&';
-			query += `${prefix}${key}=${encodeURIComponent(value)}`;
-		});
-	}
-
-	return URI.parse(window.location.href).with({ path, query });
-}
-
-(function () {
-
+function createEditor(port: MessagePort) {
 	// Find config by checking for DOM
-	const configElement = document.getElementById('vscode-workbench-web-configuration');
-	const configElementAttribute = configElement ? configElement.getAttribute('data-settings') : undefined;
+	const configElement = document.getElementById(
+		"vscode-workbench-web-configuration"
+	);
+	const configElementAttribute = configElement
+		? configElement.getAttribute("data-settings")
+		: undefined;
 	if (!configElement || !configElementAttribute) {
-		throw new Error('Missing web configuration element');
+		throw new Error("Missing web configuration element");
 	}
-	const config: IWorkbenchConstructionOptions & { folderUri?: UriComponents; workspaceUri?: UriComponents; callbackRoute: string } = JSON.parse(configElementAttribute);
+	const config: IWorkbenchConstructionOptions & {
+		folderUri?: UriComponents;
+		workspaceUri?: UriComponents;
+		callbackRoute: string;
+	} = JSON.parse(configElementAttribute);
+
+	const searchParams = new URLSearchParams(window.location.search);
+
+	const messagePorts = new Map();
+	messagePorts.set("cloudflare.quick-edit-extension", port);
 
 	// Create workbench
 	create(document.body, {
 		...config,
-		settingsSyncOptions: config.settingsSyncOptions ? {
-			enabled: config.settingsSyncOptions.enabled,
-		} : undefined,
-		workspaceProvider: WorkspaceProvider.create(config),
-		urlCallbackProvider: new LocalStorageURLCallbackProvider(config.callbackRoute),
-		credentialsProvider: config.remoteAuthority ? undefined : new LocalStorageCredentialsProvider() // with a remote, we don't use a local credentials provider
+		defaultLayout: {
+			force: true,
+			editors: [],
+		},
+		settingsSyncOptions: undefined,
+		workspaceProvider: WorkspaceProvider.create({
+			...config,
+			folderUri: URI.parse(decodeURIComponent(searchParams.get("worker")!)),
+		}),
+		credentialsProvider: undefined,
+		messagePorts,
 	});
-})();
+}
+window.onmessage = (e) => {
+	if (e.data === "PORT") {
+		createEditor(e.ports[0]!);
+	}
+};
-- 
2.39.2 (Apple Git-143)

