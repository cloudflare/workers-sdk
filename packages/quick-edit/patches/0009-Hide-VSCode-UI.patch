From 833a7aaab8eec7a29be6b255ce3a90e2232269c2 Mon Sep 17 00:00:00 2001
From: Workers DevProd <workers-devprod@cloudflare.com>
Date: Sat, 17 Feb 2024 02:10:20 +0000
Subject: [PATCH 9/9] Hide VSCode UI

---
 src/vs/platform/window/common/window.ts       |    2 +-
 .../debug/browser/debug.contribution.ts       |  594 +-----
 .../browser/extensions.contribution.ts        | 1710 +----------------
 .../contrib/scm/browser/scm.contribution.ts   |  430 +----
 src/vs/workbench/workbench.common.main.ts     |    9 -
 5 files changed, 6 insertions(+), 2739 deletions(-)

diff --git a/src/vs/platform/window/common/window.ts b/src/vs/platform/window/common/window.ts
index 38ad7ca..612812e 100644
--- a/src/vs/platform/window/common/window.ts
+++ b/src/vs/platform/window/common/window.ts
@@ -167,7 +167,7 @@ export interface IDensitySettings {
 
 export function getTitleBarStyle(configurationService: IConfigurationService): 'native' | 'custom' {
 	if (isWeb) {
-		return 'custom';
+		return 'native';
 	}
 
 	const configuration = configurationService.getValue<IWindowSettings | undefined>('window');
diff --git a/src/vs/workbench/contrib/debug/browser/debug.contribution.ts b/src/vs/workbench/contrib/debug/browser/debug.contribution.ts
index 4ff1a98..4ef7a69 100644
--- a/src/vs/workbench/contrib/debug/browser/debug.contribution.ts
+++ b/src/vs/workbench/contrib/debug/browser/debug.contribution.ts
@@ -3,598 +3,10 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { KeyCode, KeyMod } from 'vs/base/common/keyCodes';
-import { FileAccess } from 'vs/base/common/network';
-import { isMacintosh, isWeb } from 'vs/base/common/platform';
-import { URI } from 'vs/base/common/uri';
-import 'vs/css!./media/debug.contribution';
-import 'vs/css!./media/debugHover';
-import { EditorContributionInstantiation, registerEditorContribution } from 'vs/editor/browser/editorExtensions';
-import * as nls from 'vs/nls';
-import { ICommandActionTitle, Icon } from 'vs/platform/action/common/action';
-import { MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';
-import { ConfigurationScope, Extensions as ConfigurationExtensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';
-import { ContextKeyExpr, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';
-import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
 import { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';
-import { Extensions as QuickAccessExtensions, IQuickAccessRegistry } from 'vs/platform/quickinput/common/quickAccess';
-import { Registry } from 'vs/platform/registry/common/platform';
-import { EditorPaneDescriptor, IEditorPaneRegistry } from 'vs/workbench/browser/editor';
-import { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';
-import { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';
-import { EditorExtensions } from 'vs/workbench/common/editor';
-import { Extensions as ViewExtensions, IViewContainersRegistry, IViewsRegistry, ViewContainer, ViewContainerLocation } from 'vs/workbench/common/views';
-import { BreakpointEditorContribution } from 'vs/workbench/contrib/debug/browser/breakpointEditorContribution';
-import { BreakpointsView } from 'vs/workbench/contrib/debug/browser/breakpointsView';
-import { CallStackEditorContribution } from 'vs/workbench/contrib/debug/browser/callStackEditorContribution';
-import { CallStackView } from 'vs/workbench/contrib/debug/browser/callStackView';
-import { registerColors } from 'vs/workbench/contrib/debug/browser/debugColors';
-import { ADD_CONFIGURATION_ID, CALLSTACK_BOTTOM_ID, CALLSTACK_BOTTOM_LABEL, CALLSTACK_DOWN_ID, CALLSTACK_DOWN_LABEL, CALLSTACK_TOP_ID, CALLSTACK_TOP_LABEL, CALLSTACK_UP_ID, CALLSTACK_UP_LABEL, CONTINUE_ID, CONTINUE_LABEL, COPY_STACK_TRACE_ID, DEBUG_COMMAND_CATEGORY, DEBUG_CONSOLE_QUICK_ACCESS_PREFIX, DEBUG_QUICK_ACCESS_PREFIX, DEBUG_RUN_COMMAND_ID, DEBUG_RUN_LABEL, DEBUG_START_COMMAND_ID, DEBUG_START_LABEL, DISCONNECT_AND_SUSPEND_ID, DISCONNECT_AND_SUSPEND_LABEL, DISCONNECT_ID, DISCONNECT_LABEL, EDIT_EXPRESSION_COMMAND_ID, FOCUS_REPL_ID, JUMP_TO_CURSOR_ID, NEXT_DEBUG_CONSOLE_ID, NEXT_DEBUG_CONSOLE_LABEL, OPEN_LOADED_SCRIPTS_LABEL, PAUSE_ID, PAUSE_LABEL, PREV_DEBUG_CONSOLE_ID, PREV_DEBUG_CONSOLE_LABEL, REMOVE_EXPRESSION_COMMAND_ID, RESTART_FRAME_ID, RESTART_LABEL, RESTART_SESSION_ID, SELECT_AND_START_ID, SELECT_AND_START_LABEL, SELECT_DEBUG_CONSOLE_ID, SELECT_DEBUG_CONSOLE_LABEL, SELECT_DEBUG_SESSION_ID, SELECT_DEBUG_SESSION_LABEL, SET_EXPRESSION_COMMAND_ID, SHOW_LOADED_SCRIPTS_ID, STEP_INTO_ID, STEP_INTO_LABEL, STEP_INTO_TARGET_ID, STEP_INTO_TARGET_LABEL, STEP_OUT_ID, STEP_OUT_LABEL, STEP_OVER_ID, STEP_OVER_LABEL, STOP_ID, STOP_LABEL, TERMINATE_THREAD_ID, TOGGLE_INLINE_BREAKPOINT_ID } from 'vs/workbench/contrib/debug/browser/debugCommands';
-import { DebugConsoleQuickAccess } from 'vs/workbench/contrib/debug/browser/debugConsoleQuickAccess';
-import { RunToCursorAction, SelectionToReplAction, SelectionToWatchExpressionsAction } from 'vs/workbench/contrib/debug/browser/debugEditorActions';
-import { DebugEditorContribution } from 'vs/workbench/contrib/debug/browser/debugEditorContribution';
-import * as icons from 'vs/workbench/contrib/debug/browser/debugIcons';
-import { DebugProgressContribution } from 'vs/workbench/contrib/debug/browser/debugProgress';
-import { StartDebugQuickAccessProvider } from 'vs/workbench/contrib/debug/browser/debugQuickAccess';
-import { DebugService } from 'vs/workbench/contrib/debug/browser/debugService';
-import { DebugStatusContribution } from 'vs/workbench/contrib/debug/browser/debugStatus';
-import { DebugTitleContribution } from 'vs/workbench/contrib/debug/browser/debugTitle';
-import { DebugToolBar } from 'vs/workbench/contrib/debug/browser/debugToolBar';
-import { DebugViewPaneContainer } from 'vs/workbench/contrib/debug/browser/debugViewlet';
-import { DisassemblyView, DisassemblyViewContribution } from 'vs/workbench/contrib/debug/browser/disassemblyView';
-import { LoadedScriptsView } from 'vs/workbench/contrib/debug/browser/loadedScriptsView';
-import { Repl } from 'vs/workbench/contrib/debug/browser/repl';
-import { StatusBarColorProvider } from 'vs/workbench/contrib/debug/browser/statusbarColorProvider';
-import { ADD_TO_WATCH_ID, BREAK_WHEN_VALUE_CHANGES_ID, BREAK_WHEN_VALUE_IS_ACCESSED_ID, BREAK_WHEN_VALUE_IS_READ_ID, COPY_EVALUATE_PATH_ID, COPY_VALUE_ID, SET_VARIABLE_ID, VariablesView, VIEW_MEMORY_ID } from 'vs/workbench/contrib/debug/browser/variablesView';
-import { ADD_WATCH_ID, ADD_WATCH_LABEL, REMOVE_WATCH_EXPRESSIONS_COMMAND_ID, REMOVE_WATCH_EXPRESSIONS_LABEL, WatchExpressionsView } from 'vs/workbench/contrib/debug/browser/watchExpressionsView';
-import { WelcomeView } from 'vs/workbench/contrib/debug/browser/welcomeView';
-import {getStateLabel, IDebugService, INTERNAL_CONSOLE_OPTIONS_SCHEMA, LOADED_SCRIPTS_VIEW_ID, REPL_VIEW_ID, State, VARIABLES_VIEW_ID, VIEWLET_ID, WATCH_VIEW_ID } from 'vs/workbench/contrib/debug/common/debug';
-import { DebugContentProvider } from 'vs/workbench/contrib/debug/common/debugContentProvider';
-import { DebugLifecycle } from 'vs/workbench/contrib/debug/common/debugLifecycle';
-import { DisassemblyViewInput } from 'vs/workbench/contrib/debug/common/disassemblyViewInput';
-import { launchSchemaId } from 'vs/workbench/services/configuration/common/configuration';
-import { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';
-
-const debugCategory = nls.localize('debugCategory', "Debug");
-registerColors();
-registerSingleton(IDebugService, DebugService, InstantiationType.Delayed);
-
-// Register Debug Workbench Contributions
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DebugStatusContribution, LifecyclePhase.Eventually);
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DebugProgressContribution, LifecyclePhase.Eventually);
-if (isWeb) {
-	Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DebugTitleContribution, LifecyclePhase.Eventually);
-}
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DebugToolBar, LifecyclePhase.Restored);
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DebugContentProvider, LifecyclePhase.Eventually);
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(StatusBarColorProvider, LifecyclePhase.Eventually);
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DisassemblyViewContribution, LifecyclePhase.Eventually);
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DebugLifecycle, LifecyclePhase.Eventually);
-
-// Register Quick Access
-Registry.as<IQuickAccessRegistry>(QuickAccessExtensions.Quickaccess).registerQuickAccessProvider({
-	ctor: StartDebugQuickAccessProvider,
-	prefix: DEBUG_QUICK_ACCESS_PREFIX,
-	contextKey: 'inLaunchConfigurationsPicker',
-	placeholder: nls.localize('startDebugPlaceholder', "Type the name of a launch configuration to run."),
-	helpEntries: [{
-		description: nls.localize('startDebuggingHelp', "Start Debugging"),
-		commandId: SELECT_AND_START_ID,
-		commandCenterOrder: 50
-	}]
-});
-
-// Register quick access for debug console
-Registry.as<IQuickAccessRegistry>(QuickAccessExtensions.Quickaccess).registerQuickAccessProvider({
-	ctor: DebugConsoleQuickAccess,
-	prefix: DEBUG_CONSOLE_QUICK_ACCESS_PREFIX,
-	contextKey: 'inDebugConsolePicker',
-	placeholder: nls.localize('tasksQuickAccessPlaceholder', "Type the name of a debug console to open."),
-	helpEntries: [{ description: nls.localize('tasksQuickAccessHelp', "Show All Debug Consoles"), commandId: SELECT_DEBUG_CONSOLE_ID }]
-});
-
-registerEditorContribution('editor.contrib.callStack', CallStackEditorContribution, EditorContributionInstantiation.AfterFirstRender);
-registerEditorContribution(BREAKPOINT_EDITOR_CONTRIBUTION_ID, BreakpointEditorContribution, EditorContributionInstantiation.AfterFirstRender);
-registerEditorContribution(EDITOR_CONTRIBUTION_ID, DebugEditorContribution, EditorContributionInstantiation.BeforeFirstInteraction);
-
-const registerDebugCommandPaletteItem = (id: string, title: ICommandActionTitle, when?: ContextKeyExpression, precondition?: ContextKeyExpression) => {
-	MenuRegistry.appendMenuItem(MenuId.CommandPalette, {
-		when: ContextKeyExpr.and(CONTEXT_DEBUGGERS_AVAILABLE, when),
-		group: debugCategory,
-		command: {
-			id,
-			title,
-			category: DEBUG_COMMAND_CATEGORY,
-			precondition
-		}
-	});
-};
-
-registerDebugCommandPaletteItem(RESTART_SESSION_ID, RESTART_LABEL);
-registerDebugCommandPaletteItem(TERMINATE_THREAD_ID, nls.localize2('terminateThread', "Terminate Thread"), CONTEXT_IN_DEBUG_MODE);
-registerDebugCommandPaletteItem(STEP_OVER_ID, STEP_OVER_LABEL, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugCommandPaletteItem(STEP_INTO_ID, STEP_INTO_LABEL, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugCommandPaletteItem(STEP_INTO_TARGET_ID, STEP_INTO_TARGET_LABEL, CONTEXT_IN_DEBUG_MODE, ContextKeyExpr.and(CONTEXT_STEP_INTO_TARGETS_SUPPORTED, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
-registerDebugCommandPaletteItem(STEP_OUT_ID, STEP_OUT_LABEL, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugCommandPaletteItem(PAUSE_ID, PAUSE_LABEL, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('running'));
-registerDebugCommandPaletteItem(DISCONNECT_ID, DISCONNECT_LABEL, CONTEXT_IN_DEBUG_MODE, ContextKeyExpr.or(CONTEXT_FOCUSED_SESSION_IS_ATTACH, CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED));
-registerDebugCommandPaletteItem(DISCONNECT_AND_SUSPEND_ID, DISCONNECT_AND_SUSPEND_LABEL, CONTEXT_IN_DEBUG_MODE, ContextKeyExpr.or(CONTEXT_FOCUSED_SESSION_IS_ATTACH, ContextKeyExpr.and(CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED, CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED)));
-registerDebugCommandPaletteItem(STOP_ID, STOP_LABEL, CONTEXT_IN_DEBUG_MODE, ContextKeyExpr.or(CONTEXT_FOCUSED_SESSION_IS_ATTACH.toNegated(), CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED));
-registerDebugCommandPaletteItem(CONTINUE_ID, CONTINUE_LABEL, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugCommandPaletteItem(FOCUS_REPL_ID, nls.localize2({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugFocusConsole' }, "Focus on Debug Console View"));
-registerDebugCommandPaletteItem(JUMP_TO_CURSOR_ID, nls.localize2('jumpToCursor', "Jump to Cursor"), CONTEXT_JUMP_TO_CURSOR_SUPPORTED);
-registerDebugCommandPaletteItem(JUMP_TO_CURSOR_ID, nls.localize2('SetNextStatement', "Set Next Statement"), CONTEXT_JUMP_TO_CURSOR_SUPPORTED);
-registerDebugCommandPaletteItem(RunToCursorAction.ID, RunToCursorAction.LABEL, CONTEXT_DEBUGGERS_AVAILABLE);
-registerDebugCommandPaletteItem(SelectionToReplAction.ID, SelectionToReplAction.LABEL, CONTEXT_IN_DEBUG_MODE);
-registerDebugCommandPaletteItem(SelectionToWatchExpressionsAction.ID, SelectionToWatchExpressionsAction.LABEL);
-registerDebugCommandPaletteItem(TOGGLE_INLINE_BREAKPOINT_ID, nls.localize2('inlineBreakpoint', "Inline Breakpoint"));
-registerDebugCommandPaletteItem(DEBUG_START_COMMAND_ID, DEBUG_START_LABEL, ContextKeyExpr.and(CONTEXT_DEBUGGERS_AVAILABLE, CONTEXT_DEBUG_STATE.notEqualsTo(getStateLabel(State.Initializing))));
-registerDebugCommandPaletteItem(DEBUG_RUN_COMMAND_ID, DEBUG_RUN_LABEL, ContextKeyExpr.and(CONTEXT_DEBUGGERS_AVAILABLE, CONTEXT_DEBUG_STATE.notEqualsTo(getStateLabel(State.Initializing))));
-registerDebugCommandPaletteItem(SELECT_AND_START_ID, SELECT_AND_START_LABEL, ContextKeyExpr.and(CONTEXT_DEBUGGERS_AVAILABLE, CONTEXT_DEBUG_STATE.notEqualsTo(getStateLabel(State.Initializing))));
-registerDebugCommandPaletteItem(NEXT_DEBUG_CONSOLE_ID, NEXT_DEBUG_CONSOLE_LABEL);
-registerDebugCommandPaletteItem(PREV_DEBUG_CONSOLE_ID, PREV_DEBUG_CONSOLE_LABEL);
-registerDebugCommandPaletteItem(SHOW_LOADED_SCRIPTS_ID, OPEN_LOADED_SCRIPTS_LABEL, CONTEXT_IN_DEBUG_MODE);
-registerDebugCommandPaletteItem(SELECT_DEBUG_CONSOLE_ID, SELECT_DEBUG_CONSOLE_LABEL);
-registerDebugCommandPaletteItem(SELECT_DEBUG_SESSION_ID, SELECT_DEBUG_SESSION_LABEL);
-registerDebugCommandPaletteItem(CALLSTACK_TOP_ID, CALLSTACK_TOP_LABEL, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugCommandPaletteItem(CALLSTACK_BOTTOM_ID, CALLSTACK_BOTTOM_LABEL, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugCommandPaletteItem(CALLSTACK_UP_ID, CALLSTACK_UP_LABEL, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugCommandPaletteItem(CALLSTACK_DOWN_ID, CALLSTACK_DOWN_LABEL, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-
-// Debug callstack context menu
-const registerDebugViewMenuItem = (menuId: MenuId, id: string, title: string | ICommandActionTitle, order: number, when?: ContextKeyExpression, precondition?: ContextKeyExpression, group = 'navigation', icon?: Icon) => {
-	MenuRegistry.appendMenuItem(menuId, {
-		group,
-		when,
-		order,
-		icon,
-		command: {
-			id,
-			title,
-			icon,
-			precondition
-		}
-	});
-};
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, RESTART_SESSION_ID, RESTART_LABEL, 10, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'), undefined, '3_modification');
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, DISCONNECT_ID, DISCONNECT_LABEL, 20, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'), undefined, '3_modification');
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, DISCONNECT_AND_SUSPEND_ID, DISCONNECT_AND_SUSPEND_LABEL, 21, ContextKeyExpr.and(CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'), CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED, CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED), undefined, '3_modification');
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, STOP_ID, STOP_LABEL, 30, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'), undefined, '3_modification');
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, PAUSE_ID, PAUSE_LABEL, 10, ContextKeyExpr.and(CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('running')));
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, CONTINUE_ID, CONTINUE_LABEL, 10, ContextKeyExpr.and(CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, STEP_OVER_ID, STEP_OVER_LABEL, 20, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, STEP_INTO_ID, STEP_INTO_LABEL, 30, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, STEP_OUT_ID, STEP_OUT_LABEL, 40, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, TERMINATE_THREAD_ID, nls.localize('terminateThread', "Terminate Thread"), 10, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), undefined, 'termination');
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, RESTART_FRAME_ID, nls.localize('restartFrame', "Restart Frame"), 10, ContextKeyExpr.and(CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), CONTEXT_RESTART_FRAME_SUPPORTED), CONTEXT_STACK_FRAME_SUPPORTS_RESTART);
-registerDebugViewMenuItem(MenuId.DebugCallStackContext, COPY_STACK_TRACE_ID, nls.localize('copyStackTrace', "Copy Call Stack"), 20, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), undefined, '3_modification');
-
-registerDebugViewMenuItem(MenuId.DebugVariablesContext, VIEW_MEMORY_ID, nls.localize('viewMemory', "View Binary Data"), 15, CONTEXT_CAN_VIEW_MEMORY, CONTEXT_IN_DEBUG_MODE, 'inline', icons.debugInspectMemory);
-
-registerDebugViewMenuItem(MenuId.DebugVariablesContext, SET_VARIABLE_ID, nls.localize('setValue', "Set Value"), 10, ContextKeyExpr.or(CONTEXT_SET_VARIABLE_SUPPORTED, ContextKeyExpr.and(CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, CONTEXT_SET_EXPRESSION_SUPPORTED)), CONTEXT_VARIABLE_IS_READONLY.toNegated(), '3_modification');
-registerDebugViewMenuItem(MenuId.DebugVariablesContext, COPY_VALUE_ID, nls.localize('copyValue', "Copy Value"), 10, undefined, undefined, '5_cutcopypaste');
-registerDebugViewMenuItem(MenuId.DebugVariablesContext, COPY_EVALUATE_PATH_ID, nls.localize('copyAsExpression', "Copy as Expression"), 20, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, undefined, '5_cutcopypaste');
-registerDebugViewMenuItem(MenuId.DebugVariablesContext, ADD_TO_WATCH_ID, nls.localize('addToWatchExpressions', "Add to Watch"), 100, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, undefined, 'z_commands');
-registerDebugViewMenuItem(MenuId.DebugVariablesContext, BREAK_WHEN_VALUE_IS_READ_ID, nls.localize('breakWhenValueIsRead', "Break on Value Read"), 200, CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED, undefined, 'z_commands');
-registerDebugViewMenuItem(MenuId.DebugVariablesContext, BREAK_WHEN_VALUE_CHANGES_ID, nls.localize('breakWhenValueChanges', "Break on Value Change"), 210, CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED, undefined, 'z_commands');
-registerDebugViewMenuItem(MenuId.DebugVariablesContext, BREAK_WHEN_VALUE_IS_ACCESSED_ID, nls.localize('breakWhenValueIsAccessed', "Break on Value Access"), 220, CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED, undefined, 'z_commands');
-
-registerDebugViewMenuItem(MenuId.DebugWatchContext, ADD_WATCH_ID, ADD_WATCH_LABEL, 10, undefined, undefined, '3_modification');
-registerDebugViewMenuItem(MenuId.DebugWatchContext, EDIT_EXPRESSION_COMMAND_ID, nls.localize('editWatchExpression', "Edit Expression"), 20, CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), undefined, '3_modification');
-registerDebugViewMenuItem(MenuId.DebugWatchContext, SET_EXPRESSION_COMMAND_ID, nls.localize('setValue', "Set Value"), 30, ContextKeyExpr.or(ContextKeyExpr.and(CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), CONTEXT_SET_EXPRESSION_SUPPORTED), ContextKeyExpr.and(CONTEXT_WATCH_ITEM_TYPE.isEqualTo('variable'), CONTEXT_SET_VARIABLE_SUPPORTED)), CONTEXT_VARIABLE_IS_READONLY.toNegated(), '3_modification');
-registerDebugViewMenuItem(MenuId.DebugWatchContext, COPY_VALUE_ID, nls.localize('copyValue', "Copy Value"), 40, ContextKeyExpr.or(CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), CONTEXT_WATCH_ITEM_TYPE.isEqualTo('variable')), CONTEXT_IN_DEBUG_MODE, '3_modification');
-registerDebugViewMenuItem(MenuId.DebugWatchContext, VIEW_MEMORY_ID, nls.localize('viewMemory', "View Binary Data"), 10, CONTEXT_CAN_VIEW_MEMORY, undefined, 'inline', icons.debugInspectMemory);
-registerDebugViewMenuItem(MenuId.DebugWatchContext, REMOVE_EXPRESSION_COMMAND_ID, nls.localize('removeWatchExpression', "Remove Expression"), 20, CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), undefined, 'inline', icons.watchExpressionRemove);
-registerDebugViewMenuItem(MenuId.DebugWatchContext, REMOVE_WATCH_EXPRESSIONS_COMMAND_ID, REMOVE_WATCH_EXPRESSIONS_LABEL, 20, undefined, undefined, 'z_commands');
-
-// Touch Bar
-if (isMacintosh) {
-
-	const registerTouchBarEntry = (id: string, title: string | ICommandActionTitle, order: number, when: ContextKeyExpression | undefined, iconUri: URI) => {
-		MenuRegistry.appendMenuItem(MenuId.TouchBarContext, {
-			command: {
-				id,
-				title,
-				icon: { dark: iconUri }
-			},
-			when: ContextKeyExpr.and(CONTEXT_DEBUGGERS_AVAILABLE, when),
-			group: '9_debug',
-			order
-		});
-	};
-
-	registerTouchBarEntry(DEBUG_RUN_COMMAND_ID, DEBUG_RUN_LABEL, 0, CONTEXT_IN_DEBUG_MODE.toNegated(), FileAccess.asFileUri('vs/workbench/contrib/debug/browser/media/continue-tb.png'));
-	registerTouchBarEntry(DEBUG_START_COMMAND_ID, DEBUG_START_LABEL, 1, CONTEXT_IN_DEBUG_MODE.toNegated(), FileAccess.asFileUri('vs/workbench/contrib/debug/browser/media/run-with-debugging-tb.png'));
-	registerTouchBarEntry(CONTINUE_ID, CONTINUE_LABEL, 0, CONTEXT_DEBUG_STATE.isEqualTo('stopped'), FileAccess.asFileUri('vs/workbench/contrib/debug/browser/media/continue-tb.png'));
-	registerTouchBarEntry(PAUSE_ID, PAUSE_LABEL, 1, ContextKeyExpr.and(CONTEXT_IN_DEBUG_MODE, ContextKeyExpr.notEquals('debugState', 'stopped')), FileAccess.asFileUri('vs/workbench/contrib/debug/browser/media/pause-tb.png'));
-	registerTouchBarEntry(STEP_OVER_ID, STEP_OVER_LABEL, 2, CONTEXT_IN_DEBUG_MODE, FileAccess.asFileUri('vs/workbench/contrib/debug/browser/media/stepover-tb.png'));
-	registerTouchBarEntry(STEP_INTO_ID, STEP_INTO_LABEL, 3, CONTEXT_IN_DEBUG_MODE, FileAccess.asFileUri('vs/workbench/contrib/debug/browser/media/stepinto-tb.png'));
-	registerTouchBarEntry(STEP_OUT_ID, STEP_OUT_LABEL, 4, CONTEXT_IN_DEBUG_MODE, FileAccess.asFileUri('vs/workbench/contrib/debug/browser/media/stepout-tb.png'));
-	registerTouchBarEntry(RESTART_SESSION_ID, RESTART_LABEL, 5, CONTEXT_IN_DEBUG_MODE, FileAccess.asFileUri('vs/workbench/contrib/debug/browser/media/restart-tb.png'));
-	registerTouchBarEntry(STOP_ID, STOP_LABEL, 6, CONTEXT_IN_DEBUG_MODE, FileAccess.asFileUri('vs/workbench/contrib/debug/browser/media/stop-tb.png'));
-}
-
-// Editor Title Menu's "Run/Debug" dropdown item
-
-MenuRegistry.appendMenuItem(MenuId.EditorTitle, { submenu: MenuId.EditorTitleRun, rememberDefaultAction: true, title: nls.localize2('run', "Run or Debug..."), icon: icons.debugRun, group: 'navigation', order: -1 });
-
-// Debug menu
-
-MenuRegistry.appendMenuItem(MenuId.MenubarMainMenu, {
-	submenu: MenuId.MenubarDebugMenu,
-	title: {
-		value: 'Run',
-		original: 'Run',
-		mnemonicTitle: nls.localize({ key: 'mRun', comment: ['&& denotes a mnemonic'] }, "&&Run")
-	},
-	order: 6
-});
-
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '1_debug',
-	command: {
-		id: DEBUG_START_COMMAND_ID,
-		title: nls.localize({ key: 'miStartDebugging', comment: ['&& denotes a mnemonic'] }, "&&Start Debugging")
-	},
-	order: 1,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '1_debug',
-	command: {
-		id: DEBUG_RUN_COMMAND_ID,
-		title: nls.localize({ key: 'miRun', comment: ['&& denotes a mnemonic'] }, "Run &&Without Debugging")
-	},
-	order: 2,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
 
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '1_debug',
-	command: {
-		id: STOP_ID,
-		title: nls.localize({ key: 'miStopDebugging', comment: ['&& denotes a mnemonic'] }, "&&Stop Debugging"),
-		precondition: CONTEXT_IN_DEBUG_MODE
-	},
-	order: 3,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '1_debug',
-	command: {
-		id: RESTART_SESSION_ID,
-		title: nls.localize({ key: 'miRestart Debugging', comment: ['&& denotes a mnemonic'] }, "&&Restart Debugging"),
-		precondition: CONTEXT_IN_DEBUG_MODE
-	},
-	order: 4,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-// Configuration
-
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '2_configuration',
-	command: {
-		id: ADD_CONFIGURATION_ID,
-		title: nls.localize({ key: 'miAddConfiguration', comment: ['&& denotes a mnemonic'] }, "A&&dd Configuration...")
-	},
-	order: 2,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-// Step Commands
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '3_step',
-	command: {
-		id: STEP_OVER_ID,
-		title: nls.localize({ key: 'miStepOver', comment: ['&& denotes a mnemonic'] }, "Step &&Over"),
-		precondition: CONTEXT_DEBUG_STATE.isEqualTo('stopped')
-	},
-	order: 1,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '3_step',
-	command: {
-		id: STEP_INTO_ID,
-		title: nls.localize({ key: 'miStepInto', comment: ['&& denotes a mnemonic'] }, "Step &&Into"),
-		precondition: CONTEXT_DEBUG_STATE.isEqualTo('stopped')
-	},
-	order: 2,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '3_step',
-	command: {
-		id: STEP_OUT_ID,
-		title: nls.localize({ key: 'miStepOut', comment: ['&& denotes a mnemonic'] }, "Step O&&ut"),
-		precondition: CONTEXT_DEBUG_STATE.isEqualTo('stopped')
-	},
-	order: 3,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '3_step',
-	command: {
-		id: CONTINUE_ID,
-		title: nls.localize({ key: 'miContinue', comment: ['&& denotes a mnemonic'] }, "&&Continue"),
-		precondition: CONTEXT_DEBUG_STATE.isEqualTo('stopped')
-	},
-	order: 4,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-// New Breakpoints
-
-MenuRegistry.appendMenuItem(MenuId.MenubarNewBreakpointMenu, {
-	group: '1_breakpoints',
-	command: {
-		id: TOGGLE_INLINE_BREAKPOINT_ID,
-		title: nls.localize({ key: 'miInlineBreakpoint', comment: ['&& denotes a mnemonic'] }, "Inline Breakp&&oint")
-	},
-	order: 2,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: '4_new_breakpoint',
-	title: nls.localize({ key: 'miNewBreakpoint', comment: ['&& denotes a mnemonic'] }, "&&New Breakpoint"),
-	submenu: MenuId.MenubarNewBreakpointMenu,
-	order: 2,
-	when: CONTEXT_DEBUGGERS_AVAILABLE
-});
-
-// Breakpoint actions are registered from breakpointsView.ts
-
-// Install Debuggers
-MenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {
-	group: 'z_install',
-	command: {
-		id: 'debug.installAdditionalDebuggers',
-		title: nls.localize({ key: 'miInstallAdditionalDebuggers', comment: ['&& denotes a mnemonic'] }, "&&Install Additional Debuggers...")
-	},
-	order: 1
-});
-
-// register repl panel
-
-const VIEW_CONTAINER: ViewContainer = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry).registerViewContainer({
-	id: DEBUG_PANEL_ID,
-	title: nls.localize2({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, "Debug Console"),
-	icon: icons.debugConsoleViewIcon,
-	ctorDescriptor: new SyncDescriptor(ViewPaneContainer, [DEBUG_PANEL_ID, { mergeViewWithContainerWhenSingleView: true }]),
-	storageId: DEBUG_PANEL_ID,
-	hideIfEmpty: true,
-	order: 2,
-}, ViewContainerLocation.Panel, { doNotRegisterOpenCommand: true });
-
-Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).registerViews([{
-	id: REPL_VIEW_ID,
-	name: nls.localize2({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, "Debug Console"),
-	containerIcon: icons.debugConsoleViewIcon,
-	canToggleVisibility: false,
-	canMoveView: true,
-	when: CONTEXT_DEBUGGERS_AVAILABLE,
-	ctorDescriptor: new SyncDescriptor(Repl),
-	openCommandActionDescriptor: {
-		id: 'workbench.debug.action.toggleRepl',
-		mnemonicTitle: nls.localize({ key: 'miToggleDebugConsole', comment: ['&& denotes a mnemonic'] }, "De&&bug Console"),
-		keybindings: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyY },
-		order: 2
-	}
-}], VIEW_CONTAINER);
-
-
-const viewContainer = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry).registerViewContainer({
-	id: VIEWLET_ID,
-	title: nls.localize2('run and debug', "Run and Debug"),
-	openCommandActionDescriptor: {
-		id: VIEWLET_ID,
-		mnemonicTitle: nls.localize({ key: 'miViewRun', comment: ['&& denotes a mnemonic'] }, "&&Run"),
-		keybindings: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyD },
-		order: 3
-	},
-	ctorDescriptor: new SyncDescriptor(DebugViewPaneContainer),
-	icon: icons.runViewIcon,
-	alwaysUseContainerInfo: true,
-	order: 3,
-}, ViewContainerLocation.Sidebar);
-
-// Register default debug views
-const viewsRegistry = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry);
-viewsRegistry.registerViews([{ id: VARIABLES_VIEW_ID, name: nls.localize2('variables', "Variables"), containerIcon: icons.variablesViewIcon, ctorDescriptor: new SyncDescriptor(VariablesView), order: 10, weight: 40, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusVariablesView' }, when: CONTEXT_DEBUG_UX.isEqualTo('default') }], viewContainer);
-viewsRegistry.registerViews([{ id: WATCH_VIEW_ID, name: nls.localize2('watch', "Watch"), containerIcon: icons.watchViewIcon, ctorDescriptor: new SyncDescriptor(WatchExpressionsView), order: 20, weight: 10, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusWatchView' }, when: CONTEXT_DEBUG_UX.isEqualTo('default') }], viewContainer);
-viewsRegistry.registerViews([{ id: CALLSTACK_VIEW_ID, name: nls.localize2('callStack', "Call Stack"), containerIcon: icons.callStackViewIcon, ctorDescriptor: new SyncDescriptor(CallStackView), order: 30, weight: 30, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusCallStackView' }, when: CONTEXT_DEBUG_UX.isEqualTo('default') }], viewContainer);
-viewsRegistry.registerViews([{ id: BREAKPOINTS_VIEW_ID, name: nls.localize2('breakpoints', "Breakpoints"), containerIcon: icons.breakpointsViewIcon, ctorDescriptor: new SyncDescriptor(BreakpointsView), order: 40, weight: 20, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusBreakpointsView' }, when: ContextKeyExpr.or(CONTEXT_BREAKPOINTS_EXIST, CONTEXT_DEBUG_UX.isEqualTo('default'), CONTEXT_HAS_DEBUGGED) }], viewContainer);
-viewsRegistry.registerViews([{ id: WelcomeView.ID, name: WelcomeView.LABEL, containerIcon: icons.runViewIcon, ctorDescriptor: new SyncDescriptor(WelcomeView), order: 1, weight: 40, canToggleVisibility: true, when: CONTEXT_DEBUG_UX.isEqualTo('simple') }], viewContainer);
-viewsRegistry.registerViews([{ id: LOADED_SCRIPTS_VIEW_ID, name: nls.localize2('loadedScripts', "Loaded Scripts"), containerIcon: icons.loadedScriptsViewIcon, ctorDescriptor: new SyncDescriptor(LoadedScriptsView), order: 35, weight: 5, canToggleVisibility: true, canMoveView: true, collapsed: true, when: ContextKeyExpr.and(CONTEXT_LOADED_SCRIPTS_SUPPORTED, CONTEXT_DEBUG_UX.isEqualTo('default')) }], viewContainer);
-
-// Register disassembly view
+import { DebugService } from 'vs/workbench/contrib/debug/browser/debugService';
 
-Registry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).registerEditorPane(
-	EditorPaneDescriptor.create(DisassemblyView, DISASSEMBLY_VIEW_ID, nls.localize('disassembly', "Disassembly")),
-	[new SyncDescriptor(DisassemblyViewInput)]
-);
+import { IDebugService, } from 'vs/workbench/contrib/debug/common/debug';
 
-// Register configuration
-const configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);
-configurationRegistry.registerConfiguration({
-	id: 'debug',
-	order: 20,
-	title: nls.localize('debugConfigurationTitle', "Debug"),
-	type: 'object',
-	properties: {
-		'debug.allowBreakpointsEverywhere': {
-			type: 'boolean',
-			description: nls.localize({ comment: ['This is the description for a setting'], key: 'allowBreakpointsEverywhere' }, "Allow setting breakpoints in any file."),
-			default: false
-		},
-		'debug.openExplorerOnEnd': {
-			type: 'boolean',
-			description: nls.localize({ comment: ['This is the description for a setting'], key: 'openExplorerOnEnd' }, "Automatically open the explorer view at the end of a debug session."),
-			default: false
-		},
-		'debug.inlineValues': {
-			type: 'string',
-			'enum': ['on', 'off', 'auto'],
-			description: nls.localize({ comment: ['This is the description for a setting'], key: 'inlineValues' }, "Show variable values inline in editor while debugging."),
-			'enumDescriptions': [
-				nls.localize('inlineValues.on', "Always show variable values inline in editor while debugging."),
-				nls.localize('inlineValues.off', "Never show variable values inline in editor while debugging."),
-				nls.localize('inlineValues.focusNoScroll', "Show variable values inline in editor while debugging when the language supports inline value locations."),
-			],
-			default: 'auto'
-		},
-		'debug.toolBarLocation': {
-			enum: ['floating', 'docked', 'commandCenter', 'hidden'],
-			markdownDescription: nls.localize({ comment: ['This is the description for a setting'], key: 'toolBarLocation' }, "Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, `commandCenter` (requires `{0}`), or `hidden`.", '#window.commandCenter#'),
-			default: 'floating',
-			markdownEnumDescriptions: [
-				nls.localize('debugToolBar.floating', "Show debug toolbar in all views."),
-				nls.localize('debugToolBar.docked', "Show debug toolbar only in debug views."),
-				nls.localize('debugToolBar.commandCenter', "`(Experimental)` Show debug toolbar in the command center."),
-				nls.localize('debugToolBar.hidden', "Do not show debug toolbar."),
-			]
-		},
-		'debug.showInStatusBar': {
-			enum: ['never', 'always', 'onFirstSessionStart'],
-			enumDescriptions: [nls.localize('never', "Never show debug in Status bar"), nls.localize('always', "Always show debug in Status bar"), nls.localize('onFirstSessionStart', "Show debug in Status bar only after debug was started for the first time")],
-			description: nls.localize({ comment: ['This is the description for a setting'], key: 'showInStatusBar' }, "Controls when the debug Status bar should be visible."),
-			default: 'onFirstSessionStart'
-		},
-		'debug.internalConsoleOptions': INTERNAL_CONSOLE_OPTIONS_SCHEMA,
-		'debug.console.closeOnEnd': {
-			type: 'boolean',
-			description: nls.localize('debug.console.closeOnEnd', "Controls if the Debug Console should be automatically closed when the debug session ends."),
-			default: false
-		},
-		'debug.terminal.clearBeforeReusing': {
-			type: 'boolean',
-			description: nls.localize({ comment: ['This is the description for a setting'], key: 'debug.terminal.clearBeforeReusing' }, "Before starting a new debug session in an integrated or external terminal, clear the terminal."),
-			default: false
-		},
-		'debug.openDebug': {
-			enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart', 'openOnDebugBreak'],
-			default: 'openOnDebugBreak',
-			description: nls.localize('openDebug', "Controls when the debug view should open.")
-		},
-		'debug.showSubSessionsInToolBar': {
-			type: 'boolean',
-			description: nls.localize({ comment: ['This is the description for a setting'], key: 'showSubSessionsInToolBar' }, "Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session."),
-			default: false
-		},
-		'debug.console.fontSize': {
-			type: 'number',
-			description: nls.localize('debug.console.fontSize', "Controls the font size in pixels in the Debug Console."),
-			default: isMacintosh ? 12 : 14,
-		},
-		'debug.console.fontFamily': {
-			type: 'string',
-			description: nls.localize('debug.console.fontFamily', "Controls the font family in the Debug Console."),
-			default: 'default'
-		},
-		'debug.console.lineHeight': {
-			type: 'number',
-			description: nls.localize('debug.console.lineHeight', "Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size."),
-			default: 0
-		},
-		'debug.console.wordWrap': {
-			type: 'boolean',
-			description: nls.localize('debug.console.wordWrap', "Controls if the lines should wrap in the Debug Console."),
-			default: true
-		},
-		'debug.console.historySuggestions': {
-			type: 'boolean',
-			description: nls.localize('debug.console.historySuggestions', "Controls if the Debug Console should suggest previously typed input."),
-			default: true
-		},
-		'debug.console.collapseIdenticalLines': {
-			type: 'boolean',
-			description: nls.localize('debug.console.collapseIdenticalLines', "Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge."),
-			default: true
-		},
-		'debug.console.acceptSuggestionOnEnter': {
-			enum: ['off', 'on'],
-			description: nls.localize('debug.console.acceptSuggestionOnEnter', "Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console."),
-			default: 'off'
-		},
-		'launch': {
-			type: 'object',
-			description: nls.localize({ comment: ['This is the description for a setting'], key: 'launch' }, "Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces."),
-			default: { configurations: [], compounds: [] },
-			$ref: launchSchemaId
-		},
-		'debug.focusWindowOnBreak': {
-			type: 'boolean',
-			description: nls.localize('debug.focusWindowOnBreak', "Controls whether the workbench window should be focused when the debugger breaks."),
-			default: true
-		},
-		'debug.focusEditorOnBreak': {
-			type: 'boolean',
-			description: nls.localize('debug.focusEditorOnBreak', "Controls whether the editor should be focused when the debugger breaks."),
-			default: true
-		},
-		'debug.onTaskErrors': {
-			enum: ['debugAnyway', 'showErrors', 'prompt', 'abort'],
-			enumDescriptions: [nls.localize('debugAnyway', "Ignore task errors and start debugging."), nls.localize('showErrors', "Show the Problems view and do not start debugging."), nls.localize('prompt', "Prompt user."), nls.localize('cancel', "Cancel debugging.")],
-			description: nls.localize('debug.onTaskErrors', "Controls what to do when errors are encountered after running a preLaunchTask."),
-			default: 'prompt'
-		},
-		'debug.showBreakpointsInOverviewRuler': {
-			type: 'boolean',
-			description: nls.localize({ comment: ['This is the description for a setting'], key: 'showBreakpointsInOverviewRuler' }, "Controls whether breakpoints should be shown in the overview ruler."),
-			default: false
-		},
-		'debug.showInlineBreakpointCandidates': {
-			type: 'boolean',
-			description: nls.localize({ comment: ['This is the description for a setting'], key: 'showInlineBreakpointCandidates' }, "Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging."),
-			default: true
-		},
-		'debug.saveBeforeStart': {
-			description: nls.localize('debug.saveBeforeStart', "Controls what editors to save before starting a debug session."),
-			enum: ['allEditorsInActiveGroup', 'nonUntitledEditorsInActiveGroup', 'none'],
-			enumDescriptions: [
-				nls.localize('debug.saveBeforeStart.allEditorsInActiveGroup', "Save all editors in the active group before starting a debug session."),
-				nls.localize('debug.saveBeforeStart.nonUntitledEditorsInActiveGroup', "Save all editors in the active group except untitled ones before starting a debug session."),
-				nls.localize('debug.saveBeforeStart.none', "Don't save any editors before starting a debug session."),
-			],
-			default: 'allEditorsInActiveGroup',
-			scope: ConfigurationScope.LANGUAGE_OVERRIDABLE
-		},
-		'debug.confirmOnExit': {
-			description: nls.localize('debug.confirmOnExit', "Controls whether to confirm when the window closes if there are active debug sessions."),
-			type: 'string',
-			enum: ['never', 'always'],
-			enumDescriptions: [
-				nls.localize('debug.confirmOnExit.never', "Never confirm."),
-				nls.localize('debug.confirmOnExit.always', "Always confirm if there are debug sessions."),
-			],
-			default: 'never'
-		},
-		'debug.disassemblyView.showSourceCode': {
-			type: 'boolean',
-			default: true,
-			description: nls.localize('debug.disassemblyView.showSourceCode', "Show Source Code in Disassembly View.")
-		},
-		'debug.autoExpandLazyVariables': {
-			type: 'boolean',
-			default: false,
-			description: nls.localize('debug.autoExpandLazyVariables', "Automatically show values for variables that are lazily resolved by the debugger, such as getters.")
-		},
-		'debug.enableStatusBarColor': {
-			type: 'boolean',
-			description: nls.localize('debug.enableStatusBarColor', "Color of the Status bar when debugger is active."),
-			default: true
-		},
-		'debug.hideLauncherWhileDebugging': {
-			type: 'boolean',
-			markdownDescription: nls.localize({ comment: ['This is the description for a setting'], key: 'debug.hideLauncherWhileDebugging' }, "Hide 'Start Debugging' control in title bar of 'Run and Debug' view while debugging is active. Only relevant when `{0}` is not `docked`.", '#debug.toolBarLocation#'),
-			default: false
-		}
-	}
-});
+registerSingleton(IDebugService, DebugService, InstantiationType.Delayed);
diff --git a/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts b/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
index 4797dcb..627ffb1 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
@@ -2,1717 +2,9 @@
  *  Copyright (c) Microsoft Corporation. All rights reserved.
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
-
-import { localize } from 'vs/nls';
-import { KeyMod, KeyCode } from 'vs/base/common/keyCodes';
-import { Registry } from 'vs/platform/registry/common/platform';
-import { MenuRegistry, MenuId, registerAction2, Action2, ISubmenuItem, IMenuItem, IAction2Options } from 'vs/platform/actions/common/actions';
 import { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';
-import { ExtensionsLocalizedLabel, IExtensionManagementService, IExtensionGalleryService, PreferencesLocalizedLabel, InstallOperation, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';
-import { EnablementState, IExtensionManagementServerService, IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
-import { IExtensionIgnoredRecommendationsService, IExtensionRecommendationsService } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';
-import { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions, IWorkbenchContribution } from 'vs/workbench/common/contributions';
-import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
-import { VIEWLET_ID, IExtensionsWorkbenchService, IExtensionsViewPaneContainer, TOGGLE_IGNORE_EXTENSION_ACTION_ID, INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID, WORKSPACE_RECOMMENDATIONS_VIEW_ID, IWorkspaceRecommendedExtensionsView, AutoUpdateConfigurationKey, HasOutdatedExtensionsContext, SELECT_INSTALL_VSIX_EXTENSION_COMMAND_ID, LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID, ExtensionEditorTab, THEME_ACTIONS_GROUP, INSTALL_ACTIONS_GROUP, OUTDATED_EXTENSIONS_VIEW_ID, CONTEXT_HAS_GALLERY, IExtension, extensionsSearchActionsMenu, UPDATE_ACTIONS_GROUP } from 'vs/workbench/contrib/extensions/common/extensions';
-import { ReinstallAction, InstallSpecificVersionOfExtensionAction, ConfigureWorkspaceRecommendedExtensionsAction, ConfigureWorkspaceFolderRecommendedExtensionsAction, PromptExtensionInstallFailureAction, SearchExtensionsAction, SwitchToPreReleaseVersionAction, SwitchToReleasedVersionAction, SetColorThemeAction, SetFileIconThemeAction, SetProductIconThemeAction, ClearLanguageAction, ToggleAutoUpdateForExtensionAction, ToggleAutoUpdatesForPublisherAction } from 'vs/workbench/contrib/extensions/browser/extensionsActions';
-import { ExtensionsInput } from 'vs/workbench/contrib/extensions/common/extensionsInput';
-import { ExtensionEditor } from 'vs/workbench/contrib/extensions/browser/extensionEditor';
-import { StatusUpdater, MaliciousExtensionChecker, ExtensionsViewletViewsContribution, ExtensionsViewPaneContainer, BuiltInExtensionsContext, SearchMarketplaceExtensionsContext, RecommendedExtensionsContext, DefaultViewsContext, ExtensionsSortByContext, SearchHasTextContext } from 'vs/workbench/contrib/extensions/browser/extensionsViewlet';
-import { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';
-import * as jsonContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';
-import { ExtensionsConfigurationSchema, ExtensionsConfigurationSchemaId } from 'vs/workbench/contrib/extensions/common/extensionsFileTemplate';
-import { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';
-import { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
-import { KeymapExtensions } from 'vs/workbench/contrib/extensions/common/extensionsUtils';
-import { areSameExtensions, getIdAndVersion } from 'vs/platform/extensionManagement/common/extensionManagementUtil';
-import { EditorPaneDescriptor, IEditorPaneRegistry } from 'vs/workbench/browser/editor';
-import { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';
-import { URI, UriComponents } from 'vs/base/common/uri';
-import { ExtensionActivationProgress } from 'vs/workbench/contrib/extensions/browser/extensionsActivationProgress';
-import { onUnexpectedError } from 'vs/base/common/errors';
-import { ExtensionDependencyChecker } from 'vs/workbench/contrib/extensions/browser/extensionsDependencyChecker';
-import { CancellationToken } from 'vs/base/common/cancellation';
-import { IViewContainersRegistry, ViewContainerLocation, Extensions as ViewContainerExtensions, IViewsService } from 'vs/workbench/common/views';
-import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
-import { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';
-import { ContextKeyExpr, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';
-import { IQuickAccessRegistry, Extensions } from 'vs/platform/quickinput/common/quickAccess';
-import { InstallExtensionQuickAccessProvider, ManageExtensionsQuickAccessProvider } from 'vs/workbench/contrib/extensions/browser/extensionsQuickAccess';
-import { ExtensionRecommendationsService } from 'vs/workbench/contrib/extensions/browser/extensionRecommendationsService';
-import { CONTEXT_SYNC_ENABLEMENT } from 'vs/workbench/services/userDataSync/common/userDataSync';
-import { CopyAction, CutAction, PasteAction } from 'vs/editor/contrib/clipboard/browser/clipboard';
-import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
-import { MultiCommand } from 'vs/editor/browser/editorExtensions';
-import { IWebview } from 'vs/workbench/contrib/webview/browser/webview';
+import { IExtensionsWorkbenchService, } from 'vs/workbench/contrib/extensions/common/extensions';
 import { ExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/browser/extensionsWorkbenchService';
-import { Categories } from 'vs/platform/action/common/actionCommonCategories';
-import { IExtensionRecommendationNotificationService } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';
-import { ExtensionRecommendationNotificationService } from 'vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService';
-import { IExtensionService, toExtensionDescription } from 'vs/workbench/services/extensions/common/extensions';
-import { INotificationService, Severity } from 'vs/platform/notification/common/notification';
-import { IHostService } from 'vs/workbench/services/host/browser/host';
-import { ResourceContextKey, WorkbenchStateContext } from 'vs/workbench/common/contextkeys';
-import { IAction } from 'vs/base/common/actions';
-import { IWorkspaceExtensionsConfigService } from 'vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig';
-import { Schemas } from 'vs/base/common/network';
-import { ShowRuntimeExtensionsAction } from 'vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor';
-import { ExtensionEnablementWorkspaceTrustTransitionParticipant } from 'vs/workbench/contrib/extensions/browser/extensionEnablementWorkspaceTrustTransitionParticipant';
-import { clearSearchResultsIcon, configureRecommendedIcon, extensionsViewIcon, filterIcon, installWorkspaceRecommendedIcon, refreshIcon } from 'vs/workbench/contrib/extensions/browser/extensionsIcons';
-import { EXTENSION_CATEGORIES } from 'vs/platform/extensions/common/extensions';
-import { Disposable, DisposableStore, IDisposable, isDisposable } from 'vs/base/common/lifecycle';
-import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
-import { IDialogService, IFileDialogService } from 'vs/platform/dialogs/common/dialogs';
-import { mnemonicButtonLabel } from 'vs/base/common/labels';
-import { Query } from 'vs/workbench/contrib/extensions/common/extensionQuery';
-import { Promises } from 'vs/base/common/async';
-import { EditorExtensions } from 'vs/workbench/common/editor';
-import { WORKSPACE_TRUST_EXTENSION_SUPPORT } from 'vs/workbench/services/workspaces/common/workspaceTrust';
-import { ExtensionsCompletionItemsProvider } from 'vs/workbench/contrib/extensions/browser/extensionsCompletionItemsProvider';
-import { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';
-import { Event } from 'vs/base/common/event';
-import { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';
-import { UnsupportedExtensionsMigrationContrib } from 'vs/workbench/contrib/extensions/browser/unsupportedExtensionsMigrationContribution';
-import { isWeb } from 'vs/base/common/platform';
-import { ExtensionStorageService } from 'vs/platform/extensionManagement/common/extensionStorage';
-import { IStorageService } from 'vs/platform/storage/common/storage';
-import { IStringDictionary } from 'vs/base/common/collections';
-import { CONTEXT_KEYBINDINGS_EDITOR } from 'vs/workbench/contrib/preferences/common/preferences';
-import { DeprecatedExtensionsChecker } from 'vs/workbench/contrib/extensions/browser/deprecatedExtensionsChecker';
 
 // Singletons
 registerSingleton(IExtensionsWorkbenchService, ExtensionsWorkbenchService, InstantiationType.Eager /* Auto updates extensions */);
-registerSingleton(IExtensionRecommendationNotificationService, ExtensionRecommendationNotificationService, InstantiationType.Delayed);
-registerSingleton(IExtensionRecommendationsService, ExtensionRecommendationsService, InstantiationType.Eager /* Prompts recommendations in the background */);
-
-// Quick Access
-Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess).registerQuickAccessProvider({
-	ctor: ManageExtensionsQuickAccessProvider,
-	prefix: ManageExtensionsQuickAccessProvider.PREFIX,
-	placeholder: localize('manageExtensionsQuickAccessPlaceholder', "Press Enter to manage extensions."),
-	helpEntries: [{ description: localize('manageExtensionsHelp', "Manage Extensions") }]
-});
-
-// Editor
-Registry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).registerEditorPane(
-	EditorPaneDescriptor.create(
-		ExtensionEditor,
-		ExtensionEditor.ID,
-		localize('extension', "Extension")
-	),
-	[
-		new SyncDescriptor(ExtensionsInput)
-	]);
-
-
-Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer(
-	{
-		id: VIEWLET_ID,
-		title: { value: localize('extensions', "Extensions"), original: 'Extensions' },
-		openCommandActionDescriptor: {
-			id: VIEWLET_ID,
-			mnemonicTitle: localize({ key: 'miViewExtensions', comment: ['&& denotes a mnemonic'] }, "E&&xtensions"),
-			keybindings: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyX },
-			order: 4,
-		},
-		ctorDescriptor: new SyncDescriptor(ExtensionsViewPaneContainer),
-		icon: extensionsViewIcon,
-		order: 4,
-		rejectAddedViews: true,
-		alwaysUseContainerInfo: true,
-	}, ViewContainerLocation.Sidebar);
-
-
-Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)
-	.registerConfiguration({
-		id: 'extensions',
-		order: 30,
-		title: localize('extensionsConfigurationTitle', "Extensions"),
-		type: 'object',
-		properties: {
-			'extensions.autoUpdate': {
-				enum: [true, 'onlyEnabledExtensions', 'onlySelectedExtensions', false,],
-				enumItemLabels: [
-					localize('all', "All Extensions"),
-					localize('enabled', "Only Enabled Extensions"),
-					localize('selected', "Only Selected Extensions"),
-					localize('none', "None"),
-				],
-				enumDescriptions: [
-					localize('extensions.autoUpdate.true', 'Download and install updates automatically for all extensions except for those updates are ignored.'),
-					localize('extensions.autoUpdate.enabled', 'Download and install updates automatically only for enabled extensions except for those updates are ignored. Disabled extensions are not updated automatically.'),
-					localize('extensions.autoUpdate.selected', 'Download and install updates automatically only for selected extensions.'),
-					localize('extensions.autoUpdate.false', 'Extensions are not automatically updated.'),
-				],
-				description: localize('extensions.autoUpdate', "Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service."),
-				default: true,
-				scope: ConfigurationScope.APPLICATION,
-				tags: ['usesOnlineServices']
-			},
-			'extensions.autoCheckUpdates': {
-				type: 'boolean',
-				description: localize('extensionsCheckUpdates', "When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service."),
-				default: true,
-				scope: ConfigurationScope.APPLICATION,
-				tags: ['usesOnlineServices']
-			},
-			'extensions.ignoreRecommendations': {
-				type: 'boolean',
-				description: localize('extensionsIgnoreRecommendations', "When enabled, the notifications for extension recommendations will not be shown."),
-				default: false
-			},
-			'extensions.showRecommendationsOnlyOnDemand': {
-				type: 'boolean',
-				deprecationMessage: localize('extensionsShowRecommendationsOnlyOnDemand_Deprecated', "This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default."),
-				default: false,
-				tags: ['usesOnlineServices']
-			},
-			'extensions.closeExtensionDetailsOnViewChange': {
-				type: 'boolean',
-				description: localize('extensionsCloseExtensionDetailsOnViewChange', "When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View."),
-				default: false
-			},
-			'extensions.confirmedUriHandlerExtensionIds': {
-				type: 'array',
-				items: {
-					type: 'string'
-				},
-				description: localize('handleUriConfirmedExtensions', "When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI."),
-				default: [],
-				scope: ConfigurationScope.APPLICATION
-			},
-			'extensions.webWorker': {
-				type: ['boolean', 'string'],
-				enum: [true, false, 'auto'],
-				enumDescriptions: [
-					localize('extensionsWebWorker.true', "The Web Worker Extension Host will always be launched."),
-					localize('extensionsWebWorker.false', "The Web Worker Extension Host will never be launched."),
-					localize('extensionsWebWorker.auto', "The Web Worker Extension Host will be launched when a web extension needs it."),
-				],
-				description: localize('extensionsWebWorker', "Enable web worker extension host."),
-				default: 'auto'
-			},
-			'extensions.supportVirtualWorkspaces': {
-				type: 'object',
-				markdownDescription: localize('extensions.supportVirtualWorkspaces', "Override the virtual workspaces support of an extension."),
-				patternProperties: {
-					'([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$': {
-						type: 'boolean',
-						default: false
-					}
-				},
-				additionalProperties: false,
-				default: {},
-				defaultSnippets: [{
-					'body': {
-						'pub.name': false
-					}
-				}]
-			},
-			'extensions.experimental.affinity': {
-				type: 'object',
-				markdownDescription: localize('extensions.affinity', "Configure an extension to execute in a different extension host process."),
-				patternProperties: {
-					'([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$': {
-						type: 'integer',
-						default: 1
-					}
-				},
-				additionalProperties: false,
-				default: {},
-				defaultSnippets: [{
-					'body': {
-						'pub.name': 1
-					}
-				}]
-			},
-			[WORKSPACE_TRUST_EXTENSION_SUPPORT]: {
-				type: 'object',
-				scope: ConfigurationScope.APPLICATION,
-				markdownDescription: localize('extensions.supportUntrustedWorkspaces', "Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted."),
-				patternProperties: {
-					'([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$': {
-						type: 'object',
-						properties: {
-							'supported': {
-								type: ['boolean', 'string'],
-								enum: [true, false, 'limited'],
-								enumDescriptions: [
-									localize('extensions.supportUntrustedWorkspaces.true', "Extension will always be enabled."),
-									localize('extensions.supportUntrustedWorkspaces.false', "Extension will only be enabled only when the workspace is trusted."),
-									localize('extensions.supportUntrustedWorkspaces.limited', "Extension will always be enabled, and the extension will hide functionality requiring trust."),
-								],
-								description: localize('extensions.supportUntrustedWorkspaces.supported', "Defines the untrusted workspace support setting for the extension."),
-							},
-							'version': {
-								type: 'string',
-								description: localize('extensions.supportUntrustedWorkspaces.version', "Defines the version of the extension for which the override should be applied. If not specified, the override will be applied independent of the extension version."),
-							}
-						}
-					}
-				}
-			},
-			'extensions.experimental.deferredStartupFinishedActivation': {
-				type: 'boolean',
-				description: localize('extensionsDeferredStartupFinishedActivation', "When enabled, extensions which declare the `onStartupFinished` activation event will be activated after a timeout."),
-				default: false
-			}
-		}
-	});
-
-const jsonRegistry = <jsonContributionRegistry.IJSONContributionRegistry>Registry.as(jsonContributionRegistry.Extensions.JSONContribution);
-jsonRegistry.registerSchema(ExtensionsConfigurationSchemaId, ExtensionsConfigurationSchema);
-
-// Register Commands
-CommandsRegistry.registerCommand('_extensions.manage', (accessor: ServicesAccessor, extensionId: string, tab?: ExtensionEditorTab, preserveFocus?: boolean) => {
-	const extensionService = accessor.get(IExtensionsWorkbenchService);
-	const extension = extensionService.local.find(e => areSameExtensions(e.identifier, { id: extensionId }));
-	if (extension) {
-		extensionService.open(extension, { tab, preserveFocus });
-	} else {
-		throw new Error(localize('notFound', "Extension '{0}' not found.", extensionId));
-	}
-});
-
-CommandsRegistry.registerCommand('extension.open', async (accessor: ServicesAccessor, extensionId: string, tab?: ExtensionEditorTab, preserveFocus?: boolean) => {
-	const extensionService = accessor.get(IExtensionsWorkbenchService);
-	const commandService = accessor.get(ICommandService);
-
-	const [extension] = await extensionService.getExtensions([{ id: extensionId }], CancellationToken.None);
-	if (extension) {
-		return extensionService.open(extension, { tab, preserveFocus });
-	}
-
-	return commandService.executeCommand('_extensions.manage', extensionId, tab, preserveFocus);
-});
-
-CommandsRegistry.registerCommand({
-	id: 'workbench.extensions.installExtension',
-	metadata: {
-		description: localize('workbench.extensions.installExtension.description', "Install the given extension"),
-		args: [
-			{
-				name: 'extensionIdOrVSIXUri',
-				description: localize('workbench.extensions.installExtension.arg.decription', "Extension id or VSIX resource uri"),
-				constraint: (value: any) => typeof value === 'string' || value instanceof URI,
-			},
-			{
-				name: 'options',
-				description: '(optional) Options for installing the extension. Object with the following properties: ' +
-					'`installOnlyNewlyAddedFromExtensionPackVSIX`: When enabled, VS Code installs only newly added extensions from the extension pack VSIX. This option is considered only when installing VSIX. ',
-				isOptional: true,
-				schema: {
-					'type': 'object',
-					'properties': {
-						'installOnlyNewlyAddedFromExtensionPackVSIX': {
-							'type': 'boolean',
-							'description': localize('workbench.extensions.installExtension.option.installOnlyNewlyAddedFromExtensionPackVSIX', "When enabled, VS Code installs only newly added extensions from the extension pack VSIX. This option is considered only while installing a VSIX."),
-							default: false
-						},
-						'installPreReleaseVersion': {
-							'type': 'boolean',
-							'description': localize('workbench.extensions.installExtension.option.installPreReleaseVersion', "When enabled, VS Code installs the pre-release version of the extension if available."),
-							default: false
-						},
-						'donotSync': {
-							'type': 'boolean',
-							'description': localize('workbench.extensions.installExtension.option.donotSync', "When enabled, VS Code do not sync this extension when Settings Sync is on."),
-							default: false
-						},
-						'context': {
-							'type': 'object',
-							'description': localize('workbench.extensions.installExtension.option.context', "Context for the installation. This is a JSON object that can be used to pass any information to the installation handlers. i.e. `{skipWalkthrough: true}` will skip opening the walkthrough upon install."),
-						}
-					}
-				}
-			}
-		]
-	},
-	handler: async (accessor, arg: string | UriComponents, options?: { installOnlyNewlyAddedFromExtensionPackVSIX?: boolean; installPreReleaseVersion?: boolean; donotSync?: boolean; context?: IStringDictionary<any> }) => {
-		const extensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-		const extensionManagementService = accessor.get(IWorkbenchExtensionManagementService);
-		try {
-			if (typeof arg === 'string') {
-				const [id, version] = getIdAndVersion(arg);
-				const [extension] = await extensionsWorkbenchService.getExtensions([{ id, preRelease: options?.installPreReleaseVersion }], CancellationToken.None);
-				if (extension) {
-					const installOptions: InstallOptions = {
-						isMachineScoped: options?.donotSync ? true : undefined, /* do not allow syncing extensions automatically while installing through the command */
-						installPreReleaseVersion: options?.installPreReleaseVersion,
-						installGivenVersion: !!version,
-						context: options?.context
-					};
-					if (extension.gallery && extension.enablementState === EnablementState.DisabledByExtensionKind) {
-						await extensionManagementService.installFromGallery(extension.gallery, installOptions);
-						return;
-					}
-					if (version) {
-						await extensionsWorkbenchService.installVersion(extension, version, installOptions);
-					} else {
-						await extensionsWorkbenchService.install(extension, installOptions);
-					}
-				} else {
-					throw new Error(localize('notFound', "Extension '{0}' not found.", arg));
-				}
-			} else {
-				const vsix = URI.revive(arg);
-				await extensionsWorkbenchService.install(vsix, { installOnlyNewlyAddedFromExtensionPack: options?.installOnlyNewlyAddedFromExtensionPackVSIX });
-			}
-		} catch (e) {
-			onUnexpectedError(e);
-			throw e;
-		}
-	}
-});
-
-CommandsRegistry.registerCommand({
-	id: 'workbench.extensions.uninstallExtension',
-	metadata: {
-		description: localize('workbench.extensions.uninstallExtension.description', "Uninstall the given extension"),
-		args: [
-			{
-				name: localize('workbench.extensions.uninstallExtension.arg.name', "Id of the extension to uninstall"),
-				schema: {
-					'type': 'string'
-				}
-			}
-		]
-	},
-	handler: async (accessor, id: string) => {
-		if (!id) {
-			throw new Error(localize('id required', "Extension id required."));
-		}
-		const extensionManagementService = accessor.get(IExtensionManagementService);
-		const installed = await extensionManagementService.getInstalled();
-		const [extensionToUninstall] = installed.filter(e => areSameExtensions(e.identifier, { id }));
-		if (!extensionToUninstall) {
-			throw new Error(localize('notInstalled', "Extension '{0}' is not installed. Make sure you use the full extension ID, including the publisher, e.g.: ms-dotnettools.csharp.", id));
-		}
-		if (extensionToUninstall.isBuiltin) {
-			throw new Error(localize('builtin', "Extension '{0}' is a Built-in extension and cannot be installed", id));
-		}
-
-		try {
-			await extensionManagementService.uninstall(extensionToUninstall);
-		} catch (e) {
-			onUnexpectedError(e);
-			throw e;
-		}
-	}
-});
-
-CommandsRegistry.registerCommand({
-	id: 'workbench.extensions.search',
-	metadata: {
-		description: localize('workbench.extensions.search.description', "Search for a specific extension"),
-		args: [
-			{
-				name: localize('workbench.extensions.search.arg.name', "Query to use in search"),
-				schema: { 'type': 'string' }
-			}
-		]
-	},
-	handler: async (accessor, query: string = '') => {
-		const paneCompositeService = accessor.get(IPaneCompositePartService);
-		const viewlet = await paneCompositeService.openPaneComposite(VIEWLET_ID, ViewContainerLocation.Sidebar, true);
-
-		if (!viewlet) {
-			return;
-		}
-
-		(viewlet.getViewPaneContainer() as IExtensionsViewPaneContainer).search(query);
-		viewlet.focus();
-	}
-});
-
-function overrideActionForActiveExtensionEditorWebview(command: MultiCommand | undefined, f: (webview: IWebview) => void) {
-	command?.addImplementation(105, 'extensions-editor', (accessor) => {
-		const editorService = accessor.get(IEditorService);
-		const editor = editorService.activeEditorPane;
-		if (editor instanceof ExtensionEditor) {
-			if (editor.activeWebview?.isFocused) {
-				f(editor.activeWebview);
-				return true;
-			}
-		}
-		return false;
-	});
-}
-
-overrideActionForActiveExtensionEditorWebview(CopyAction, webview => webview.copy());
-overrideActionForActiveExtensionEditorWebview(CutAction, webview => webview.cut());
-overrideActionForActiveExtensionEditorWebview(PasteAction, webview => webview.paste());
-
-// Contexts
-export const CONTEXT_HAS_LOCAL_SERVER = new RawContextKey<boolean>('hasLocalServer', false);
-export const CONTEXT_HAS_REMOTE_SERVER = new RawContextKey<boolean>('hasRemoteServer', false);
-export const CONTEXT_HAS_WEB_SERVER = new RawContextKey<boolean>('hasWebServer', false);
-
-async function runAction(action: IAction): Promise<void> {
-	try {
-		await action.run();
-	} finally {
-		if (isDisposable(action)) {
-			action.dispose();
-		}
-	}
-}
-
-type IExtensionActionOptions = IAction2Options & {
-	menuTitles?: { [id: string]: string };
-	run(accessor: ServicesAccessor, ...args: any[]): Promise<any>;
-};
-
-class ExtensionsContributions extends Disposable implements IWorkbenchContribution {
-
-	constructor(
-		@IExtensionManagementServerService private readonly extensionManagementServerService: IExtensionManagementServerService,
-		@IExtensionGalleryService extensionGalleryService: IExtensionGalleryService,
-		@IContextKeyService contextKeyService: IContextKeyService,
-		@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,
-		@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,
-		@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,
-		@IInstantiationService private readonly instantiationService: IInstantiationService,
-		@IDialogService private readonly dialogService: IDialogService,
-		@ICommandService private readonly commandService: ICommandService,
-	) {
-		super();
-		const hasGalleryContext = CONTEXT_HAS_GALLERY.bindTo(contextKeyService);
-		if (extensionGalleryService.isEnabled()) {
-			hasGalleryContext.set(true);
-		}
-
-		const hasLocalServerContext = CONTEXT_HAS_LOCAL_SERVER.bindTo(contextKeyService);
-		if (this.extensionManagementServerService.localExtensionManagementServer) {
-			hasLocalServerContext.set(true);
-		}
-
-		const hasRemoteServerContext = CONTEXT_HAS_REMOTE_SERVER.bindTo(contextKeyService);
-		if (this.extensionManagementServerService.remoteExtensionManagementServer) {
-			hasRemoteServerContext.set(true);
-		}
-
-		const hasWebServerContext = CONTEXT_HAS_WEB_SERVER.bindTo(contextKeyService);
-		if (this.extensionManagementServerService.webExtensionManagementServer) {
-			hasWebServerContext.set(true);
-		}
-
-		this.registerGlobalActions();
-		this.registerContextMenuActions();
-		this.registerQuickAccessProvider();
-	}
-
-	private registerQuickAccessProvider(): void {
-		if (this.extensionManagementServerService.localExtensionManagementServer
-			|| this.extensionManagementServerService.remoteExtensionManagementServer
-			|| this.extensionManagementServerService.webExtensionManagementServer
-		) {
-			Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess).registerQuickAccessProvider({
-				ctor: InstallExtensionQuickAccessProvider,
-				prefix: InstallExtensionQuickAccessProvider.PREFIX,
-				placeholder: localize('installExtensionQuickAccessPlaceholder', "Type the name of an extension to install or search."),
-				helpEntries: [{ description: localize('installExtensionQuickAccessHelp', "Install or Search Extensions") }]
-			});
-		}
-	}
-
-	// Global actions
-	private registerGlobalActions(): void {
-		this._register(MenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {
-			command: {
-				id: VIEWLET_ID,
-				title: localize({ key: 'miPreferencesExtensions', comment: ['&& denotes a mnemonic'] }, "&&Extensions")
-			},
-			group: '2_configuration',
-			order: 3
-		}));
-		this._register(MenuRegistry.appendMenuItem(MenuId.GlobalActivity, {
-			command: {
-				id: VIEWLET_ID,
-				title: localize('showExtensions', "Extensions")
-			},
-			group: '2_configuration',
-			order: 3
-		}));
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.focusExtensionsView',
-			title: { value: localize('focusExtensions', "Focus on Extensions View"), original: 'Focus on Extensions View' },
-			category: ExtensionsLocalizedLabel,
-			f1: true,
-			run: async (accessor: ServicesAccessor) => {
-				await accessor.get(IPaneCompositePartService).openPaneComposite(VIEWLET_ID, ViewContainerLocation.Sidebar, true);
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.installExtensions',
-			title: { value: localize('installExtensions', "Install Extensions"), original: 'Install Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: {
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(CONTEXT_HAS_GALLERY, ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER))
-			},
-			run: async (accessor: ServicesAccessor) => {
-				accessor.get(IViewsService).openViewContainer(VIEWLET_ID, true);
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.showRecommendedKeymapExtensions',
-			title: { value: localize('showRecommendedKeymapExtensionsShort', "Keymaps"), original: 'Keymaps' },
-			category: PreferencesLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: CONTEXT_HAS_GALLERY
-			}, {
-				id: MenuId.EditorTitle,
-				when: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_HAS_GALLERY),
-				group: '2_keyboard_discover_actions'
-			}],
-			menuTitles: {
-				[MenuId.EditorTitle.id]: localize('importKeyboardShortcutsFroms', "Migrate Keyboard Shortcuts from...")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@recommended:keymaps '))
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.showLanguageExtensions',
-			title: { value: localize('showLanguageExtensionsShort', "Language Extensions"), original: 'Language Extensions' },
-			category: PreferencesLocalizedLabel,
-			menu: {
-				id: MenuId.CommandPalette,
-				when: CONTEXT_HAS_GALLERY
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@recommended:languages '))
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.checkForUpdates',
-			title: { value: localize('checkForUpdates', "Check for Extension Updates"), original: 'Check for Extension Updates' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(CONTEXT_HAS_GALLERY, ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER))
-			}, {
-				id: MenuId.ViewContainerTitle,
-				when: ContextKeyExpr.and(ContextKeyExpr.equals('viewContainer', VIEWLET_ID), CONTEXT_HAS_GALLERY),
-				group: '1_updates',
-				order: 1
-			}],
-			run: async () => {
-				await this.extensionsWorkbenchService.checkForUpdates();
-				const outdated = this.extensionsWorkbenchService.outdated;
-				if (outdated.length) {
-					return runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@outdated '));
-				} else {
-					return this.dialogService.info(localize('noUpdatesAvailable', "All extensions are up to date."));
-				}
-			}
-		});
-
-		const autoUpdateExtensionsSubMenu = new MenuId('autoUpdateExtensionsSubMenu');
-		MenuRegistry.appendMenuItem(MenuId.ViewContainerTitle, <ISubmenuItem>{
-			submenu: autoUpdateExtensionsSubMenu,
-			title: localize('configure auto updating extensions', "Auto Update Extensions"),
-			when: ContextKeyExpr.and(ContextKeyExpr.equals('viewContainer', VIEWLET_ID), CONTEXT_HAS_GALLERY),
-			group: '1_updates',
-			order: 5,
-		});
-
-		this.registerExtensionAction({
-			id: 'configureExtensionsAutoUpdate.all',
-			title: localize('configureExtensionsAutoUpdate.all', "All Extensions"),
-			toggled: ContextKeyExpr.and(ContextKeyExpr.has(`config.${AutoUpdateConfigurationKey}`), ContextKeyExpr.notEquals(`config.${AutoUpdateConfigurationKey}`, 'onlyEnabledExtensions'), ContextKeyExpr.notEquals(`config.${AutoUpdateConfigurationKey}`, 'onlySelectedExtensions')),
-			menu: [{
-				id: autoUpdateExtensionsSubMenu,
-				order: 1,
-			}],
-			run: (accessor: ServicesAccessor) => accessor.get(IConfigurationService).updateValue(AutoUpdateConfigurationKey, true)
-		});
-
-		this.registerExtensionAction({
-			id: 'configureExtensionsAutoUpdate.enabled',
-			title: localize('configureExtensionsAutoUpdate.enabled', "Enabled Extensions"),
-			toggled: ContextKeyExpr.equals(`config.${AutoUpdateConfigurationKey}`, 'onlyEnabledExtensions'),
-			menu: [{
-				id: autoUpdateExtensionsSubMenu,
-				order: 2,
-			}],
-			run: (accessor: ServicesAccessor) => accessor.get(IConfigurationService).updateValue(AutoUpdateConfigurationKey, 'onlyEnabledExtensions')
-		});
-
-		this.registerExtensionAction({
-			id: 'configureExtensionsAutoUpdate.selected',
-			title: localize('configureExtensionsAutoUpdate.selected', "Selected Extensions"),
-			toggled: ContextKeyExpr.equals(`config.${AutoUpdateConfigurationKey}`, 'onlySelectedExtensions'),
-			menu: [{
-				id: autoUpdateExtensionsSubMenu,
-				order: 2,
-			}],
-			run: (accessor: ServicesAccessor) => accessor.get(IConfigurationService).updateValue(AutoUpdateConfigurationKey, 'onlySelectedExtensions')
-		});
-
-		this.registerExtensionAction({
-			id: 'configureExtensionsAutoUpdate.none',
-			title: localize('configureExtensionsAutoUpdate.none', "None"),
-			toggled: ContextKeyExpr.equals(`config.${AutoUpdateConfigurationKey}`, false),
-			menu: [{
-				id: autoUpdateExtensionsSubMenu,
-				order: 3,
-			}],
-			run: (accessor: ServicesAccessor) => accessor.get(IConfigurationService).updateValue(AutoUpdateConfigurationKey, false)
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.updateAllExtensions',
-			title: { value: localize('updateAll', "Update All Extensions"), original: 'Update All Extensions' },
-			category: ExtensionsLocalizedLabel,
-			precondition: HasOutdatedExtensionsContext,
-			menu: [
-				{
-					id: MenuId.CommandPalette,
-					when: ContextKeyExpr.and(CONTEXT_HAS_GALLERY, ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER))
-				}, {
-					id: MenuId.ViewContainerTitle,
-					when: ContextKeyExpr.and(ContextKeyExpr.equals('viewContainer', VIEWLET_ID), ContextKeyExpr.or(ContextKeyExpr.has(`config.${AutoUpdateConfigurationKey}`).negate(), ContextKeyExpr.equals(`config.${AutoUpdateConfigurationKey}`, 'onlyEnabledExtensions'))),
-					group: '1_updates',
-					order: 2
-				}, {
-					id: MenuId.ViewTitle,
-					when: ContextKeyExpr.equals('view', OUTDATED_EXTENSIONS_VIEW_ID),
-					group: 'navigation',
-					order: 1
-				}
-			],
-			icon: installWorkspaceRecommendedIcon,
-			run: async () => {
-				const outdated = this.extensionsWorkbenchService.outdated;
-				const results = await this.extensionsWorkbenchService.updateAll();
-				results.forEach((result) => {
-					if (result.error) {
-						const extension: IExtension | undefined = outdated.find((extension) => areSameExtensions(extension.identifier, result.identifier));
-						if (extension) {
-							runAction(this.instantiationService.createInstance(PromptExtensionInstallFailureAction, extension, extension.latestVersion, InstallOperation.Update, result.error));
-						}
-					}
-				});
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.disableAutoUpdate',
-			title: { value: localize('disableAutoUpdate', "Disable Auto Update for All Extensions"), original: 'Disable Auto Update for All Extensions' },
-			category: ExtensionsLocalizedLabel,
-			f1: true,
-			precondition: CONTEXT_HAS_GALLERY,
-			run: (accessor: ServicesAccessor) => accessor.get(IConfigurationService).updateValue(AutoUpdateConfigurationKey, false)
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.enableAutoUpdate',
-			title: { value: localize('enableAutoUpdate', "Enable Auto Update for All Extensions"), original: 'Enable Auto Update for All Extensions' },
-			category: ExtensionsLocalizedLabel,
-			f1: true,
-			precondition: CONTEXT_HAS_GALLERY,
-			run: (accessor: ServicesAccessor) => accessor.get(IConfigurationService).updateValue(AutoUpdateConfigurationKey, true)
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.enableAll',
-			title: { value: localize('enableAll', "Enable All Extensions"), original: 'Enable All Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER)
-			}, {
-				id: MenuId.ViewContainerTitle,
-				when: ContextKeyExpr.equals('viewContainer', VIEWLET_ID),
-				group: '2_enablement',
-				order: 1
-			}],
-			run: async () => {
-				const extensionsToEnable = this.extensionsWorkbenchService.local.filter(e => !!e.local && this.extensionEnablementService.canChangeEnablement(e.local) && !this.extensionEnablementService.isEnabled(e.local));
-				if (extensionsToEnable.length) {
-					await this.extensionsWorkbenchService.setEnablement(extensionsToEnable, EnablementState.EnabledGlobally);
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.enableAllWorkspace',
-			title: { value: localize('enableAllWorkspace', "Enable All Extensions for this Workspace"), original: 'Enable All Extensions for this Workspace' },
-			category: ExtensionsLocalizedLabel,
-			menu: {
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('empty'), ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER))
-			},
-			run: async () => {
-				const extensionsToEnable = this.extensionsWorkbenchService.local.filter(e => !!e.local && this.extensionEnablementService.canChangeEnablement(e.local) && !this.extensionEnablementService.isEnabled(e.local));
-				if (extensionsToEnable.length) {
-					await this.extensionsWorkbenchService.setEnablement(extensionsToEnable, EnablementState.EnabledWorkspace);
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.disableAll',
-			title: { value: localize('disableAll', "Disable All Installed Extensions"), original: 'Disable All Installed Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER)
-			}, {
-				id: MenuId.ViewContainerTitle,
-				when: ContextKeyExpr.equals('viewContainer', VIEWLET_ID),
-				group: '2_enablement',
-				order: 2
-			}],
-			run: async () => {
-				const extensionsToDisable = this.extensionsWorkbenchService.local.filter(e => !e.isBuiltin && !!e.local && this.extensionEnablementService.isEnabled(e.local) && this.extensionEnablementService.canChangeEnablement(e.local));
-				if (extensionsToDisable.length) {
-					await this.extensionsWorkbenchService.setEnablement(extensionsToDisable, EnablementState.DisabledGlobally);
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.disableAllWorkspace',
-			title: { value: localize('disableAllWorkspace', "Disable All Installed Extensions for this Workspace"), original: 'Disable All Installed Extensions for this Workspace' },
-			category: ExtensionsLocalizedLabel,
-			menu: {
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('empty'), ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER))
-			},
-			run: async () => {
-				const extensionsToDisable = this.extensionsWorkbenchService.local.filter(e => !e.isBuiltin && !!e.local && this.extensionEnablementService.isEnabled(e.local) && this.extensionEnablementService.canChangeEnablement(e.local));
-				if (extensionsToDisable.length) {
-					await this.extensionsWorkbenchService.setEnablement(extensionsToDisable, EnablementState.DisabledWorkspace);
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: SELECT_INSTALL_VSIX_EXTENSION_COMMAND_ID,
-			title: { value: localize('InstallFromVSIX', "Install from VSIX..."), original: 'Install from VSIX...' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER)
-			}, {
-				id: MenuId.ViewContainerTitle,
-				when: ContextKeyExpr.and(ContextKeyExpr.equals('viewContainer', VIEWLET_ID), ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER)),
-				group: '3_install',
-				order: 1
-			}],
-			run: async (accessor: ServicesAccessor) => {
-				const fileDialogService = accessor.get(IFileDialogService);
-				const commandService = accessor.get(ICommandService);
-				const vsixPaths = await fileDialogService.showOpenDialog({
-					title: localize('installFromVSIX', "Install from VSIX"),
-					filters: [{ name: 'VSIX Extensions', extensions: ['vsix'] }],
-					canSelectFiles: true,
-					canSelectMany: true,
-					openLabel: mnemonicButtonLabel(localize({ key: 'installButton', comment: ['&& denotes a mnemonic'] }, "&&Install"))
-				});
-				if (vsixPaths) {
-					await commandService.executeCommand(INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID, vsixPaths);
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID,
-			title: localize('installVSIX', "Install Extension VSIX"),
-			menu: [{
-				id: MenuId.ExplorerContext,
-				group: 'extensions',
-				when: ContextKeyExpr.and(ResourceContextKey.Extension.isEqualTo('.vsix'), ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER)),
-			}],
-			run: async (accessor: ServicesAccessor, resources: URI[] | URI) => {
-				const extensionService = accessor.get(IExtensionService);
-				const extensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const hostService = accessor.get(IHostService);
-				const notificationService = accessor.get(INotificationService);
-
-				const extensions = Array.isArray(resources) ? resources : [resources];
-				await Promises.settled(extensions.map(async (vsix) => await extensionsWorkbenchService.install(vsix)))
-					.then(async (extensions) => {
-						for (const extension of extensions) {
-							const requireReload = !(extension.local && extensionService.canAddExtension(toExtensionDescription(extension.local)));
-							const message = requireReload ? localize('InstallVSIXAction.successReload', "Completed installing {0} extension from VSIX. Please reload Visual Studio Code to enable it.", extension.displayName || extension.name)
-								: localize('InstallVSIXAction.success', "Completed installing {0} extension from VSIX.", extension.displayName || extension.name);
-							const actions = requireReload ? [{
-								label: localize('InstallVSIXAction.reloadNow', "Reload Now"),
-								run: () => hostService.reload()
-							}] : [];
-							notificationService.prompt(
-								Severity.Info,
-								message,
-								actions
-							);
-						}
-					});
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.installExtensionFromLocation',
-			title: { value: localize('installExtensionFromLocation', "Install Extension from Location..."), original: 'Install Extension from Location...' },
-			category: Categories.Developer,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.or(CONTEXT_HAS_WEB_SERVER, CONTEXT_HAS_LOCAL_SERVER)
-			}],
-			run: async (accessor: ServicesAccessor) => {
-				const extensionManagementService = accessor.get(IWorkbenchExtensionManagementService);
-				if (isWeb) {
-					const quickInputService = accessor.get(IQuickInputService);
-					const disposables = new DisposableStore();
-					const quickPick = disposables.add(quickInputService.createQuickPick());
-					quickPick.title = localize('installFromLocation', "Install Extension from Location");
-					quickPick.customButton = true;
-					quickPick.customLabel = localize('install button', "Install");
-					quickPick.placeholder = localize('installFromLocationPlaceHolder', "Location of the web extension");
-					quickPick.ignoreFocusOut = true;
-					disposables.add(Event.any(quickPick.onDidAccept, quickPick.onDidCustom)(() => {
-						quickPick.hide();
-						if (quickPick.value) {
-							extensionManagementService.installFromLocation(URI.parse(quickPick.value));
-						}
-					}));
-					disposables.add(quickPick.onDidHide(() => disposables.dispose()));
-					quickPick.show();
-				} else {
-					const fileDialogService = accessor.get(IFileDialogService);
-					const extensionLocation = await fileDialogService.showOpenDialog({
-						canSelectFolders: true,
-						canSelectFiles: false,
-						canSelectMany: false,
-						title: localize('installFromLocation', "Install Extension from Location"),
-					});
-					if (extensionLocation?.[0]) {
-						extensionManagementService.installFromLocation(extensionLocation[0]);
-					}
-				}
-			}
-		});
-
-		const extensionsFilterSubMenu = new MenuId('extensionsFilterSubMenu');
-		MenuRegistry.appendMenuItem(extensionsSearchActionsMenu, <ISubmenuItem>{
-			submenu: extensionsFilterSubMenu,
-			title: localize('filterExtensions', "Filter Extensions..."),
-			group: 'navigation',
-			order: 2,
-			icon: filterIcon,
-		});
-
-		const showFeaturedExtensionsId = 'extensions.filter.featured';
-		this.registerExtensionAction({
-			id: showFeaturedExtensionsId,
-			title: { value: localize('showFeaturedExtensions', "Show Featured Extensions"), original: 'Show Featured Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: CONTEXT_HAS_GALLERY
-			}, {
-				id: extensionsFilterSubMenu,
-				when: CONTEXT_HAS_GALLERY,
-				group: '1_predefined',
-				order: 1,
-			}],
-			menuTitles: {
-				[extensionsFilterSubMenu.id]: localize('featured filter', "Featured")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@featured '))
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.showPopularExtensions',
-			title: { value: localize('showPopularExtensions', "Show Popular Extensions"), original: 'Show Popular Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: CONTEXT_HAS_GALLERY
-			}, {
-				id: extensionsFilterSubMenu,
-				when: CONTEXT_HAS_GALLERY,
-				group: '1_predefined',
-				order: 2,
-			}],
-			menuTitles: {
-				[extensionsFilterSubMenu.id]: localize('most popular filter', "Most Popular")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@popular '))
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.showRecommendedExtensions',
-			title: { value: localize('showRecommendedExtensions', "Show Recommended Extensions"), original: 'Show Recommended Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: CONTEXT_HAS_GALLERY
-			}, {
-				id: extensionsFilterSubMenu,
-				when: CONTEXT_HAS_GALLERY,
-				group: '1_predefined',
-				order: 2,
-			}],
-			menuTitles: {
-				[extensionsFilterSubMenu.id]: localize('most popular recommended', "Recommended")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@recommended '))
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.recentlyPublishedExtensions',
-			title: { value: localize('recentlyPublishedExtensions', "Show Recently Published Extensions"), original: 'Show Recently Published Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: CONTEXT_HAS_GALLERY
-			}, {
-				id: extensionsFilterSubMenu,
-				when: CONTEXT_HAS_GALLERY,
-				group: '1_predefined',
-				order: 2,
-			}],
-			menuTitles: {
-				[extensionsFilterSubMenu.id]: localize('recently published filter', "Recently Published")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@recentlyPublished '))
-		});
-
-		const extensionsCategoryFilterSubMenu = new MenuId('extensionsCategoryFilterSubMenu');
-		MenuRegistry.appendMenuItem(extensionsFilterSubMenu, <ISubmenuItem>{
-			submenu: extensionsCategoryFilterSubMenu,
-			title: localize('filter by category', "Category"),
-			when: CONTEXT_HAS_GALLERY,
-			group: '2_categories',
-			order: 1,
-		});
-
-		EXTENSION_CATEGORIES.map((category, index) => {
-			this.registerExtensionAction({
-				id: `extensions.actions.searchByCategory.${category}`,
-				title: category,
-				menu: [{
-					id: extensionsCategoryFilterSubMenu,
-					when: CONTEXT_HAS_GALLERY,
-					order: index,
-				}],
-				run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, `@category:"${category.toLowerCase()}"`))
-			});
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.listBuiltInExtensions',
-			title: { value: localize('showBuiltInExtensions', "Show Built-in Extensions"), original: 'Show Built-in Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER)
-			}, {
-				id: extensionsFilterSubMenu,
-				group: '3_installed',
-				order: 2,
-			}],
-			menuTitles: {
-				[extensionsFilterSubMenu.id]: localize('builtin filter', "Built-in")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@builtin '))
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.extensionUpdates',
-			title: { value: localize('extensionUpdates', "Show Extension Updates"), original: 'Show Extension Updates' },
-			category: ExtensionsLocalizedLabel,
-			precondition: CONTEXT_HAS_GALLERY,
-			f1: true,
-			menu: [{
-				id: extensionsFilterSubMenu,
-				group: '3_installed',
-				when: CONTEXT_HAS_GALLERY,
-				order: 1,
-			}],
-			menuTitles: {
-				[extensionsFilterSubMenu.id]: localize('extension updates filter', "Updates")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@updates'))
-		});
-
-		this.registerExtensionAction({
-			id: LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID,
-			title: { value: localize('showWorkspaceUnsupportedExtensions', "Show Extensions Unsupported By Workspace"), original: 'Show Extensions Unsupported By Workspace' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER),
-			}, {
-				id: extensionsFilterSubMenu,
-				group: '3_installed',
-				order: 5,
-				when: ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER),
-			}],
-			menuTitles: {
-				[extensionsFilterSubMenu.id]: localize('workspace unsupported filter', "Workspace Unsupported")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@workspaceUnsupported'))
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.showEnabledExtensions',
-			title: { value: localize('showEnabledExtensions', "Show Enabled Extensions"), original: 'Show Enabled Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER)
-			}, {
-				id: extensionsFilterSubMenu,
-				group: '3_installed',
-				order: 3,
-			}],
-			menuTitles: {
-				[extensionsFilterSubMenu.id]: localize('enabled filter', "Enabled")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@enabled '))
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.showDisabledExtensions',
-			title: { value: localize('showDisabledExtensions', "Show Disabled Extensions"), original: 'Show Disabled Extensions' },
-			category: ExtensionsLocalizedLabel,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER)
-			}, {
-				id: extensionsFilterSubMenu,
-				group: '3_installed',
-				order: 4,
-			}],
-			menuTitles: {
-				[extensionsFilterSubMenu.id]: localize('disabled filter', "Disabled")
-			},
-			run: () => runAction(this.instantiationService.createInstance(SearchExtensionsAction, '@disabled '))
-		});
-
-		const extensionsSortSubMenu = new MenuId('extensionsSortSubMenu');
-		MenuRegistry.appendMenuItem(extensionsFilterSubMenu, <ISubmenuItem>{
-			submenu: extensionsSortSubMenu,
-			title: localize('sorty by', "Sort By"),
-			when: ContextKeyExpr.and(ContextKeyExpr.or(CONTEXT_HAS_GALLERY, DefaultViewsContext)),
-			group: '4_sort',
-			order: 1,
-		});
-
-		[
-			{ id: 'installs', title: localize('sort by installs', "Install Count"), precondition: BuiltInExtensionsContext.negate() },
-			{ id: 'rating', title: localize('sort by rating', "Rating"), precondition: BuiltInExtensionsContext.negate() },
-			{ id: 'name', title: localize('sort by name', "Name"), precondition: BuiltInExtensionsContext.negate() },
-			{ id: 'publishedDate', title: localize('sort by published date', "Published Date"), precondition: BuiltInExtensionsContext.negate() },
-			{ id: 'updateDate', title: localize('sort by update date', "Updated Date"), precondition: ContextKeyExpr.and(SearchMarketplaceExtensionsContext.negate(), RecommendedExtensionsContext.negate(), BuiltInExtensionsContext.negate()) },
-		].map(({ id, title, precondition }, index) => {
-			this.registerExtensionAction({
-				id: `extensions.sort.${id}`,
-				title,
-				precondition: precondition,
-				menu: [{
-					id: extensionsSortSubMenu,
-					when: ContextKeyExpr.or(CONTEXT_HAS_GALLERY, DefaultViewsContext),
-					order: index,
-				}],
-				toggled: ExtensionsSortByContext.isEqualTo(id),
-				run: async () => {
-					const viewlet = await this.paneCompositeService.openPaneComposite(VIEWLET_ID, ViewContainerLocation.Sidebar, true);
-					const extensionsViewPaneContainer = viewlet?.getViewPaneContainer() as IExtensionsViewPaneContainer;
-					const currentQuery = Query.parse(extensionsViewPaneContainer.searchValue || '');
-					extensionsViewPaneContainer.search(new Query(currentQuery.value, id, currentQuery.groupBy).toString());
-					extensionsViewPaneContainer.focus();
-				}
-			});
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.clearExtensionsSearchResults',
-			title: { value: localize('clearExtensionsSearchResults', "Clear Extensions Search Results"), original: 'Clear Extensions Search Results' },
-			category: ExtensionsLocalizedLabel,
-			icon: clearSearchResultsIcon,
-			f1: true,
-			precondition: SearchHasTextContext,
-			menu: {
-				id: extensionsSearchActionsMenu,
-				group: 'navigation',
-				order: 1,
-			},
-			run: async (accessor: ServicesAccessor) => {
-				const viewPaneContainer = accessor.get(IViewsService).getActiveViewPaneContainerWithId(VIEWLET_ID);
-				if (viewPaneContainer) {
-					const extensionsViewPaneContainer = viewPaneContainer as IExtensionsViewPaneContainer;
-					extensionsViewPaneContainer.search('');
-					extensionsViewPaneContainer.focus();
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.refreshExtension',
-			title: { value: localize('refreshExtension', "Refresh"), original: 'Refresh' },
-			category: ExtensionsLocalizedLabel,
-			icon: refreshIcon,
-			f1: true,
-			menu: {
-				id: MenuId.ViewContainerTitle,
-				when: ContextKeyExpr.equals('viewContainer', VIEWLET_ID),
-				group: 'navigation',
-				order: 2
-			},
-			run: async (accessor: ServicesAccessor) => {
-				const viewPaneContainer = accessor.get(IViewsService).getActiveViewPaneContainerWithId(VIEWLET_ID);
-				if (viewPaneContainer) {
-					await (viewPaneContainer as IExtensionsViewPaneContainer).refresh();
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.installWorkspaceRecommendedExtensions',
-			title: localize('installWorkspaceRecommendedExtensions', "Install Workspace Recommended Extensions"),
-			icon: installWorkspaceRecommendedIcon,
-			menu: {
-				id: MenuId.ViewTitle,
-				when: ContextKeyExpr.equals('view', WORKSPACE_RECOMMENDATIONS_VIEW_ID),
-				group: 'navigation',
-				order: 1
-			},
-			run: async (accessor: ServicesAccessor) => {
-				const view = accessor.get(IViewsService).getActiveViewWithId(WORKSPACE_RECOMMENDATIONS_VIEW_ID) as IWorkspaceRecommendedExtensionsView;
-				return view.installWorkspaceRecommendations();
-			}
-		});
-
-		this.registerExtensionAction({
-			id: ConfigureWorkspaceFolderRecommendedExtensionsAction.ID,
-			title: ConfigureWorkspaceFolderRecommendedExtensionsAction.LABEL,
-			icon: configureRecommendedIcon,
-			menu: [{
-				id: MenuId.CommandPalette,
-				when: WorkbenchStateContext.notEqualsTo('empty'),
-			}, {
-				id: MenuId.ViewTitle,
-				when: ContextKeyExpr.equals('view', WORKSPACE_RECOMMENDATIONS_VIEW_ID),
-				group: 'navigation',
-				order: 2
-			}],
-			run: () => runAction(this.instantiationService.createInstance(ConfigureWorkspaceFolderRecommendedExtensionsAction, ConfigureWorkspaceFolderRecommendedExtensionsAction.ID, ConfigureWorkspaceFolderRecommendedExtensionsAction.LABEL))
-		});
-
-		this.registerExtensionAction({
-			id: InstallSpecificVersionOfExtensionAction.ID,
-			title: { value: InstallSpecificVersionOfExtensionAction.LABEL, original: 'Install Specific Version of Extension...' },
-			category: ExtensionsLocalizedLabel,
-			menu: {
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(CONTEXT_HAS_GALLERY, ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER))
-			},
-			run: () => runAction(this.instantiationService.createInstance(InstallSpecificVersionOfExtensionAction, InstallSpecificVersionOfExtensionAction.ID, InstallSpecificVersionOfExtensionAction.LABEL))
-		});
-
-		this.registerExtensionAction({
-			id: ReinstallAction.ID,
-			title: { value: ReinstallAction.LABEL, original: 'Reinstall Extension...' },
-			category: Categories.Developer,
-			menu: {
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(CONTEXT_HAS_GALLERY, ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER))
-			},
-			run: () => runAction(this.instantiationService.createInstance(ReinstallAction, ReinstallAction.ID, ReinstallAction.LABEL))
-		});
-	}
-
-	// Extension Context Menu
-	private registerContextMenuActions(): void {
-
-		this.registerExtensionAction({
-			id: SetColorThemeAction.ID,
-			title: SetColorThemeAction.TITLE,
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: THEME_ACTIONS_GROUP,
-				order: 0,
-				when: ContextKeyExpr.and(ContextKeyExpr.not('inExtensionEditor'), ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.has('extensionHasColorThemes'))
-			},
-			run: async (accessor: ServicesAccessor, extensionId: string) => {
-				const extensionWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const instantiationService = accessor.get(IInstantiationService);
-				const extension = extensionWorkbenchService.local.find(e => areSameExtensions(e.identifier, { id: extensionId }));
-				if (extension) {
-					const action = instantiationService.createInstance(SetColorThemeAction);
-					action.extension = extension;
-					return action.run();
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: SetFileIconThemeAction.ID,
-			title: SetFileIconThemeAction.TITLE,
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: THEME_ACTIONS_GROUP,
-				order: 0,
-				when: ContextKeyExpr.and(ContextKeyExpr.not('inExtensionEditor'), ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.has('extensionHasFileIconThemes'))
-			},
-			run: async (accessor: ServicesAccessor, extensionId: string) => {
-				const extensionWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const instantiationService = accessor.get(IInstantiationService);
-				const extension = extensionWorkbenchService.local.find(e => areSameExtensions(e.identifier, { id: extensionId }));
-				if (extension) {
-					const action = instantiationService.createInstance(SetFileIconThemeAction);
-					action.extension = extension;
-					return action.run();
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: SetProductIconThemeAction.ID,
-			title: SetProductIconThemeAction.TITLE,
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: THEME_ACTIONS_GROUP,
-				order: 0,
-				when: ContextKeyExpr.and(ContextKeyExpr.not('inExtensionEditor'), ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.has('extensionHasProductIconThemes'))
-			},
-			run: async (accessor: ServicesAccessor, extensionId: string) => {
-				const extensionWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const instantiationService = accessor.get(IInstantiationService);
-				const extension = extensionWorkbenchService.local.find(e => areSameExtensions(e.identifier, { id: extensionId }));
-				if (extension) {
-					const action = instantiationService.createInstance(SetProductIconThemeAction);
-					action.extension = extension;
-					return action.run();
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.showPreReleaseVersion',
-			title: { value: localize('show pre-release version', "Show Pre-Release Version"), original: 'Show Pre-Release Version' },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: INSTALL_ACTIONS_GROUP,
-				order: 0,
-				when: ContextKeyExpr.and(ContextKeyExpr.has('inExtensionEditor'), ContextKeyExpr.has('extensionHasPreReleaseVersion'), ContextKeyExpr.not('showPreReleaseVersion'), ContextKeyExpr.not('isBuiltinExtension'))
-			},
-			run: async (accessor: ServicesAccessor, extensionId: string) => {
-				const extensionWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const extension = (await extensionWorkbenchService.getExtensions([{ id: extensionId }], CancellationToken.None))[0];
-				extensionWorkbenchService.open(extension, { showPreReleaseVersion: true });
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.showReleasedVersion',
-			title: { value: localize('show released version', "Show Release Version"), original: 'Show Release Version' },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: INSTALL_ACTIONS_GROUP,
-				order: 1,
-				when: ContextKeyExpr.and(ContextKeyExpr.has('inExtensionEditor'), ContextKeyExpr.has('extensionHasPreReleaseVersion'), ContextKeyExpr.has('extensionHasReleaseVersion'), ContextKeyExpr.has('showPreReleaseVersion'), ContextKeyExpr.not('isBuiltinExtension'))
-			},
-			run: async (accessor: ServicesAccessor, extensionId: string) => {
-				const extensionWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const extension = (await extensionWorkbenchService.getExtensions([{ id: extensionId }], CancellationToken.None))[0];
-				extensionWorkbenchService.open(extension, { showPreReleaseVersion: false });
-			}
-		});
-
-		this.registerExtensionAction({
-			id: ToggleAutoUpdateForExtensionAction.ID,
-			title: { value: ToggleAutoUpdateForExtensionAction.LABEL, original: 'Auto Update' },
-			category: ExtensionsLocalizedLabel,
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: UPDATE_ACTIONS_GROUP,
-				order: 1,
-				when: ContextKeyExpr.and(ContextKeyExpr.not('inExtensionEditor'), ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.not('isBuiltinExtension'), ContextKeyExpr.or(ContextKeyExpr.equals(`config.${AutoUpdateConfigurationKey}`, 'onlySelectedExtensions'), ContextKeyExpr.equals(`config.${AutoUpdateConfigurationKey}`, false)),)
-			},
-			run: async (accessor: ServicesAccessor, id: string) => {
-				const instantiationService = accessor.get(IInstantiationService);
-				const extensionWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const extension = extensionWorkbenchService.local.find(e => areSameExtensions(e.identifier, { id }));
-				if (extension) {
-					const action = instantiationService.createInstance(ToggleAutoUpdateForExtensionAction, false, []);
-					action.extension = extension;
-					return action.run();
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: ToggleAutoUpdatesForPublisherAction.ID,
-			title: { value: ToggleAutoUpdatesForPublisherAction.LABEL, original: 'Auto Update (Publisher)' },
-			category: ExtensionsLocalizedLabel,
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: UPDATE_ACTIONS_GROUP,
-				order: 2,
-				when: ContextKeyExpr.and(ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.not('isBuiltinExtension'), ContextKeyExpr.or(ContextKeyExpr.equals(`config.${AutoUpdateConfigurationKey}`, 'onlySelectedExtensions'), ContextKeyExpr.equals(`config.${AutoUpdateConfigurationKey}`, false)),)
-			},
-			run: async (accessor: ServicesAccessor, id: string) => {
-				const instantiationService = accessor.get(IInstantiationService);
-				const extensionWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const extension = extensionWorkbenchService.local.find(e => areSameExtensions(e.identifier, { id }));
-				if (extension) {
-					const action = instantiationService.createInstance(ToggleAutoUpdatesForPublisherAction);
-					action.extension = extension;
-					return action.run();
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: SwitchToPreReleaseVersionAction.ID,
-			title: SwitchToPreReleaseVersionAction.TITLE,
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: INSTALL_ACTIONS_GROUP,
-				order: 2,
-				when: ContextKeyExpr.and(ContextKeyExpr.not('installedExtensionIsPreReleaseVersion'), ContextKeyExpr.not('installedExtensionIsOptedTpPreRelease'), ContextKeyExpr.has('extensionHasPreReleaseVersion'), ContextKeyExpr.not('inExtensionEditor'), ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.not('isBuiltinExtension'))
-			},
-			run: async (accessor: ServicesAccessor, id: string) => {
-				const extensionWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const extension = extensionWorkbenchService.local.find(e => areSameExtensions(e.identifier, { id }));
-				if (extension) {
-					extensionWorkbenchService.open(extension, { showPreReleaseVersion: true });
-					await extensionWorkbenchService.install(extension, { installPreReleaseVersion: true });
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: SwitchToReleasedVersionAction.ID,
-			title: SwitchToReleasedVersionAction.TITLE,
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: INSTALL_ACTIONS_GROUP,
-				order: 3,
-				when: ContextKeyExpr.and(ContextKeyExpr.has('installedExtensionIsPreReleaseVersion'), ContextKeyExpr.has('extensionHasPreReleaseVersion'), ContextKeyExpr.has('extensionHasReleaseVersion'), ContextKeyExpr.not('inExtensionEditor'), ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.not('isBuiltinExtension'))
-			},
-			run: async (accessor: ServicesAccessor, id: string) => {
-				const extensionWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const extension = extensionWorkbenchService.local.find(e => areSameExtensions(e.identifier, { id }));
-				if (extension) {
-					extensionWorkbenchService.open(extension, { showPreReleaseVersion: false });
-					await extensionWorkbenchService.install(extension, { installPreReleaseVersion: false });
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: ClearLanguageAction.ID,
-			title: ClearLanguageAction.TITLE,
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: INSTALL_ACTIONS_GROUP,
-				order: 0,
-				when: ContextKeyExpr.and(ContextKeyExpr.not('inExtensionEditor'), ContextKeyExpr.has('canSetLanguage'), ContextKeyExpr.has('isActiveLanguagePackExtension'))
-			},
-			run: async (accessor: ServicesAccessor, extensionId: string) => {
-				const instantiationService = accessor.get(IInstantiationService);
-				const extensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);
-				const extension = (await extensionsWorkbenchService.getExtensions([{ id: extensionId }], CancellationToken.None))[0];
-				const action = instantiationService.createInstance(ClearLanguageAction);
-				action.extension = extension;
-				return action.run();
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.copyExtension',
-			title: { value: localize('workbench.extensions.action.copyExtension', "Copy"), original: 'Copy' },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '1_copy'
-			},
-			run: async (accessor: ServicesAccessor, extensionId: string) => {
-				const clipboardService = accessor.get(IClipboardService);
-				const extension = this.extensionsWorkbenchService.local.filter(e => areSameExtensions(e.identifier, { id: extensionId }))[0]
-					|| (await this.extensionsWorkbenchService.getExtensions([{ id: extensionId }], CancellationToken.None))[0];
-				if (extension) {
-					const name = localize('extensionInfoName', 'Name: {0}', extension.displayName);
-					const id = localize('extensionInfoId', 'Id: {0}', extensionId);
-					const description = localize('extensionInfoDescription', 'Description: {0}', extension.description);
-					const verision = localize('extensionInfoVersion', 'Version: {0}', extension.version);
-					const publisher = localize('extensionInfoPublisher', 'Publisher: {0}', extension.publisherDisplayName);
-					const link = extension.url ? localize('extensionInfoVSMarketplaceLink', 'VS Marketplace Link: {0}', `${extension.url}`) : null;
-					const clipboardStr = `${name}\n${id}\n${description}\n${verision}\n${publisher}${link ? '\n' + link : ''}`;
-					await clipboardService.writeText(clipboardStr);
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.copyExtensionId',
-			title: { value: localize('workbench.extensions.action.copyExtensionId', "Copy Extension ID"), original: 'Copy Extension ID' },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '1_copy'
-			},
-			run: async (accessor: ServicesAccessor, id: string) => accessor.get(IClipboardService).writeText(id)
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.configure',
-			title: { value: localize('workbench.extensions.action.configure', "Extension Settings"), original: 'Extension Settings' },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '2_configure',
-				when: ContextKeyExpr.and(ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.has('extensionHasConfiguration')),
-				order: 1
-			},
-			run: async (accessor: ServicesAccessor, id: string) => accessor.get(IPreferencesService).openSettings({ jsonEditor: false, query: `@ext:${id}` })
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.configureKeybindings',
-			title: { value: localize('workbench.extensions.action.configureKeybindings', "Extension Keyboard Shortcuts"), original: 'Extension Keyboard Shortcuts' },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '2_configure',
-				when: ContextKeyExpr.and(ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.has('extensionHasKeybindings')),
-				order: 2
-			},
-			run: async (accessor: ServicesAccessor, id: string) => accessor.get(IPreferencesService).openGlobalKeybindingSettings(false, { query: `@ext:${id}` })
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.toggleApplyToAllProfiles',
-			title: { value: localize('workbench.extensions.action.toggleApplyToAllProfiles', "Apply Extension to all Profiles"), original: `Apply Extension to all Profiles` },
-			toggled: ContextKeyExpr.has('isApplicationScopedExtension'),
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '2_configure',
-				when: ContextKeyExpr.and(ContextKeyExpr.equals('extensionStatus', 'installed'), ContextKeyExpr.has('isDefaultApplicationScopedExtension').negate(), ContextKeyExpr.has('isBuiltinExtension').negate()),
-				order: 3
-			},
-			run: async (accessor: ServicesAccessor, id: string) => {
-				const extension = this.extensionsWorkbenchService.local.find(e => areSameExtensions({ id }, e.identifier));
-				if (extension) {
-					return this.extensionsWorkbenchService.toggleApplyExtensionToAllProfiles(extension);
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: TOGGLE_IGNORE_EXTENSION_ACTION_ID,
-			title: { value: localize('workbench.extensions.action.toggleIgnoreExtension', "Sync This Extension"), original: `Sync This Extension` },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '2_configure',
-				when: ContextKeyExpr.and(CONTEXT_SYNC_ENABLEMENT),
-				order: 4
-			},
-			run: async (accessor: ServicesAccessor, id: string) => {
-				const extension = this.extensionsWorkbenchService.local.find(e => areSameExtensions({ id }, e.identifier));
-				if (extension) {
-					return this.extensionsWorkbenchService.toggleExtensionIgnoredToSync(extension);
-				}
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.ignoreRecommendation',
-			title: { value: localize('workbench.extensions.action.ignoreRecommendation', "Ignore Recommendation"), original: `Ignore Recommendation` },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '3_recommendations',
-				when: ContextKeyExpr.has('isExtensionRecommended'),
-				order: 1
-			},
-			run: async (accessor: ServicesAccessor, id: string) => accessor.get(IExtensionIgnoredRecommendationsService).toggleGlobalIgnoredRecommendation(id, true)
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.undoIgnoredRecommendation',
-			title: { value: localize('workbench.extensions.action.undoIgnoredRecommendation', "Undo Ignored Recommendation"), original: `Undo Ignored Recommendation` },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '3_recommendations',
-				when: ContextKeyExpr.has('isUserIgnoredRecommendation'),
-				order: 1
-			},
-			run: async (accessor: ServicesAccessor, id: string) => accessor.get(IExtensionIgnoredRecommendationsService).toggleGlobalIgnoredRecommendation(id, false)
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.addExtensionToWorkspaceRecommendations',
-			title: { value: localize('workbench.extensions.action.addExtensionToWorkspaceRecommendations', "Add to Workspace Recommendations"), original: `Add to Workspace Recommendations` },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '3_recommendations',
-				when: ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('empty'), ContextKeyExpr.has('isBuiltinExtension').negate(), ContextKeyExpr.has('isExtensionWorkspaceRecommended').negate(), ContextKeyExpr.has('isUserIgnoredRecommendation').negate()),
-				order: 2
-			},
-			run: (accessor: ServicesAccessor, id: string) => accessor.get(IWorkspaceExtensionsConfigService).toggleRecommendation(id)
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.removeExtensionFromWorkspaceRecommendations',
-			title: { value: localize('workbench.extensions.action.removeExtensionFromWorkspaceRecommendations', "Remove from Workspace Recommendations"), original: `Remove from Workspace Recommendations` },
-			menu: {
-				id: MenuId.ExtensionContext,
-				group: '3_recommendations',
-				when: ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('empty'), ContextKeyExpr.has('isBuiltinExtension').negate(), ContextKeyExpr.has('isExtensionWorkspaceRecommended')),
-				order: 2
-			},
-			run: (accessor: ServicesAccessor, id: string) => accessor.get(IWorkspaceExtensionsConfigService).toggleRecommendation(id)
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.addToWorkspaceRecommendations',
-			title: { value: localize('workbench.extensions.action.addToWorkspaceRecommendations', "Add Extension to Workspace Recommendations"), original: `Add Extension to Workspace Recommendations` },
-			category: localize('extensions', "Extensions"),
-			menu: {
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(WorkbenchStateContext.isEqualTo('workspace'), ContextKeyExpr.equals('resourceScheme', Schemas.extension)),
-			},
-			async run(accessor: ServicesAccessor): Promise<any> {
-				const editorService = accessor.get(IEditorService);
-				const workspaceExtensionsConfigService = accessor.get(IWorkspaceExtensionsConfigService);
-				if (!(editorService.activeEditor instanceof ExtensionsInput)) {
-					return;
-				}
-				const extensionId = editorService.activeEditor.extension.identifier.id.toLowerCase();
-				const recommendations = await workspaceExtensionsConfigService.getRecommendations();
-				if (recommendations.includes(extensionId)) {
-					return;
-				}
-				await workspaceExtensionsConfigService.toggleRecommendation(extensionId);
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.addToWorkspaceFolderRecommendations',
-			title: { value: localize('workbench.extensions.action.addToWorkspaceFolderRecommendations', "Add Extension to Workspace Folder Recommendations"), original: `Add Extension to Workspace Folder Recommendations` },
-			category: localize('extensions', "Extensions"),
-			menu: {
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(WorkbenchStateContext.isEqualTo('folder'), ContextKeyExpr.equals('resourceScheme', Schemas.extension)),
-			},
-			run: () => this.commandService.executeCommand('workbench.extensions.action.addToWorkspaceRecommendations')
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.addToWorkspaceIgnoredRecommendations',
-			title: { value: localize('workbench.extensions.action.addToWorkspaceIgnoredRecommendations', "Add Extension to Workspace Ignored Recommendations"), original: `Add Extension to Workspace Ignored Recommendations` },
-			category: localize('extensions', "Extensions"),
-			menu: {
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(WorkbenchStateContext.isEqualTo('workspace'), ContextKeyExpr.equals('resourceScheme', Schemas.extension)),
-			},
-			async run(accessor: ServicesAccessor): Promise<any> {
-				const editorService = accessor.get(IEditorService);
-				const workspaceExtensionsConfigService = accessor.get(IWorkspaceExtensionsConfigService);
-				if (!(editorService.activeEditor instanceof ExtensionsInput)) {
-					return;
-				}
-				const extensionId = editorService.activeEditor.extension.identifier.id.toLowerCase();
-				const unwantedRecommendations = await workspaceExtensionsConfigService.getUnwantedRecommendations();
-				if (unwantedRecommendations.includes(extensionId)) {
-					return;
-				}
-				await workspaceExtensionsConfigService.toggleUnwantedRecommendation(extensionId);
-			}
-		});
-
-		this.registerExtensionAction({
-			id: 'workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations',
-			title: { value: localize('workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations', "Add Extension to Workspace Folder Ignored Recommendations"), original: `Add Extension to Workspace Folder Ignored Recommendations` },
-			category: localize('extensions', "Extensions"),
-			menu: {
-				id: MenuId.CommandPalette,
-				when: ContextKeyExpr.and(WorkbenchStateContext.isEqualTo('folder'), ContextKeyExpr.equals('resourceScheme', Schemas.extension)),
-			},
-			run: () => this.commandService.executeCommand('workbench.extensions.action.addToWorkspaceIgnoredRecommendations')
-		});
-
-		this.registerExtensionAction({
-			id: ConfigureWorkspaceRecommendedExtensionsAction.ID,
-			title: { value: ConfigureWorkspaceRecommendedExtensionsAction.LABEL, original: 'Configure Recommended Extensions (Workspace)' },
-			category: localize('extensions', "Extensions"),
-			menu: {
-				id: MenuId.CommandPalette,
-				when: WorkbenchStateContext.isEqualTo('workspace'),
-			},
-			run: () => runAction(this.instantiationService.createInstance(ConfigureWorkspaceRecommendedExtensionsAction, ConfigureWorkspaceRecommendedExtensionsAction.ID, ConfigureWorkspaceRecommendedExtensionsAction.LABEL))
-		});
-
-	}
-
-	private registerExtensionAction(extensionActionOptions: IExtensionActionOptions): IDisposable {
-		const menus = extensionActionOptions.menu ? Array.isArray(extensionActionOptions.menu) ? extensionActionOptions.menu : [extensionActionOptions.menu] : [];
-		let menusWithOutTitles: ({ id: MenuId } & Omit<IMenuItem, 'command'>)[] = [];
-		const menusWithTitles: { id: MenuId; item: IMenuItem }[] = [];
-		if (extensionActionOptions.menuTitles) {
-			for (let index = 0; index < menus.length; index++) {
-				const menu = menus[index];
-				const menuTitle = extensionActionOptions.menuTitles[menu.id.id];
-				if (menuTitle) {
-					menusWithTitles.push({ id: menu.id, item: { ...menu, command: { id: extensionActionOptions.id, title: menuTitle } } });
-				} else {
-					menusWithOutTitles.push(menu);
-				}
-			}
-		} else {
-			menusWithOutTitles = menus;
-		}
-		const disposables = new DisposableStore();
-		disposables.add(registerAction2(class extends Action2 {
-			constructor() {
-				super({
-					...extensionActionOptions,
-					menu: menusWithOutTitles
-				});
-			}
-			run(accessor: ServicesAccessor, ...args: any[]): Promise<any> {
-				return extensionActionOptions.run(accessor, ...args);
-			}
-		}));
-		if (menusWithTitles.length) {
-			disposables.add(MenuRegistry.appendMenuItems(menusWithTitles));
-		}
-		return disposables;
-	}
-
-}
-
-class ExtensionStorageCleaner implements IWorkbenchContribution {
-
-	constructor(
-		@IExtensionManagementService extensionManagementService: IExtensionManagementService,
-		@IStorageService storageService: IStorageService,
-	) {
-		ExtensionStorageService.removeOutdatedExtensionVersions(extensionManagementService, storageService);
-	}
-}
-
-const workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);
-workbenchRegistry.registerWorkbenchContribution(ExtensionsContributions, LifecyclePhase.Restored);
-workbenchRegistry.registerWorkbenchContribution(StatusUpdater, LifecyclePhase.Eventually);
-workbenchRegistry.registerWorkbenchContribution(MaliciousExtensionChecker, LifecyclePhase.Eventually);
-workbenchRegistry.registerWorkbenchContribution(KeymapExtensions, LifecyclePhase.Restored);
-workbenchRegistry.registerWorkbenchContribution(ExtensionsViewletViewsContribution, LifecyclePhase.Restored);
-workbenchRegistry.registerWorkbenchContribution(ExtensionActivationProgress, LifecyclePhase.Eventually);
-workbenchRegistry.registerWorkbenchContribution(ExtensionDependencyChecker, LifecyclePhase.Eventually);
-workbenchRegistry.registerWorkbenchContribution(ExtensionEnablementWorkspaceTrustTransitionParticipant, LifecyclePhase.Restored);
-workbenchRegistry.registerWorkbenchContribution(ExtensionsCompletionItemsProvider, LifecyclePhase.Restored);
-workbenchRegistry.registerWorkbenchContribution(UnsupportedExtensionsMigrationContrib, LifecyclePhase.Eventually);
-workbenchRegistry.registerWorkbenchContribution(DeprecatedExtensionsChecker, LifecyclePhase.Eventually);
-if (isWeb) {
-	workbenchRegistry.registerWorkbenchContribution(ExtensionStorageCleaner, LifecyclePhase.Eventually);
-}
-
-
-// Running Extensions
-registerAction2(ShowRuntimeExtensionsAction);
diff --git a/src/vs/workbench/contrib/scm/browser/scm.contribution.ts b/src/vs/workbench/contrib/scm/browser/scm.contribution.ts
index a927038..84e3f51 100644
--- a/src/vs/workbench/contrib/scm/browser/scm.contribution.ts
+++ b/src/vs/workbench/contrib/scm/browser/scm.contribution.ts
@@ -3,440 +3,12 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { localize, localize2 } from 'vs/nls';
-import { Registry } from 'vs/platform/registry/common/platform';
-import { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';
-import { DirtyDiffWorkbenchController } from './dirtydiffDecorator';
-import { VIEWLET_ID, ISCMService, VIEW_PANE_ID, ISCMProvider, ISCMViewService, REPOSITORIES_VIEW_PANE_ID } from 'vs/workbench/contrib/scm/common/scm';
-import { KeyMod, KeyCode } from 'vs/base/common/keyCodes';
-import { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';
-import { SCMActiveResourceContextKeyController, SCMStatusController } from './activity';
-import { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';
-import { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';
-import { IContextKeyService, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';
-import { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';
-import { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';
+import { ISCMService, ISCMViewService } from 'vs/workbench/contrib/scm/common/scm';
 import { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';
 import { SCMService } from 'vs/workbench/contrib/scm/common/scmService';
-import { IViewContainersRegistry, ViewContainerLocation, Extensions as ViewContainerExtensions, IViewsRegistry } from 'vs/workbench/common/views';
-import { SCMViewPaneContainer } from 'vs/workbench/contrib/scm/browser/scmViewPaneContainer';
-import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
-import { ModesRegistry } from 'vs/editor/common/languages/modesRegistry';
-import { Codicon } from 'vs/base/common/codicons';
-import { registerIcon } from 'vs/platform/theme/common/iconRegistry';
-import { SCMViewPane } from 'vs/workbench/contrib/scm/browser/scmViewPane';
 import { SCMViewService } from 'vs/workbench/contrib/scm/browser/scmViewService';
-import { SCMRepositoriesViewPane } from 'vs/workbench/contrib/scm/browser/scmRepositoriesViewPane';
-import { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
-import { Context as SuggestContext } from 'vs/editor/contrib/suggest/browser/suggest';
-import { MANAGE_TRUST_COMMAND_ID, WorkspaceTrustContext } from 'vs/workbench/contrib/workspace/common/workspace';
 import { IQuickDiffService } from 'vs/workbench/contrib/scm/common/quickDiff';
 import { QuickDiffService } from 'vs/workbench/contrib/scm/common/quickDiffService';
-import { getActiveElement } from 'vs/base/browser/dom';
-
-ModesRegistry.registerLanguage({
-	id: 'scminput',
-	extensions: [],
-	aliases: [], // hide from language selector
-	mimetypes: ['text/x-scm-input']
-});
-
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)
-	.registerWorkbenchContribution(DirtyDiffWorkbenchController, LifecyclePhase.Restored);
-
-const sourceControlViewIcon = registerIcon('source-control-view-icon', Codicon.sourceControl, localize('sourceControlViewIcon', 'View icon of the Source Control view.'));
-
-const viewContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({
-	id: VIEWLET_ID,
-	title: { value: localize('source control', "Source Control"), original: 'Source Control' },
-	ctorDescriptor: new SyncDescriptor(SCMViewPaneContainer),
-	storageId: 'workbench.scm.views.state',
-	icon: sourceControlViewIcon,
-	alwaysUseContainerInfo: true,
-	order: 2,
-	hideIfEmpty: true,
-}, ViewContainerLocation.Sidebar, { doNotRegisterOpenCommand: true });
-
-const viewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);
-
-viewsRegistry.registerViewWelcomeContent(VIEW_PANE_ID, {
-	content: localize('no open repo', "No source control providers registered."),
-	when: 'default'
-});
-
-viewsRegistry.registerViewWelcomeContent(VIEW_PANE_ID, {
-	content: localize('no open repo in an untrusted workspace', "None of the registered source control providers work in Restricted Mode."),
-	when: ContextKeyExpr.and(ContextKeyExpr.equals('scm.providerCount', 0), WorkspaceTrustContext.IsEnabled, WorkspaceTrustContext.IsTrusted.toNegated())
-});
-
-viewsRegistry.registerViewWelcomeContent(VIEW_PANE_ID, {
-	content: `[${localize('manageWorkspaceTrustAction', "Manage Workspace Trust")}](command:${MANAGE_TRUST_COMMAND_ID})`,
-	when: ContextKeyExpr.and(ContextKeyExpr.equals('scm.providerCount', 0), WorkspaceTrustContext.IsEnabled, WorkspaceTrustContext.IsTrusted.toNegated())
-});
-
-viewsRegistry.registerViews([{
-	id: VIEW_PANE_ID,
-	name: localize2('source control', "Source Control"),
-	ctorDescriptor: new SyncDescriptor(SCMViewPane),
-	canToggleVisibility: true,
-	canMoveView: true,
-	weight: 80,
-	order: -999,
-	containerIcon: sourceControlViewIcon,
-	openCommandActionDescriptor: {
-		id: viewContainer.id,
-		mnemonicTitle: localize({ key: 'miViewSCM', comment: ['&& denotes a mnemonic'] }, "Source &&Control"),
-		keybindings: {
-			primary: 0,
-			win: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyG },
-			linux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyG },
-			mac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KeyG },
-		},
-		order: 2,
-	}
-}], viewContainer);
-
-viewsRegistry.registerViews([{
-	id: REPOSITORIES_VIEW_PANE_ID,
-	name: localize2('source control repositories', "Source Control Repositories"),
-	ctorDescriptor: new SyncDescriptor(SCMRepositoriesViewPane),
-	canToggleVisibility: true,
-	hideByDefault: true,
-	canMoveView: true,
-	weight: 20,
-	order: -1000,
-	when: ContextKeyExpr.and(ContextKeyExpr.has('scm.providerCount'), ContextKeyExpr.notEquals('scm.providerCount', 0)),
-	// readonly when = ContextKeyExpr.or(ContextKeyExpr.equals('config.scm.alwaysShowProviders', true), ContextKeyExpr.and(ContextKeyExpr.notEquals('scm.providerCount', 0), ContextKeyExpr.notEquals('scm.providerCount', 1)));
-	containerIcon: sourceControlViewIcon
-}], viewContainer);
-
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)
-	.registerWorkbenchContribution(SCMActiveResourceContextKeyController, LifecyclePhase.Restored);
-
-Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)
-	.registerWorkbenchContribution(SCMStatusController, LifecyclePhase.Restored);
-
-Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({
-	id: 'scm',
-	order: 5,
-	title: localize('scmConfigurationTitle', "Source Control"),
-	type: 'object',
-	scope: ConfigurationScope.RESOURCE,
-	properties: {
-		'scm.diffDecorations': {
-			type: 'string',
-			enum: ['all', 'gutter', 'overview', 'minimap', 'none'],
-			enumDescriptions: [
-				localize('scm.diffDecorations.all', "Show the diff decorations in all available locations."),
-				localize('scm.diffDecorations.gutter', "Show the diff decorations only in the editor gutter."),
-				localize('scm.diffDecorations.overviewRuler', "Show the diff decorations only in the overview ruler."),
-				localize('scm.diffDecorations.minimap', "Show the diff decorations only in the minimap."),
-				localize('scm.diffDecorations.none', "Do not show the diff decorations.")
-			],
-			default: 'all',
-			description: localize('diffDecorations', "Controls diff decorations in the editor.")
-		},
-		'scm.diffDecorationsGutterWidth': {
-			type: 'number',
-			enum: [1, 2, 3, 4, 5],
-			default: 3,
-			description: localize('diffGutterWidth', "Controls the width(px) of diff decorations in gutter (added & modified).")
-		},
-		'scm.diffDecorationsGutterVisibility': {
-			type: 'string',
-			enum: ['always', 'hover'],
-			enumDescriptions: [
-				localize('scm.diffDecorationsGutterVisibility.always', "Show the diff decorator in the gutter at all times."),
-				localize('scm.diffDecorationsGutterVisibility.hover', "Show the diff decorator in the gutter only on hover.")
-			],
-			description: localize('scm.diffDecorationsGutterVisibility', "Controls the visibility of the Source Control diff decorator in the gutter."),
-			default: 'always'
-		},
-		'scm.diffDecorationsGutterAction': {
-			type: 'string',
-			enum: ['diff', 'none'],
-			enumDescriptions: [
-				localize('scm.diffDecorationsGutterAction.diff', "Show the inline diff Peek view on click."),
-				localize('scm.diffDecorationsGutterAction.none', "Do nothing.")
-			],
-			description: localize('scm.diffDecorationsGutterAction', "Controls the behavior of Source Control diff gutter decorations."),
-			default: 'diff'
-		},
-		'scm.diffDecorationsGutterPattern': {
-			type: 'object',
-			description: localize('diffGutterPattern', "Controls whether a pattern is used for the diff decorations in gutter."),
-			additionalProperties: false,
-			properties: {
-				'added': {
-					type: 'boolean',
-					description: localize('diffGutterPatternAdded', "Use pattern for the diff decorations in gutter for added lines."),
-				},
-				'modified': {
-					type: 'boolean',
-					description: localize('diffGutterPatternModifed', "Use pattern for the diff decorations in gutter for modified lines."),
-				},
-			},
-			default: {
-				'added': false,
-				'modified': true
-			}
-		},
-		'scm.diffDecorationsIgnoreTrimWhitespace': {
-			type: 'string',
-			enum: ['true', 'false', 'inherit'],
-			enumDescriptions: [
-				localize('scm.diffDecorationsIgnoreTrimWhitespace.true', "Ignore leading and trailing whitespace."),
-				localize('scm.diffDecorationsIgnoreTrimWhitespace.false', "Do not ignore leading and trailing whitespace."),
-				localize('scm.diffDecorationsIgnoreTrimWhitespace.inherit', "Inherit from `diffEditor.ignoreTrimWhitespace`.")
-			],
-			description: localize('diffDecorationsIgnoreTrimWhitespace', "Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations."),
-			default: 'false'
-		},
-		'scm.alwaysShowActions': {
-			type: 'boolean',
-			description: localize('alwaysShowActions', "Controls whether inline actions are always visible in the Source Control view."),
-			default: false
-		},
-		'scm.countBadge': {
-			type: 'string',
-			enum: ['all', 'focused', 'off'],
-			enumDescriptions: [
-				localize('scm.countBadge.all', "Show the sum of all Source Control Provider count badges."),
-				localize('scm.countBadge.focused', "Show the count badge of the focused Source Control Provider."),
-				localize('scm.countBadge.off', "Disable the Source Control count badge.")
-			],
-			description: localize('scm.countBadge', "Controls the count badge on the Source Control icon on the Activity Bar."),
-			default: 'all'
-		},
-		'scm.providerCountBadge': {
-			type: 'string',
-			enum: ['hidden', 'auto', 'visible'],
-			enumDescriptions: [
-				localize('scm.providerCountBadge.hidden', "Hide Source Control Provider count badges."),
-				localize('scm.providerCountBadge.auto', "Only show count badge for Source Control Provider when non-zero."),
-				localize('scm.providerCountBadge.visible', "Show Source Control Provider count badges.")
-			],
-			markdownDescription: localize('scm.providerCountBadge', "Controls the count badges on Source Control Provider headers. These headers appear in the Source Control view when there is more than one provider or when the {0} setting is enabled, and in the Source Control Repositories view.", '\`#scm.alwaysShowRepositories#\`'),
-			default: 'hidden'
-		},
-		'scm.defaultViewMode': {
-			type: 'string',
-			enum: ['tree', 'list'],
-			enumDescriptions: [
-				localize('scm.defaultViewMode.tree', "Show the repository changes as a tree."),
-				localize('scm.defaultViewMode.list', "Show the repository changes as a list.")
-			],
-			description: localize('scm.defaultViewMode', "Controls the default Source Control repository view mode."),
-			default: 'list'
-		},
-		'scm.defaultViewSortKey': {
-			type: 'string',
-			enum: ['name', 'path', 'status'],
-			enumDescriptions: [
-				localize('scm.defaultViewSortKey.name', "Sort the repository changes by file name."),
-				localize('scm.defaultViewSortKey.path', "Sort the repository changes by path."),
-				localize('scm.defaultViewSortKey.status', "Sort the repository changes by Source Control status.")
-			],
-			description: localize('scm.defaultViewSortKey', "Controls the default Source Control repository changes sort order when viewed as a list."),
-			default: 'path'
-		},
-		'scm.autoReveal': {
-			type: 'boolean',
-			description: localize('autoReveal', "Controls whether the Source Control view should automatically reveal and select files when opening them."),
-			default: true
-		},
-		'scm.inputFontFamily': {
-			type: 'string',
-			markdownDescription: localize('inputFontFamily', "Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `#editor.fontFamily#`'s value, or a custom font family."),
-			default: 'default'
-		},
-		'scm.inputFontSize': {
-			type: 'number',
-			markdownDescription: localize('inputFontSize', "Controls the font size for the input message in pixels."),
-			default: 13
-		},
-		'scm.inputMaxLines': {
-			type: 'number',
-			markdownDescription: localize('inputMaxLines', "Controls the maximum number of lines that the input will auto-grow to."),
-			minimum: 1,
-			maximum: 50,
-			default: 10
-		},
-		'scm.alwaysShowRepositories': {
-			type: 'boolean',
-			markdownDescription: localize('alwaysShowRepository', "Controls whether repositories should always be visible in the Source Control view."),
-			default: false
-		},
-		'scm.repositories.sortOrder': {
-			type: 'string',
-			enum: ['discovery time', 'name', 'path'],
-			enumDescriptions: [
-				localize('scm.repositoriesSortOrder.discoveryTime', "Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected."),
-				localize('scm.repositoriesSortOrder.name', "Repositories in the Source Control Repositories and Source Control views are sorted by repository name."),
-				localize('scm.repositoriesSortOrder.path', "Repositories in the Source Control Repositories and Source Control views are sorted by repository path.")
-			],
-			description: localize('repositoriesSortOrder', "Controls the sort order of the repositories in the source control repositories view."),
-			default: 'discovery time'
-		},
-		'scm.repositories.visible': {
-			type: 'number',
-			description: localize('providersVisible', "Controls how many repositories are visible in the Source Control Repositories section. Set to 0, to be able to manually resize the view."),
-			default: 10
-		},
-		'scm.showActionButton': {
-			type: 'boolean',
-			markdownDescription: localize('showActionButton', "Controls whether an action button can be shown in the Source Control view."),
-			default: true
-		},
-		'scm.showInputActionButton': {
-			type: 'boolean',
-			markdownDescription: localize('showInputActionButton', "Controls whether an action button can be shown in the Source Control input."),
-			default: true
-		},
-		'scm.showIncomingChanges': {
-			type: 'string',
-			enum: ['always', 'never', 'auto'],
-			enumDescriptions: [
-				localize('scm.showIncomingChanges.always', "Always show incoming changes in the Source Control view."),
-				localize('scm.showIncomingChanges.never', "Never show incoming changes in the Source Control view."),
-				localize('scm.showIncomingChanges.auto', "Only show incoming changes in the Source Control view when any exist."),
-			],
-			description: localize('scm.showIncomingChanges', "Controls whether incoming changes are shown in the Source Control view."),
-			default: 'auto'
-		},
-		'scm.showOutgoingChanges': {
-			type: 'string',
-			enum: ['always', 'never', 'auto'],
-			enumDescriptions: [
-				localize('scm.showOutgoingChanges.always', "Always show outgoing changes in the Source Control view."),
-				localize('scm.showOutgoingChanges.never', "Never show outgoing changes in the Source Control view."),
-				localize('scm.showOutgoingChanges.auto', "Only show outgoing changes in the Source Control view when any exist."),
-			],
-			description: localize('scm.showOutgoingChanges', "Controls whether outgoing changes are shown in the Source Control view."),
-			default: 'auto'
-		}
-	}
-});
-
-KeybindingsRegistry.registerCommandAndKeybindingRule({
-	id: 'scm.acceptInput',
-	metadata: { description: localize('scm accept', "Source Control: Accept Input"), args: [] },
-	weight: KeybindingWeight.WorkbenchContrib,
-	when: ContextKeyExpr.has('scmRepository'),
-	primary: KeyMod.CtrlCmd | KeyCode.Enter,
-	handler: accessor => {
-		const contextKeyService = accessor.get(IContextKeyService);
-		const context = contextKeyService.getContext(getActiveElement());
-		const repositoryId = context.getValue<string | undefined>('scmRepository');
-
-		if (!repositoryId) {
-			return Promise.resolve(null);
-		}
-
-		const scmService = accessor.get(ISCMService);
-		const repository = scmService.getRepository(repositoryId);
-
-		if (!repository?.provider.acceptInputCommand) {
-			return Promise.resolve(null);
-		}
-
-		const id = repository.provider.acceptInputCommand.id;
-		const args = repository.provider.acceptInputCommand.arguments;
-		const commandService = accessor.get(ICommandService);
-
-		return commandService.executeCommand(id, ...(args || []));
-	}
-});
-
-const viewNextCommitCommand = {
-	description: { description: localize('scm view next commit', "Source Control: View Next Commit"), args: [] },
-	weight: KeybindingWeight.WorkbenchContrib,
-	handler: (accessor: ServicesAccessor) => {
-		const contextKeyService = accessor.get(IContextKeyService);
-		const scmService = accessor.get(ISCMService);
-		const context = contextKeyService.getContext(getActiveElement());
-		const repositoryId = context.getValue<string | undefined>('scmRepository');
-		const repository = repositoryId ? scmService.getRepository(repositoryId) : undefined;
-		repository?.input.showNextHistoryValue();
-	}
-};
-
-const viewPreviousCommitCommand = {
-	description: { description: localize('scm view previous commit', "Source Control: View Previous Commit"), args: [] },
-	weight: KeybindingWeight.WorkbenchContrib,
-	handler: (accessor: ServicesAccessor) => {
-		const contextKeyService = accessor.get(IContextKeyService);
-		const scmService = accessor.get(ISCMService);
-		const context = contextKeyService.getContext(getActiveElement());
-		const repositoryId = context.getValue<string | undefined>('scmRepository');
-		const repository = repositoryId ? scmService.getRepository(repositoryId) : undefined;
-		repository?.input.showPreviousHistoryValue();
-	}
-};
-
-KeybindingsRegistry.registerCommandAndKeybindingRule({
-	...viewNextCommitCommand,
-	id: 'scm.viewNextCommit',
-	when: ContextKeyExpr.and(ContextKeyExpr.has('scmRepository'), ContextKeyExpr.has('scmInputIsInLastPosition'), SuggestContext.Visible.toNegated()),
-	primary: KeyCode.DownArrow
-});
-
-KeybindingsRegistry.registerCommandAndKeybindingRule({
-	...viewPreviousCommitCommand,
-	id: 'scm.viewPreviousCommit',
-	when: ContextKeyExpr.and(ContextKeyExpr.has('scmRepository'), ContextKeyExpr.has('scmInputIsInFirstPosition'), SuggestContext.Visible.toNegated()),
-	primary: KeyCode.UpArrow
-});
-
-KeybindingsRegistry.registerCommandAndKeybindingRule({
-	...viewNextCommitCommand,
-	id: 'scm.forceViewNextCommit',
-	when: ContextKeyExpr.has('scmRepository'),
-	primary: KeyMod.Alt | KeyCode.DownArrow
-});
-
-KeybindingsRegistry.registerCommandAndKeybindingRule({
-	...viewPreviousCommitCommand,
-	id: 'scm.forceViewPreviousCommit',
-	when: ContextKeyExpr.has('scmRepository'),
-	primary: KeyMod.Alt | KeyCode.UpArrow
-});
-
-CommandsRegistry.registerCommand('scm.openInIntegratedTerminal', async (accessor, provider: ISCMProvider) => {
-	if (!provider || !provider.rootUri) {
-		return;
-	}
-
-	const commandService = accessor.get(ICommandService);
-	await commandService.executeCommand('openInIntegratedTerminal', provider.rootUri);
-});
-
-CommandsRegistry.registerCommand('scm.openInTerminal', async (accessor, provider: ISCMProvider) => {
-	if (!provider || !provider.rootUri) {
-		return;
-	}
-
-	const commandService = accessor.get(ICommandService);
-	await commandService.executeCommand('openInTerminal', provider.rootUri);
-});
-
-MenuRegistry.appendMenuItem(MenuId.SCMSourceControl, {
-	group: '100_end',
-	command: {
-		id: 'scm.openInTerminal',
-		title: localize('open in external terminal', "Open in External Terminal")
-	},
-	when: ContextKeyExpr.and(ContextKeyExpr.equals('scmProviderHasRootUri', true), ContextKeyExpr.or(ContextKeyExpr.equals('config.terminal.sourceControlRepositoriesKind', 'external'), ContextKeyExpr.equals('config.terminal.sourceControlRepositoriesKind', 'both')))
-});
-
-MenuRegistry.appendMenuItem(MenuId.SCMSourceControl, {
-	group: '100_end',
-	command: {
-		id: 'scm.openInIntegratedTerminal',
-		title: localize('open in integrated terminal', "Open in Integrated Terminal")
-	},
-	when: ContextKeyExpr.and(ContextKeyExpr.equals('scmProviderHasRootUri', true), ContextKeyExpr.or(ContextKeyExpr.equals('config.terminal.sourceControlRepositoriesKind', 'integrated'), ContextKeyExpr.equals('config.terminal.sourceControlRepositoriesKind', 'both')))
-});
 
 registerSingleton(ISCMService, SCMService, InstantiationType.Delayed);
 registerSingleton(ISCMViewService, SCMViewService, InstantiationType.Delayed);
diff --git a/src/vs/workbench/workbench.common.main.ts b/src/vs/workbench/workbench.common.main.ts
index 30c9f21..39c04b3 100644
--- a/src/vs/workbench/workbench.common.main.ts
+++ b/src/vs/workbench/workbench.common.main.ts
@@ -161,9 +161,6 @@ registerSingleton(IOpenerService, OpenerService, InstantiationType.Delayed);
 
 //#region --- workbench contributions
 
-// Telemetry
-import 'vs/workbench/contrib/telemetry/browser/telemetry.contribution';
-
 // Preferences
 import 'vs/workbench/contrib/preferences/browser/preferences.contribution';
 import 'vs/workbench/contrib/preferences/browser/keybindingsEditorContribution';
@@ -221,11 +218,6 @@ import 'vs/workbench/contrib/scm/browser/scm.contribution';
 
 // Debug
 import 'vs/workbench/contrib/debug/browser/debug.contribution';
-import 'vs/workbench/contrib/debug/browser/debugEditorContribution';
-import 'vs/workbench/contrib/debug/browser/breakpointEditorContribution';
-import 'vs/workbench/contrib/debug/browser/callStackEditorContribution';
-import 'vs/workbench/contrib/debug/browser/repl';
-import 'vs/workbench/contrib/debug/browser/debugViewlet';
 
 // Markers
 import 'vs/workbench/contrib/markers/browser/markers.contribution';
@@ -259,7 +251,6 @@ import 'vs/workbench/contrib/externalUriOpener/common/externalUriOpener.contribu
 
 // Extensions Management
 import 'vs/workbench/contrib/extensions/browser/extensions.contribution';
-import 'vs/workbench/contrib/extensions/browser/extensionsViewlet';
 
 // Output View
 import 'vs/workbench/contrib/output/common/outputChannelModelService';
-- 
2.39.3 (Apple Git-145)

