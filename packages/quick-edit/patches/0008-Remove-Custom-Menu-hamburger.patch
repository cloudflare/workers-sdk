From 5696bfbc875536f679c172a957ce076c226ff241 Mon Sep 17 00:00:00 2001
From: Jacob M-G Evans <jacobmgevans@gmail.com>
Date: Fri, 31 Mar 2023 17:07:44 -0500
Subject: [PATCH 08/13] Remove 'Custom' Menu (hamburger)

---
 .../parts/activitybar/activitybarPart.ts      |   6 +-
 .../browser/parts/titlebar/menubarControl.ts  | 196 +++++++++---------
 .../browser/parts/titlebar/titlebarPart.ts    |   6 +-
 3 files changed, 104 insertions(+), 104 deletions(-)

diff --git a/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts b/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts
index 4c0dcce..aa36a9f 100644
--- a/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts
+++ b/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts
@@ -423,9 +423,9 @@ export class ActivitybarPart extends Part implements IPaneCompositeSelectorPart
 	}
 
 	private installMenubar() {
-		if (this.menuBar) {
-			return; // prevent menu bar from installing twice #110720
-		}
+		// if (this.menuBar) {
+		return; // prevent menu bar from installing twice #110720
+		// }
 
 		this.menuBarContainer = document.createElement('div');
 		this.menuBarContainer.classList.add('menubar');
diff --git a/src/vs/workbench/browser/parts/titlebar/menubarControl.ts b/src/vs/workbench/browser/parts/titlebar/menubarControl.ts
index 013cf24..457a711 100644
--- a/src/vs/workbench/browser/parts/titlebar/menubarControl.ts
+++ b/src/vs/workbench/browser/parts/titlebar/menubarControl.ts
@@ -135,14 +135,14 @@ export abstract class MenubarControl extends Disposable {
 		'window.nativeTabs'
 	];
 
-	protected mainMenu: IMenu;
+	// protected mainMenu: IMenu;
 	protected menus: {
 		[index: string]: IMenu | undefined;
 	} = {};
 
 	protected topLevelTitles: { [menu: string]: string } = {};
 
-	protected mainMenuDisposables: DisposableStore;
+	// protected mainMenuDisposables: DisposableStore;
 
 	protected recentlyOpened: IRecentlyOpened = { files: [], workspaces: [] };
 
@@ -169,14 +169,14 @@ export abstract class MenubarControl extends Disposable {
 
 		super();
 
-		this.mainMenu = this._register(this.menuService.createMenu(MenuId.MenubarMainMenu, this.contextKeyService));
-		this.mainMenuDisposables = this._register(new DisposableStore());
+		// this.mainMenu = this._register(this.menuService.createMenu(MenuId.MenubarMainMenu, this.contextKeyService));
+		// this.mainMenuDisposables = this._register(new DisposableStore());
 
-		this.setupMainMenu();
+		// this.setupMainMenu();
 
 		this.menuUpdater = this._register(new RunOnceScheduler(() => this.doUpdateMenubar(false), 200));
 
-		this.notifyUserOfCustomMenubarAccessibility();
+		// this.notifyUserOfCustomMenubarAccessibility();
 	}
 
 	protected abstract doUpdateMenubar(firstTime: boolean): void;
@@ -201,22 +201,22 @@ export abstract class MenubarControl extends Disposable {
 		this._register(this.labelService.onDidChangeFormatters(() => { this.onDidChangeRecentlyOpened(); }));
 
 		// Listen for changes on the main menu
-		this._register(this.mainMenu.onDidChange(() => { this.setupMainMenu(); this.doUpdateMenubar(true); }));
+		// this._register(this.mainMenu.onDidChange(() => { this.setupMainMenu(); this.doUpdateMenubar(true); }));
 	}
 
-	protected setupMainMenu(): void {
-		this.mainMenuDisposables.clear();
-		this.menus = {};
-		this.topLevelTitles = {};
+	// protected setupMainMenu(): void {
+	// 	this.mainMenuDisposables.clear();
+	// 	this.menus = {};
+	// 	this.topLevelTitles = {};
 
-		const [, mainMenuActions] = this.mainMenu.getActions()[0];
-		for (const mainMenuAction of mainMenuActions) {
-			if (mainMenuAction instanceof SubmenuItemAction && typeof mainMenuAction.item.title !== 'string') {
-				this.menus[mainMenuAction.item.title.original] = this.mainMenuDisposables.add(this.menuService.createMenu(mainMenuAction.item.submenu, this.contextKeyService, { emitEventsForSubmenuChanges: true }));
-				this.topLevelTitles[mainMenuAction.item.title.original] = mainMenuAction.item.title.mnemonicTitle ?? mainMenuAction.item.title.value;
-			}
-		}
-	}
+	// 	const [, mainMenuActions] = this.mainMenu.getActions()[0];
+	// 	for (const mainMenuAction of mainMenuActions) {
+	// 		if (mainMenuAction instanceof SubmenuItemAction && typeof mainMenuAction.item.title !== 'string') {
+	// 			this.menus[mainMenuAction.item.title.original] = this.mainMenuDisposables.add(this.menuService.createMenu(mainMenuAction.item.submenu, this.contextKeyService, { emitEventsForSubmenuChanges: true }));
+	// 			this.topLevelTitles[mainMenuAction.item.title.original] = mainMenuAction.item.title.mnemonicTitle ?? mainMenuAction.item.title.value;
+	// 		}
+	// 	}
+	// }
 
 	protected updateMenubar(): void {
 		this.menuUpdater.schedule();
@@ -280,9 +280,9 @@ export abstract class MenubarControl extends Disposable {
 			this.updateMenubar();
 		}
 
-		if (event.affectsConfiguration('editor.accessibilitySupport')) {
-			this.notifyUserOfCustomMenubarAccessibility();
-		}
+		// if (event.affectsConfiguration('editor.accessibilitySupport')) {
+		// 	this.notifyUserOfCustomMenubarAccessibility();
+		// }
 
 		// Since we try not update when hidden, we should
 		// try to update the recently opened list on visibility changes
@@ -291,19 +291,19 @@ export abstract class MenubarControl extends Disposable {
 		}
 	}
 
-	private get menubarHidden(): boolean {
-		return isMacintosh && isNative ? false : getMenuBarVisibility(this.configurationService) === 'hidden';
-	}
+	// private get menubarHidden(): boolean {
+	// 	return isMacintosh && isNative ? false : getMenuBarVisibility(this.configurationService) === 'hidden';
+	// }
 
 	protected onDidChangeRecentlyOpened(): void {
 
 		// Do not update recently opened when the menubar is hidden #108712
-		if (!this.menubarHidden) {
-			this.workspacesService.getRecentlyOpened().then(recentlyOpened => {
-				this.recentlyOpened = recentlyOpened;
-				this.updateMenubar();
-			});
-		}
+		// if (!this.menubarHidden) {
+		// 	this.workspacesService.getRecentlyOpened().then(recentlyOpened => {
+		// 		this.recentlyOpened = recentlyOpened;
+		// 		this.updateMenubar();
+		// 	});
+		// }
 	}
 
 	private createOpenRecentMenuAction(recent: IRecent): IOpenRecentAction {
@@ -344,30 +344,30 @@ export abstract class MenubarControl extends Disposable {
 		return Object.assign(ret, { uri, remoteAuthority });
 	}
 
-	private notifyUserOfCustomMenubarAccessibility(): void {
-		if (isWeb || isMacintosh) {
-			return;
-		}
+	// private notifyUserOfCustomMenubarAccessibility(): void {
+	// 	if (isWeb || isMacintosh) {
+	// 		return;
+	// 	}
 
-		const hasBeenNotified = this.storageService.getBoolean('menubar/accessibleMenubarNotified', StorageScope.APPLICATION, false);
-		const usingCustomMenubar = getTitleBarStyle(this.configurationService) === 'custom';
+	// 	const hasBeenNotified = this.storageService.getBoolean('menubar/accessibleMenubarNotified', StorageScope.APPLICATION, false);
+	// 	const usingCustomMenubar = getTitleBarStyle(this.configurationService) === 'custom';
 
-		if (hasBeenNotified || usingCustomMenubar || !this.accessibilityService.isScreenReaderOptimized()) {
-			return;
-		}
+	// 	if (hasBeenNotified || usingCustomMenubar || !this.accessibilityService.isScreenReaderOptimized()) {
+	// 		return;
+	// 	}
 
-		const message = localize('menubar.customTitlebarAccessibilityNotification', "Accessibility support is enabled for you. For the most accessible experience, we recommend the custom title bar style.");
-		this.notificationService.prompt(Severity.Info, message, [
-			{
-				label: localize('goToSetting', "Open Settings"),
-				run: () => {
-					return this.preferencesService.openUserSettings({ query: 'window.titleBarStyle' });
-				}
-			}
-		]);
+	// 	const message = localize('menubar.customTitlebarAccessibilityNotification', "Accessibility support is enabled for you. For the most accessible experience, we recommend the custom title bar style.");
+	// 	this.notificationService.prompt(Severity.Info, message, [
+	// 		{
+	// 			label: localize('goToSetting', "Open Settings"),
+	// 			run: () => {
+	// 				return this.preferencesService.openUserSettings({ query: 'window.titleBarStyle' });
+	// 			}
+	// 		}
+	// 	]);
 
-		this.storageService.store('menubar/accessibleMenubarNotified', true, StorageScope.APPLICATION, StorageTarget.USER);
-	}
+	// 	this.storageService.store('menubar/accessibleMenubarNotified', true, StorageScope.APPLICATION, StorageTarget.USER);
+	// }
 }
 
 export class CustomMenubarControl extends MenubarControl {
@@ -561,57 +561,57 @@ export class CustomMenubarControl extends MenubarControl {
 	private reinstallDisposables = this._register(new DisposableStore());
 	private setupCustomMenubar(firstTime: boolean): void {
 		// If there is no container, we cannot setup the menubar
-		if (!this.container) {
-			return;
-		}
+		// if (!this.container) {
+		return;
+		// }
 
-		// if (firstTime) {
-		// 	// Reset and create new menubar
-		// 	if (this.menubar) {
-		// 		this.reinstallDisposables.clear();
-		// 	}
+		if (firstTime) {
+			// Reset and create new menubar
+			if (this.menubar) {
+				this.reinstallDisposables.clear();
+			}
 
-		// 	this.menubar = this.reinstallDisposables.add(new MenuBar(this.container, this.getMenuBarOptions(), defaultMenuStyles));
+			this.menubar = this.reinstallDisposables.add(new MenuBar(this.container, this.getMenuBarOptions(), defaultMenuStyles));
 
-		// 	this.accessibilityService.alwaysUnderlineAccessKeys().then(val => {
-		// 		this.alwaysOnMnemonics = val;
-		// 		this.menubar?.update(this.getMenuBarOptions());
-		// 	});
+			this.accessibilityService.alwaysUnderlineAccessKeys().then(val => {
+				this.alwaysOnMnemonics = val;
+				this.menubar?.update(this.getMenuBarOptions());
+			});
 
-		// 	this.reinstallDisposables.add(this.menubar.onFocusStateChange(focused => {
-		// 		this._onFocusStateChange.fire(focused);
-
-		// 		// When the menubar loses focus, update it to clear any pending updates
-		// 		if (!focused) {
-		// 			if (this.pendingFirstTimeUpdate) {
-		// 				this.setupCustomMenubar(true);
-		// 				this.pendingFirstTimeUpdate = false;
-		// 			} else {
-		// 				this.updateMenubar();
-		// 			}
-
-		// 			this.focusInsideMenubar = false;
-		// 		}
-		// 	}));
-
-		// 	this.reinstallDisposables.add(this.menubar.onVisibilityChange(e => this.onDidVisibilityChange(e)));
-
-		// 	// Before we focus the menubar, stop updates to it so that focus-related context keys will work
-		// 	this.reinstallDisposables.add(addDisposableListener(this.container, EventType.FOCUS_IN, () => {
-		// 		this.focusInsideMenubar = true;
-		// 	}));
-
-		// 	this.reinstallDisposables.add(addDisposableListener(this.container, EventType.FOCUS_OUT, () => {
-		// 		this.focusInsideMenubar = false;
-		// 	}));
-
-		// 	// Fire visibility change for the first install if menu is shown
-		// 	if (this.menubar.isVisible) {
-		// 		this.onDidVisibilityChange(true);
-		// 	}
-		// } else {
-		// 	this.menubar?.update(this.getMenuBarOptions());
-		// }
+			this.reinstallDisposables.add(this.menubar.onFocusStateChange(focused => {
+				this._onFocusStateChange.fire(focused);
+
+				// When the menubar loses focus, update it to clear any pending updates
+				if (!focused) {
+					if (this.pendingFirstTimeUpdate) {
+						this.setupCustomMenubar(true);
+						this.pendingFirstTimeUpdate = false;
+					} else {
+						this.updateMenubar();
+					}
+
+					this.focusInsideMenubar = false;
+				}
+			}));
+
+			this.reinstallDisposables.add(this.menubar.onVisibilityChange(e => this.onDidVisibilityChange(e)));
+
+			// Before we focus the menubar, stop updates to it so that focus-related context keys will work
+			this.reinstallDisposables.add(addDisposableListener(this.container, EventType.FOCUS_IN, () => {
+				this.focusInsideMenubar = true;
+			}));
+
+			this.reinstallDisposables.add(addDisposableListener(this.container, EventType.FOCUS_OUT, () => {
+				this.focusInsideMenubar = false;
+			}));
+
+			// Fire visibility change for the first install if menu is shown
+			if (this.menubar.isVisible) {
+				this.onDidVisibilityChange(true);
+			}
+		} else {
+			this.menubar?.update(this.getMenuBarOptions());
+		}
 
 		// Update the menu actions
 		const updateActions = (menuActions: readonly IAction[], target: IAction[], topLevelTitle: string) => {
diff --git a/src/vs/workbench/browser/parts/titlebar/titlebarPart.ts b/src/vs/workbench/browser/parts/titlebar/titlebarPart.ts
index 5feb7d8..3614918 100644
--- a/src/vs/workbench/browser/parts/titlebar/titlebarPart.ts
+++ b/src/vs/workbench/browser/parts/titlebar/titlebarPart.ts
@@ -200,9 +200,9 @@ export class TitlebarPart extends Part implements ITitleService {
 
 	protected installMenubar(): void {
 		// If the menubar is already installed, skip
-		if (this.menubar) {
-			return;
-		}
+		// if (this.menubar) {
+		return;
+		// }
 
 		this.customMenubar = this._register(this.instantiationService.createInstance(CustomMenubarControl));
 
-- 
2.39.2 (Apple Git-143)

