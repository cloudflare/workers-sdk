From 63b3a3fe21e1838b8c0088b4b147c49e94f4b511 Mon Sep 17 00:00:00 2001
From: Jacob M-G Evans <jacobmgevans@gmail.com>
Date: Tue, 28 Mar 2023 14:41:00 -0500
Subject: [PATCH 03/13] Removed Menu

---
 .../browser/parts/titlebar/menubarControl.ts  | 94 +++++++++----------
 1 file changed, 47 insertions(+), 47 deletions(-)

diff --git a/src/vs/workbench/browser/parts/titlebar/menubarControl.ts b/src/vs/workbench/browser/parts/titlebar/menubarControl.ts
index b27294c..013cf24 100644
--- a/src/vs/workbench/browser/parts/titlebar/menubarControl.ts
+++ b/src/vs/workbench/browser/parts/titlebar/menubarControl.ts
@@ -565,53 +565,53 @@ export class CustomMenubarControl extends MenubarControl {
 			return;
 		}
 
-		if (firstTime) {
-			// Reset and create new menubar
-			if (this.menubar) {
-				this.reinstallDisposables.clear();
-			}
-
-			this.menubar = this.reinstallDisposables.add(new MenuBar(this.container, this.getMenuBarOptions(), defaultMenuStyles));
-
-			this.accessibilityService.alwaysUnderlineAccessKeys().then(val => {
-				this.alwaysOnMnemonics = val;
-				this.menubar?.update(this.getMenuBarOptions());
-			});
-
-			this.reinstallDisposables.add(this.menubar.onFocusStateChange(focused => {
-				this._onFocusStateChange.fire(focused);
-
-				// When the menubar loses focus, update it to clear any pending updates
-				if (!focused) {
-					if (this.pendingFirstTimeUpdate) {
-						this.setupCustomMenubar(true);
-						this.pendingFirstTimeUpdate = false;
-					} else {
-						this.updateMenubar();
-					}
-
-					this.focusInsideMenubar = false;
-				}
-			}));
-
-			this.reinstallDisposables.add(this.menubar.onVisibilityChange(e => this.onDidVisibilityChange(e)));
-
-			// Before we focus the menubar, stop updates to it so that focus-related context keys will work
-			this.reinstallDisposables.add(addDisposableListener(this.container, EventType.FOCUS_IN, () => {
-				this.focusInsideMenubar = true;
-			}));
-
-			this.reinstallDisposables.add(addDisposableListener(this.container, EventType.FOCUS_OUT, () => {
-				this.focusInsideMenubar = false;
-			}));
-
-			// Fire visibility change for the first install if menu is shown
-			if (this.menubar.isVisible) {
-				this.onDidVisibilityChange(true);
-			}
-		} else {
-			this.menubar?.update(this.getMenuBarOptions());
-		}
+		// if (firstTime) {
+		// 	// Reset and create new menubar
+		// 	if (this.menubar) {
+		// 		this.reinstallDisposables.clear();
+		// 	}
+
+		// 	this.menubar = this.reinstallDisposables.add(new MenuBar(this.container, this.getMenuBarOptions(), defaultMenuStyles));
+
+		// 	this.accessibilityService.alwaysUnderlineAccessKeys().then(val => {
+		// 		this.alwaysOnMnemonics = val;
+		// 		this.menubar?.update(this.getMenuBarOptions());
+		// 	});
+
+		// 	this.reinstallDisposables.add(this.menubar.onFocusStateChange(focused => {
+		// 		this._onFocusStateChange.fire(focused);
+
+		// 		// When the menubar loses focus, update it to clear any pending updates
+		// 		if (!focused) {
+		// 			if (this.pendingFirstTimeUpdate) {
+		// 				this.setupCustomMenubar(true);
+		// 				this.pendingFirstTimeUpdate = false;
+		// 			} else {
+		// 				this.updateMenubar();
+		// 			}
+
+		// 			this.focusInsideMenubar = false;
+		// 		}
+		// 	}));
+
+		// 	this.reinstallDisposables.add(this.menubar.onVisibilityChange(e => this.onDidVisibilityChange(e)));
+
+		// 	// Before we focus the menubar, stop updates to it so that focus-related context keys will work
+		// 	this.reinstallDisposables.add(addDisposableListener(this.container, EventType.FOCUS_IN, () => {
+		// 		this.focusInsideMenubar = true;
+		// 	}));
+
+		// 	this.reinstallDisposables.add(addDisposableListener(this.container, EventType.FOCUS_OUT, () => {
+		// 		this.focusInsideMenubar = false;
+		// 	}));
+
+		// 	// Fire visibility change for the first install if menu is shown
+		// 	if (this.menubar.isVisible) {
+		// 		this.onDidVisibilityChange(true);
+		// 	}
+		// } else {
+		// 	this.menubar?.update(this.getMenuBarOptions());
+		// }
 
 		// Update the menu actions
 		const updateActions = (menuActions: readonly IAction[], target: IAction[], topLevelTitle: string) => {
-- 
2.39.2 (Apple Git-143)

