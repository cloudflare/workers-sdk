From ad0eca736dfef06d2055336a2885f655432ef7df Mon Sep 17 00:00:00 2001
From: Workers DevProd <workers-devprod@cloudflare.com>
Date: Sat, 17 Feb 2024 07:31:36 +0000
Subject: [PATCH 8/9] Enable project-wide intellisense for web

---
 .../typescript-language-features/package.json |   2 +-
 .../src/languageProvider.ts                   |   4 -
 .../src/tsServer/serverProcess.browser.ts     |  66 ++-
 .../src/typescriptServiceClient.ts            |   4 +-
 .../web/src/cfs-simple.ts                     | 426 ++++++++++++++++++
 .../web/src/fileWatcherManager.ts             |  23 +-
 .../web/src/pathMapper.ts                     |   3 +-
 .../web/src/serverHost.ts                     | 124 ++---
 .../web/src/webServer.ts                      |  12 +-
 .../web/src/workerSession.ts                  |  32 +-
 10 files changed, 571 insertions(+), 125 deletions(-)
 create mode 100644 extensions/typescript-language-features/web/src/cfs-simple.ts

diff --git a/extensions/typescript-language-features/package.json b/extensions/typescript-language-features/package.json
index 880c8dc..61b2888 100644
--- a/extensions/typescript-language-features/package.json
+++ b/extensions/typescript-language-features/package.json
@@ -983,7 +983,7 @@
             "%typescript.preferences.importModuleSpecifierEnding.index%",
             "%typescript.preferences.importModuleSpecifierEnding.js%"
           ],
-          "default": "auto",
+          "default": "js",
           "description": "%typescript.preferences.importModuleSpecifierEnding%",
           "scope": "language-overridable"
         },
diff --git a/extensions/typescript-language-features/src/languageProvider.ts b/extensions/typescript-language-features/src/languageProvider.ts
index 6157c3b..a1f02c1 100644
--- a/extensions/typescript-language-features/src/languageProvider.ts
+++ b/extensions/typescript-language-features/src/languageProvider.ts
@@ -17,7 +17,6 @@ import { ClientCapability } from './typescriptService';
 import TypeScriptServiceClient from './typescriptServiceClient';
 import TypingsStatus from './ui/typingsStatus';
 import { Disposable } from './utils/dispose';
-import { isWeb } from './utils/platform';
 
 
 const validateSetting = 'validate.enable';
@@ -141,9 +140,6 @@ export default class LanguageProvider extends Disposable {
 			return;
 		}
 
-		if (diagnosticsKind === DiagnosticKind.Semantic && isWeb() && this.client.configuration.webProjectWideIntellisenseSuppressSemanticErrors) {
-			return;
-		}
 
 		const config = vscode.workspace.getConfiguration(this.id, file);
 		const reportUnnecessary = config.get<boolean>('showUnused', true);
diff --git a/extensions/typescript-language-features/src/tsServer/serverProcess.browser.ts b/extensions/typescript-language-features/src/tsServer/serverProcess.browser.ts
index bb57c26..9f8c71b 100644
--- a/extensions/typescript-language-features/src/tsServer/serverProcess.browser.ts
+++ b/extensions/typescript-language-features/src/tsServer/serverProcess.browser.ts
@@ -114,11 +114,34 @@ class WorkerServerProcess implements TsServerProcess {
 				}
 				case 'watchDirectory':
 				case 'watchFile': {
-					this._watches.create(event.data.id, vscode.Uri.from(event.data.uri), /*watchParentDirs*/ true, !!event.data.recursive, {
-						change: uri => this._watcher.postMessage({ type: 'watch', event: 'change', uri }),
-						create: uri => this._watcher.postMessage({ type: 'watch', event: 'create', uri }),
-						delete: uri => this._watcher.postMessage({ type: 'watch', event: 'delete', uri }),
-					});
+					this._watches.create(
+						event.data.id,
+						vscode.Uri.from(event.data.uri),
+						/*watchParentDirs*/ true,
+						!!event.data.recursive,
+						{
+							change: async (uri) =>
+								this._watcher.postMessage({
+									type: 'watch',
+									event: 'change',
+									uri,
+									file: await vscode.workspace.fs.readFile(uri),
+								}),
+							create: async (uri) =>
+								this._watcher.postMessage({
+									type: 'watch',
+									event: 'create',
+									uri,
+									file: await vscode.workspace.fs.readFile(uri),
+								}),
+							delete: (uri) =>
+								this._watcher.postMessage({
+									type: 'watch',
+									event: 'delete',
+									uri,
+								}),
+						}
+					);
 					break;
 				}
 				default:
@@ -143,9 +166,36 @@ class WorkerServerProcess implements TsServerProcess {
 			}
 		};
 
-		this._worker.postMessage(
-			{ args, extensionUri },
-			[syncChannel.port1, tsserverChannel.port1, watcherChannel.port1]
+		async function addFilesFromDir(
+			root: vscode.Uri
+		): Promise<[vscode.Uri, Uint8Array][]> {
+			const files = await vscode.workspace.fs.readDirectory(root);
+			const storedFiles: [vscode.Uri, Uint8Array][] = [];
+
+			for (const [name, type] of files) {
+				if (type === vscode.FileType.File) {
+					storedFiles.push([
+						vscode.Uri.parse('cfs:' + root.path + `/${name}`),
+						await vscode.workspace.fs.readFile(
+							vscode.Uri.parse('cfs:' + root.path + `/${name}`)
+						),
+					]);
+				} else {
+					storedFiles.push(
+						...(await addFilesFromDir(
+							vscode.Uri.parse('cfs:' + root.path + `/${name}`)
+						))
+					);
+				}
+			}
+			return storedFiles;
+		}
+		addFilesFromDir(vscode.Uri.parse('cfs:/')).then((storedFiles) =>
+			this._worker.postMessage({ args, extensionUri, storedFiles }, [
+				syncChannel.port1,
+				tsserverChannel.port1,
+				watcherChannel.port1,
+			])
 		);
 
 		const connection = new ServiceConnection<Requests>(syncChannel.port2);
diff --git a/extensions/typescript-language-features/src/typescriptServiceClient.ts b/extensions/typescript-language-features/src/typescriptServiceClient.ts
index a389142..e216be7 100644
--- a/extensions/typescript-language-features/src/typescriptServiceClient.ts
+++ b/extensions/typescript-language-features/src/typescriptServiceClient.ts
@@ -24,7 +24,7 @@ import { ServiceConfigurationProvider, SyntaxServerConfiguration, TsServerLogLev
 import { Disposable } from './utils/dispose';
 import * as fileSchemes from './configuration/fileSchemes';
 import { Logger } from './logging/logger';
-import { isWeb, isWebAndHasSharedArrayBuffers } from './utils/platform';
+import { isWeb } from './utils/platform';
 import { PluginManager, TypeScriptServerPlugin } from './tsServer/plugins';
 import { TelemetryProperties, TelemetryReporter, VSCodeTelemetryReporter } from './logging/telemetry';
 import Tracer from './logging/tracer';
@@ -269,7 +269,7 @@ export default class TypeScriptServiceClient extends Disposable implements IType
 	readonly onDidChangeCapabilities = this._onDidChangeCapabilities.event;
 
 	private isProjectWideIntellisenseOnWebEnabled(): boolean {
-		return isWebAndHasSharedArrayBuffers() && this._configuration.webProjectWideIntellisenseEnabled;
+		return true;
 	}
 
 	private cancelInflightRequestsForResource(resource: vscode.Uri): void {
diff --git a/extensions/typescript-language-features/web/src/cfs-simple.ts b/extensions/typescript-language-features/web/src/cfs-simple.ts
new file mode 100644
index 0000000..043a369
--- /dev/null
+++ b/extensions/typescript-language-features/web/src/cfs-simple.ts
@@ -0,0 +1,426 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+import { URI } from 'vscode-uri';
+
+enum FilePermission {
+	/**
+	 * The file is readonly.
+	 *
+	 * *Note:* All `FileStat` from a `FileSystemProvider` that is registered with
+	 * the option `isReadonly: true` will be implicitly handled as if `FilePermission.Readonly`
+	 * is set. As a consequence, it is not possible to have a readonly file system provider
+	 * registered where some `FileStat` are not readonly.
+	 */
+	Readonly = 1,
+}
+export interface FileStat {
+	/**
+	 * The type of the file, e.g. is a regular file, a directory, or symbolic link
+	 * to a file.
+	 *
+	 * *Note:* This value might be a bitmask, e.g. `FileType.File | FileType.SymbolicLink`.
+	 */
+	type: FileType;
+	/**
+	 * The creation timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.
+	 */
+	ctime: number;
+	/**
+	 * The modification timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.
+	 *
+	 * *Note:* If the file changed, it is important to provide an updated `mtime` that advanced
+	 * from the previous value. Otherwise there may be optimizations in place that will not show
+	 * the updated file contents in an editor for example.
+	 */
+	mtime: number;
+	/**
+	 * The size in bytes.
+	 *
+	 * *Note:* If the file changed, it is important to provide an updated `size`. Otherwise there
+	 * may be optimizations in place that will not show the updated file contents in an editor for
+	 * example.
+	 */
+	size: number;
+	/**
+	 * The permissions of the file, e.g. whether the file is readonly.
+	 *
+	 * *Note:* This value might be a bitmask, e.g. `FilePermission.Readonly | FilePermission.Other`.
+	 */
+	permissions?: FilePermission;
+}
+enum FileSystemProviderErrorCode {
+	FileExists = 'EntryExists',
+	FileNotFound = 'EntryNotFound',
+	FileNotADirectory = 'EntryNotADirectory',
+	FileIsADirectory = 'EntryIsADirectory',
+	FileExceedsMemoryLimit = 'EntryExceedsMemoryLimit',
+	FileTooLarge = 'EntryTooLarge',
+	FileWriteLocked = 'EntryWriteLocked',
+	NoPermissions = 'NoPermissions',
+	Unavailable = 'Unavailable',
+	Unknown = 'Unknown',
+}
+class FileSystemError extends Error {
+	static FileExists(messageOrUri?: string | URI): FileSystemError {
+		return new FileSystemError(
+			messageOrUri,
+			FileSystemProviderErrorCode.FileExists,
+			FileSystemError.FileExists
+		);
+	}
+	static FileNotFound(messageOrUri?: string | URI): FileSystemError {
+		return new FileSystemError(
+			messageOrUri,
+			FileSystemProviderErrorCode.FileNotFound,
+			FileSystemError.FileNotFound
+		);
+	}
+	static FileNotADirectory(messageOrUri?: string | URI): FileSystemError {
+		return new FileSystemError(
+			messageOrUri,
+			FileSystemProviderErrorCode.FileNotADirectory,
+			FileSystemError.FileNotADirectory
+		);
+	}
+	static FileIsADirectory(messageOrUri?: string | URI): FileSystemError {
+		return new FileSystemError(
+			messageOrUri,
+			FileSystemProviderErrorCode.FileIsADirectory,
+			FileSystemError.FileIsADirectory
+		);
+	}
+	static NoPermissions(messageOrUri?: string | URI): FileSystemError {
+		return new FileSystemError(
+			messageOrUri,
+			FileSystemProviderErrorCode.NoPermissions,
+			FileSystemError.NoPermissions
+		);
+	}
+	static Unavailable(messageOrUri?: string | URI): FileSystemError {
+		return new FileSystemError(
+			messageOrUri,
+			FileSystemProviderErrorCode.Unavailable,
+			FileSystemError.Unavailable
+		);
+	}
+
+	readonly code: string;
+
+	constructor(
+		uriOrMessage?: string | URI,
+		code: FileSystemProviderErrorCode = FileSystemProviderErrorCode.Unknown,
+		terminator?: Function
+	) {
+		super(
+			code +
+			(URI.isUri(uriOrMessage) ? uriOrMessage.toString(true) : uriOrMessage)
+		);
+
+		this.code = code;
+
+		// workaround when extending builtin objects and when compiling to ES5, see:
+		// https://github.com/microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
+		Object.setPrototypeOf(this, FileSystemError.prototype);
+
+		if (
+			typeof Error.captureStackTrace === 'function' &&
+			typeof terminator === 'function'
+		) {
+			// nice stack traces
+			Error.captureStackTrace(this, terminator);
+		}
+	}
+}
+export enum FileType {
+	/**
+	 * The file type is unknown.
+	 */
+	Unknown = 0,
+	/**
+	 * A regular file.
+	 */
+	File = 1,
+	/**
+	 * A directory.
+	 */
+	Directory = 2,
+	/**
+	 * A symbolic link to a file.
+	 */
+	SymbolicLink = 64,
+}
+
+export class File implements FileStat {
+	type: FileType;
+	ctime: number;
+	mtime: number;
+	size: number;
+
+	name: string;
+	data?: Uint8Array;
+	permissions?: FilePermission;
+
+	constructor(public uri: URI, name: string) {
+		this.type = FileType.File;
+		this.ctime = Date.now();
+		this.mtime = Date.now();
+		this.size = 0;
+		this.name = name;
+	}
+
+	public setReadOnly() {
+		this.permissions = FilePermission.Readonly;
+	}
+}
+
+export class Directory implements FileStat {
+	type: FileType;
+	ctime: number;
+	mtime: number;
+	size: number;
+
+	name: string;
+	entries: Map<string, File | Directory>;
+
+	constructor(public uri: URI, name: string) {
+		this.type = FileType.Directory;
+		this.ctime = Date.now();
+		this.mtime = Date.now();
+		this.size = 0;
+		this.name = name;
+		this.entries = new Map();
+	}
+}
+
+export type Entry = File | Directory;
+function stripSlashPrefix(path: string) {
+	return path[0] === '/' ? path.slice(1) : path;
+}
+export class CFS {
+	static scheme = 'cfs';
+	private readonly rootFolder = 'cfs:';
+
+	constructor() { }
+
+	root = new Directory(URI.parse('cfs:/'), '');
+
+	async seed(files: [URI, Uint8Array][]) {
+		for (const [path, contents] of files) {
+			const pathSegments = stripSlashPrefix(path.path).split('/');
+			console.log('SEED', path, pathSegments);
+			if (pathSegments.length > 1) {
+				let created = this.rootFolder;
+				for (const pathPart of pathSegments.slice(0, -1)) {
+					created = created + `/${pathPart}`;
+					console.log('SEED', created);
+
+					try {
+						await this.readDirectory(URI.parse(created));
+					} catch {
+						await this.createDirectory(URI.parse(created));
+					}
+				}
+			}
+			await this.writeFile(path, contents, {
+				create: true,
+				overwrite: true,
+			});
+		}
+	}
+
+	stat(uri: URI): FileStat {
+		console.log('TSSERVER CFS stat', uri);
+		return this._lookup(uri, false);
+	}
+
+	readDirectory(uri: URI): [string, FileType][] {
+		const entry = this._lookupAsDirectory(uri, false);
+		const result: [string, FileType][] = [];
+		for (const [name, child] of entry.entries) {
+			result.push([name, child.type]);
+		}
+		return result;
+	}
+
+	readFile(uri: URI): Uint8Array {
+		const data = this._lookupAsFile(uri, false).data;
+		if (data) {
+			return data;
+		}
+		throw FileSystemError.FileNotFound();
+	}
+
+	writeFile(
+		uri: URI,
+		content: Uint8Array,
+		options: {
+			create: boolean;
+			overwrite: boolean;
+		}
+	): void {
+		const basename = this._basename(uri.path);
+		const parent = this._lookupParentDirectory(uri);
+		let entry = parent.entries.get(basename);
+		if (entry instanceof Directory) {
+			throw FileSystemError.FileIsADirectory(uri);
+		}
+		if (!entry && !options.create) {
+			throw FileSystemError.FileNotFound(uri);
+		}
+		if (entry && options.create && !options.overwrite) {
+			throw FileSystemError.FileExists(uri);
+		}
+		if (!entry) {
+			entry = new File(uri, basename);
+			parent.entries.set(basename, entry);
+		}
+		entry.mtime = Date.now();
+		entry.size = content.byteLength;
+		entry.data = content;
+	}
+
+	rename(oldURI: URI, newURI: URI, options: { overwrite: boolean }): void {
+		if (!options.overwrite && this._lookup(newURI, true)) {
+			throw FileSystemError.FileExists(newURI);
+		}
+
+		const entry = this._lookup(oldURI, false);
+		const oldParent = this._lookupParentDirectory(oldURI);
+
+		const newParent = this._lookupParentDirectory(newURI);
+		const newName = this._basename(newURI.path);
+
+		oldParent.entries.delete(entry.name);
+		entry.name = newName;
+		newParent.entries.set(newName, entry);
+	}
+
+	delete(uri: URI): void {
+		const dirname = uri.with({ path: this._dirname(uri.path) });
+		const basename = this._basename(uri.path);
+		const parent = this._lookupAsDirectory(dirname, false);
+		if (!parent.entries.has(basename)) {
+			throw FileSystemError.FileNotFound(uri);
+		}
+		const entry = parent.entries.get(basename);
+		// Recursively delete all children
+		if (entry instanceof Directory) {
+			for (const child of entry.entries.values()) {
+				this.delete(child.uri);
+			}
+		}
+
+		parent.entries.delete(basename);
+		parent.mtime = Date.now();
+		parent.size -= 1;
+	}
+
+	createDirectory(uri: URI): void {
+		const basename = this._basename(uri.path);
+		const dirname = uri.with({ path: this._dirname(uri.path) });
+		const parent = this._lookupAsDirectory(dirname, false);
+
+		const entry = new Directory(uri, basename);
+		parent.entries.set(entry.name, entry);
+		parent.mtime = Date.now();
+		parent.size += 1;
+	}
+
+	// --- lookup
+
+	private _lookup(uri: URI, silent: false): Entry;
+	private _lookup(uri: URI, silent: boolean): Entry | undefined;
+	private _lookup(uri: URI, silent: boolean): Entry | undefined {
+		const parts = uri.path.split('/');
+		let entry: Entry = this.root;
+		for (const part of parts) {
+			if (!part) {
+				continue;
+			}
+			let child: Entry | undefined;
+			if (entry instanceof Directory) {
+				child = entry.entries.get(part);
+			}
+			if (!child) {
+				if (!silent) {
+					throw FileSystemError.FileNotFound(uri);
+				} else {
+					return undefined;
+				}
+			}
+			entry = child;
+		}
+		return entry;
+	}
+
+	private _lookupAsDirectory(uri: URI, silent: boolean): Directory {
+		const entry = this._lookup(uri, silent);
+		if (entry instanceof Directory) {
+			return entry;
+		}
+		throw FileSystemError.FileNotADirectory(uri);
+	}
+
+	private _lookupAsFile(uri: URI, silent: boolean): File {
+		const entry = this._lookup(uri, silent);
+		if (entry instanceof File) {
+			return entry;
+		}
+		throw FileSystemError.FileIsADirectory(uri);
+	}
+
+	private _lookupParentDirectory(uri: URI): Directory {
+		const dirname = uri.with({ path: this._dirname(uri.path) });
+		return this._lookupAsDirectory(dirname, false);
+	}
+
+	private _basename(path: string): string {
+		path = this._rtrim(path, '/');
+		if (!path) {
+			return '';
+		}
+
+		return path.substr(path.lastIndexOf('/') + 1);
+	}
+
+	private _dirname(path: string): string {
+		path = this._rtrim(path, '/');
+		if (!path) {
+			return '/';
+		}
+
+		return path.substr(0, path.lastIndexOf('/'));
+	}
+
+	private _rtrim(haystack: string, needle: string): string {
+		if (!haystack || !needle) {
+			return haystack;
+		}
+
+		const needleLen = needle.length,
+			haystackLen = haystack.length;
+
+		if (needleLen === 0 || haystackLen === 0) {
+			return haystack;
+		}
+
+		let offset = haystackLen,
+			idx = -1;
+
+		// eslint-disable-next-line
+		while (true) {
+			idx = haystack.lastIndexOf(needle, offset - 1);
+			if (idx === -1 || idx + needleLen !== offset) {
+				break;
+			}
+			if (idx === 0) {
+				return '';
+			}
+			offset = idx;
+		}
+
+		return haystack.substring(0, offset);
+	}
+}
diff --git a/extensions/typescript-language-features/web/src/fileWatcherManager.ts b/extensions/typescript-language-features/web/src/fileWatcherManager.ts
index 8c8d740..1cd6557 100644
--- a/extensions/typescript-language-features/web/src/fileWatcherManager.ts
+++ b/extensions/typescript-language-features/web/src/fileWatcherManager.ts
@@ -7,6 +7,7 @@ import type * as ts from 'typescript/lib/tsserverlibrary';
 import { URI } from 'vscode-uri';
 import { Logger } from './logging';
 import { PathMapper, fromResource, looksLikeLibDtsPath, looksLikeNodeModules, mapUri } from './pathMapper';
+import { cfs } from './serverHost';
 
 /**
  * Copied from `ts.FileWatcherEventKind` to avoid direct dependency.
@@ -32,7 +33,27 @@ export class FileWatcherManager {
 		private readonly pathMapper: PathMapper,
 		private readonly logger: Logger
 	) {
-		watchPort.onmessage = (e: any) => this.updateWatch(e.data.event, URI.from(e.data.uri), extensionUri);
+		watchPort.onmessage = async (e: any) => {
+			try {
+				switch (e.data.event) {
+					case 'create':
+						await cfs.seed([[URI.from(e.data.uri), e.data.file]]);
+						break;
+					case 'change':
+						await cfs.writeFile(URI.from(e.data.uri), e.data.file, {
+							create: true,
+							overwrite: true,
+						});
+						break;
+					case 'delete':
+						await cfs.delete(URI.from(e.data.uri));
+						break;
+				}
+			} catch (e) {
+				console.error(e);
+			}
+			this.updateWatch(e.data.event, URI.from(e.data.uri), extensionUri);
+		};
 	}
 
 	watchFile(path: string, callback: ts.FileWatcherCallback, pollingInterval?: number, options?: ts.WatchOptions): ts.FileWatcher {
diff --git a/extensions/typescript-language-features/web/src/pathMapper.ts b/extensions/typescript-language-features/web/src/pathMapper.ts
index e925489..bbcd6ef 100644
--- a/extensions/typescript-language-features/web/src/pathMapper.ts
+++ b/extensions/typescript-language-features/web/src/pathMapper.ts
@@ -76,7 +76,8 @@ export function fromResource(extensionUri: URI, uri: URI) {
 		&& uri.path.endsWith('.d.ts')) {
 		return uri.path;
 	}
-	return `/${uri.scheme}/${uri.authority}${uri.path}`;
+	// Use `ts-nul-authority` when the authority is an empty string. All CFS file have an empty authority
+	return `/${uri.scheme}/${uri.authority === '' ? 'ts-nul-authority' : uri.authority}${uri.path}`;
 }
 
 export function looksLikeLibDtsPath(filepath: string) {
diff --git a/extensions/typescript-language-features/web/src/serverHost.ts b/extensions/typescript-language-features/web/src/serverHost.ts
index f2f9ca9..8069d8c 100644
--- a/extensions/typescript-language-features/web/src/serverHost.ts
+++ b/extensions/typescript-language-features/web/src/serverHost.ts
@@ -3,29 +3,36 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { ApiClient, FileStat, FileType, Requests } from '@vscode/sync-api-client';
-import { ClientConnection } from '@vscode/sync-api-common/browser';
-import { basename } from 'path';
-import type * as ts from 'typescript/lib/tsserverlibrary';
+import * as ts from 'typescript/lib/tsserverlibrary';
 import { FileWatcherManager } from './fileWatcherManager';
 import { Logger } from './logging';
 import { PathMapper, looksLikeNodeModules, mapUri } from './pathMapper';
-import { findArgument, hasArgument } from './util/args';
+import { findArgument } from './util/args';
+
+// Keep an in-memory representation of the current Worker script.
+// This is in-memory within this (Web) Worker to avoid a dependency on SharedArrayBuffer
+// The contents are updated on a slight lag from VSCode filesystem events
+import { CFS, FileType, FileStat } from './cfs-simple';
+export const cfs = new CFS();
+
+// BEGIN misc internals
+
+// End misc internals
 
 type ServerHostWithImport = ts.server.ServerHost & { importPlugin(root: string, moduleName: string): Promise<ts.server.ModuleImportResult> };
 
 function createServerHost(
 	ts: typeof import('typescript/lib/tsserverlibrary'),
 	logger: Logger,
-	apiClient: ApiClient | undefined,
+	_apiClient:undefined,
 	args: readonly string[],
 	watchManager: FileWatcherManager,
 	pathMapper: PathMapper,
-	enabledExperimentalTypeAcquisition: boolean,
+	_enabledExperimentalTypeAcquisition: boolean,
 	exit: () => void,
 ): ServerHostWithImport {
 	const currentDirectory = '/';
-	const fs = apiClient?.vscode.workspace.fileSystem;
+	const fs = cfs;
 
 	// Internals
 	const combinePaths: (path: string, ...paths: (string | undefined)[]) => string = (ts as any).combinePaths;
@@ -98,7 +105,7 @@ function createServerHost(
 		newLine: '\n',
 		useCaseSensitiveFileNames: true,
 		write: s => {
-			apiClient?.vscode.terminal.write(s);
+			logger.logNormal(s);
 		},
 		writeOutputIsTTY() {
 			return true;
@@ -106,7 +113,9 @@ function createServerHost(
 		readFile(path) {
 			logger.logVerbose('fs.readFile', { path });
 
-			if (!fs) {
+			// Load http resources bypassing CFS. This is pretty much just Typescript lib files
+			const resource = pathMapper.toResource(path);
+			if (!fs || resource.scheme.startsWith('http')) {
 				const webPath = getWebPath(path);
 				if (webPath) {
 					const request = new XMLHttpRequest();
@@ -118,28 +127,12 @@ function createServerHost(
 				}
 			}
 
-			let uri;
-			try {
-				uri = pathMapper.toResource(path);
-			} catch (e) {
-				return undefined;
-			}
-
-			let contents: Uint8Array | undefined;
 			try {
-				// We need to slice the bytes since we can't pass a shared array to text decoder
-				contents = fs.readFile(uri);
+				const contents = fs.readFile(resource);
+				return textDecoder.decode(contents);
 			} catch (error) {
-				if (!enabledExperimentalTypeAcquisition) {
-					return undefined;
-				}
-				try {
-					contents = fs.readFile(mapUri(uri, 'vscode-node-modules'));
-				} catch (e) {
-					return undefined;
-				}
+				return undefined
 			}
-			return textDecoder.decode(contents.slice());
 		},
 		getFileSize(path) {
 			logger.logVerbose('fs.getFileSize', { path });
@@ -153,12 +146,6 @@ function createServerHost(
 			try {
 				ret = fs.stat(uri).size;
 			} catch (_error) {
-				if (enabledExperimentalTypeAcquisition) {
-					try {
-						ret = fs.stat(mapUri(uri, 'vscode-node-modules')).size;
-					} catch (_error) {
-					}
-				}
 			}
 			return ret;
 		},
@@ -173,19 +160,11 @@ function createServerHost(
 				data = byteOrderMarkIndicator + data;
 			}
 
-			let uri;
 			try {
-				uri = pathMapper.toResource(path);
-			} catch (e) {
-				return;
-			}
-			const encoded = textEncoder.encode(data);
-			try {
-				fs.writeFile(uri, encoded);
-				const name = basename(uri.path);
-				if (uri.scheme !== 'vscode-global-typings' && (name === 'package.json' || name === 'package-lock.json' || name === 'package-lock.kdl')) {
-					fs.writeFile(mapUri(uri, 'vscode-node-modules'), encoded);
-				}
+				fs.writeFile(pathMapper.toResource(path), textEncoder.encode(data), {
+					create: true,
+					overwrite: true,
+				});
 			} catch (error) {
 				console.error('fs.writeFile', { path, error });
 			}
@@ -196,7 +175,9 @@ function createServerHost(
 		fileExists(path: string): boolean {
 			logger.logVerbose('fs.fileExists', { path });
 
-			if (!fs) {
+			const resource = pathMapper.toResource(path);
+
+			if (!fs || resource.scheme.startsWith('http')) {
 				const webPath = getWebPath(path);
 				if (!webPath) {
 					return false;
@@ -208,24 +189,12 @@ function createServerHost(
 				return request.status === 200;
 			}
 
-			let uri;
 			try {
-				uri = pathMapper.toResource(path);
-			} catch (e) {
+				return fs.stat(resource).type === FileType.File;
+			} catch (error) {
+				logger.logNormal('Error fs.fileExists', { path, error: error + '' });
 				return false;
 			}
-			let ret = false;
-			try {
-				ret = fs.stat(uri).type === FileType.File;
-			} catch (_error) {
-				if (enabledExperimentalTypeAcquisition) {
-					try {
-						ret = fs.stat(mapUri(uri, 'vscode-node-modules')).type === FileType.File;
-					} catch (_error) {
-					}
-				}
-			}
-			return ret;
 		},
 		directoryExists(path: string): boolean {
 			logger.logVerbose('fs.directoryExists', { path });
@@ -245,12 +214,7 @@ function createServerHost(
 			try {
 				stat = fs.stat(uri);
 			} catch (_error) {
-				if (enabledExperimentalTypeAcquisition) {
-					try {
-						stat = fs.stat(mapUri(uri, 'vscode-node-modules'));
-					} catch (_error) {
-					}
-				}
+
 			}
 			if (stat) {
 				if (path.startsWith('/https') && !path.endsWith('.d.ts')) {
@@ -303,12 +267,7 @@ function createServerHost(
 			try {
 				s = fs.stat(uri);
 			} catch (_e) {
-				if (enabledExperimentalTypeAcquisition) {
-					try {
-						s = fs.stat(mapUri(uri, 'vscode-node-modules'));
-					} catch (_e) {
-					}
-				}
+
 			}
 			return s && new Date(s.mtime);
 		},
@@ -406,23 +365,12 @@ function createServerHost(
 export async function createSys(
 	ts: typeof import('typescript/lib/tsserverlibrary'),
 	args: readonly string[],
-	fsPort: MessagePort,
+	_fsPort: MessagePort,
 	logger: Logger,
 	watchManager: FileWatcherManager,
 	pathMapper: PathMapper,
 	onExit: () => void,
 ) {
-	if (hasArgument(args, '--enableProjectWideIntelliSenseOnWeb')) {
-		const enabledExperimentalTypeAcquisition = hasArgument(args, '--experimentalTypeAcquisition');
-		const connection = new ClientConnection<Requests>(fsPort);
-		await connection.serviceReady();
-
-		const apiClient = new ApiClient(connection);
-		const fs = apiClient.vscode.workspace.fileSystem;
-		const sys = createServerHost(ts, logger, apiClient, args, watchManager, pathMapper, enabledExperimentalTypeAcquisition, onExit);
-		return { sys, fs };
-	} else {
-		return { sys: createServerHost(ts, logger, undefined, args, watchManager, pathMapper, false, onExit) };
-	}
+	return { sys: createServerHost(ts, logger, undefined, args, watchManager, pathMapper, false, onExit) };
 }
 
diff --git a/extensions/typescript-language-features/web/src/webServer.ts b/extensions/typescript-language-features/web/src/webServer.ts
index 3d2d5f9..72522b8 100644
--- a/extensions/typescript-language-features/web/src/webServer.ts
+++ b/extensions/typescript-language-features/web/src/webServer.ts
@@ -9,7 +9,7 @@ import { URI } from 'vscode-uri';
 import { FileWatcherManager } from './fileWatcherManager';
 import { Logger, parseLogLevel } from './logging';
 import { PathMapper } from './pathMapper';
-import { createSys } from './serverHost';
+import { createSys, cfs } from './serverHost';
 import { findArgument, findArgumentStringArray, hasArgument, parseServerMode } from './util/args';
 import { StartSessionOptions, startWorkerSession } from './workerSession';
 
@@ -37,11 +37,11 @@ async function initializeSession(
 	const pathMapper = new PathMapper(extensionUri);
 	const watchManager = new FileWatcherManager(ports.watcher, extensionUri, enabledExperimentalTypeAcquisition, pathMapper, logger);
 
-	const { sys, fs } = await createSys(ts, args, ports.sync, logger, watchManager, pathMapper, () => {
+	const { sys } = await createSys(ts, args, ports.sync, logger, watchManager, pathMapper, () => {
 		removeEventListener('message', listener);
 	});
 	setSys(sys);
-	startWorkerSession(ts, sys, fs, sessionOptions, ports.tsserver, pathMapper, logger);
+	startWorkerSession(ts, sys, undefined, sessionOptions, ports.tsserver, pathMapper, logger);
 }
 
 function parseSessionOptions(args: readonly string[], serverMode: ts.LanguageServiceMode | undefined): StartSessionOptions {
@@ -62,6 +62,12 @@ let hasInitialized = false;
 const listener = async (e: any) => {
 	if (!hasInitialized) {
 		hasInitialized = true;
+		await cfs.seed(
+			(e.data.storedFiles as [Parameters<typeof URI.from>[0], Uint8Array][]).map(([uri, contents]) => [
+				URI.from(uri),
+				contents,
+			])
+		);
 		if ('args' in e.data) {
 			const args = e.data.args;
 			const extensionUri = URI.from(e.data.extensionUri);
diff --git a/extensions/typescript-language-features/web/src/workerSession.ts b/extensions/typescript-language-features/web/src/workerSession.ts
index 6ae517c..47802cd 100644
--- a/extensions/typescript-language-features/web/src/workerSession.ts
+++ b/extensions/typescript-language-features/web/src/workerSession.ts
@@ -2,10 +2,8 @@
  *  Copyright (c) Microsoft Corporation. All rights reserved.
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
-import { FileSystem } from '@vscode/sync-api-client';
-import type * as ts from 'typescript/lib/tsserverlibrary';
+import * as ts from 'typescript/lib/tsserverlibrary';
 import { Logger } from './logging';
-import { WebTypingsInstallerClient } from './typingsInstaller/typingsInstaller';
 import { hrtime } from './util/hrtime';
 import { WasmCancellationToken } from './wasmCancellationToken';
 import { PathMapper } from './pathMapper';
@@ -25,7 +23,7 @@ export interface StartSessionOptions {
 export function startWorkerSession(
 	ts: typeof import('typescript/lib/tsserverlibrary'),
 	host: ts.server.ServerHost,
-	fs: FileSystem | undefined,
+	_fs: undefined,
 	options: StartSessionOptions,
 	port: MessagePort,
 	pathMapper: PathMapper,
@@ -40,19 +38,18 @@ export function startWorkerSession(
 
 		constructor() {
 			const cancellationToken = new WasmCancellationToken();
-			const typingsInstaller = options.disableAutomaticTypingAcquisition || !fs ? ts.server.nullTypingsInstaller : new WebTypingsInstallerClient(host, '/vscode-global-typings/ts-nul-authority/projects');
-
-			super({
-				host,
-				cancellationToken,
-				...options,
-				typingsInstaller,
-				byteLength: () => { throw new Error('Not implemented'); }, // Formats the message text in send of Session which is overridden in this class so not needed
-				hrtime,
-				logger: logger.tsLogger,
-				canUseEvents: true,
-			});
-			this.wasmCancellationToken = cancellationToken;
+
+		super({
+			host,
+			cancellationToken,
+			...options,
+			typingsInstaller:ts.server.nullTypingsInstaller,
+			byteLength: () => { throw new Error('Not implemented'); }, // Formats the message text in send of Session which is overridden in this class so not needed
+			hrtime,
+			logger: logger.tsLogger,
+			canUseEvents: true,
+		});
+		this.wasmCancellationToken = cancellationToken;
 
 			this.listener = (message: any) => {
 				// TEMP fix since Cancellation.retrieveCheck is not correct
@@ -124,3 +121,4 @@ export function startWorkerSession(
 
 	worker.listen();
 }
+
-- 
2.39.3 (Apple Git-145)

