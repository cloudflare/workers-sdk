From 0525ed3c91d18e948e45df6f4331c58d5af9718b Mon Sep 17 00:00:00 2001
From: Jacob M-G Evans <jacobmgevans@gmail.com>
Date: Tue, 28 Mar 2023 14:53:02 -0500
Subject: [PATCH 05/13] Remove Account & Extension

---
 .../parts/activitybar/activitybarPart.ts      | 26 +++++++++----------
 .../extensions/browser/extensionsIcons.ts     |  2 +-
 2 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts b/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts
index b574036..4c0dcce 100644
--- a/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts
+++ b/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts
@@ -81,7 +81,7 @@ export class ActivitybarPart extends Part implements IPaneCompositeSelectorPart
 	private static readonly ACCOUNTS_ACTION_INDEX = 0;
 
 	private static readonly GEAR_ICON = registerIcon('settings-view-bar-icon', Codicon.settingsGear, localize('settingsViewBarIcon', "Settings icon in the view bar."));
-	private static readonly ACCOUNTS_ICON = registerIcon('accounts-view-bar-icon', Codicon.account, localize('accountsViewBarIcon', "Accounts icon in the view bar."));
+	// private static readonly ACCOUNTS_ICON = registerIcon('accounts-view-bar-icon', Codicon.account, localize('accountsViewBarIcon', "Accounts icon in the view bar."));
 
 	//#region IView
 
@@ -394,10 +394,10 @@ export class ActivitybarPart extends Part implements IPaneCompositeSelectorPart
 
 	private getCumulativeNumberBadge(activityCache: ICompositeActivity[], priority: number): NumberBadge {
 		const numberActivities = activityCache.filter(activity => activity.badge instanceof NumberBadge && activity.priority === priority);
-		const number = numberActivities.reduce((result, activity) => { return result + (<NumberBadge>activity.badge).number; }, 0);
+		const number = numberActivities.reduce((result, activity) => { return result + (<NumberBadge> activity.badge).number; }, 0);
 		const descriptorFn = (): string => {
 			return numberActivities.reduce((result, activity, index) => {
-				result = result + (<NumberBadge>activity.badge).getDescription();
+				result = result + (<NumberBadge> activity.badge).getDescription();
 				if (index < numberActivities.length - 1) {
 					result = `${result}\n`;
 				}
@@ -528,15 +528,15 @@ export class ActivitybarPart extends Part implements IPaneCompositeSelectorPart
 			cssClass: ThemeIcon.asClassName(ActivitybarPart.GEAR_ICON),
 		}));
 
-		if (this.accountsVisibilityPreference) {
-			this.accountsActivityAction = this._register(new ActivityAction({
-				id: 'workbench.actions.accounts',
-				name: localize('accounts', "Accounts"),
-				cssClass: ThemeIcon.asClassName(ActivitybarPart.ACCOUNTS_ICON)
-			}));
+		// if (this.accountsVisibilityPreference) {
+		// 	this.accountsActivityAction = this._register(new ActivityAction({
+		// 		id: 'workbench.actions.accounts',
+		// 		name: localize('accounts', "Accounts"),
+		// 		cssClass: ThemeIcon.asClassName(ActivitybarPart.ACCOUNTS_ICON)
+		// 	}));
 
-			this.globalActivityActionBar.push(this.accountsActivityAction, { index: ActivitybarPart.ACCOUNTS_ACTION_INDEX });
-		}
+		// 	this.globalActivityActionBar.push(this.accountsActivityAction, { index: ActivitybarPart.ACCOUNTS_ACTION_INDEX });
+		// }
 
 		this.globalActivityActionBar.push(this.globalActivityAction);
 	}
@@ -899,14 +899,14 @@ export class ActivitybarPart extends Part implements IPaneCompositeSelectorPart
 	}
 
 	private storeCachedViewContainersState(cachedViewContainers: ICachedViewContainer[]): void {
-		this.setPinnedViewContainers(cachedViewContainers.map(({ id, pinned, visible, order }) => (<IPinnedViewContainer>{
+		this.setPinnedViewContainers(cachedViewContainers.map(({ id, pinned, visible, order }) => (<IPinnedViewContainer> {
 			id,
 			pinned,
 			visible,
 			order
 		})));
 
-		this.setPlaceholderViewContainers(cachedViewContainers.map(({ id, icon, name, views, isBuiltin }) => (<IPlaceholderViewContainer>{
+		this.setPlaceholderViewContainers(cachedViewContainers.map(({ id, icon, name, views, isBuiltin }) => (<IPlaceholderViewContainer> {
 			id,
 			iconUrl: URI.isUri(icon) ? icon : undefined,
 			themeIcon: ThemeIcon.isThemeIcon(icon) ? icon : undefined,
diff --git a/src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts b/src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts
index 7cf7dc9..242d748 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts
@@ -7,7 +7,7 @@ import { Codicon } from 'vs/base/common/codicons';
 import { localize } from 'vs/nls';
 import { registerIcon } from 'vs/platform/theme/common/iconRegistry';
 
-export const extensionsViewIcon = registerIcon('extensions-view-icon', Codicon.extensions, localize('extensionsViewIcon', 'View icon of the extensions view.'));
+// export const extensionsViewIcon = registerIcon('extensions-view-icon', Codicon.extensions, localize('extensionsViewIcon', 'View icon of the extensions view.'));
 
 export const manageExtensionIcon = registerIcon('extensions-manage', Codicon.gear, localize('manageExtensionIcon', 'Icon for the \'Manage\' action in the extensions view.'));
 
-- 
2.39.2 (Apple Git-143)

