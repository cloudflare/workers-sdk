From 96714e7b0ca2dcc3d15d1d6dd63bba95247cea81 Mon Sep 17 00:00:00 2001
From: Jacob M-G Evans <jacobmgevans@gmail.com>
Date: Tue, 28 Mar 2023 14:42:09 -0500
Subject: [PATCH 07/13] Remove Source Control

---
 .../contrib/scm/browser/scm.contribution.ts   | 100 +++++++++---------
 1 file changed, 50 insertions(+), 50 deletions(-)

diff --git a/src/vs/workbench/contrib/scm/browser/scm.contribution.ts b/src/vs/workbench/contrib/scm/browser/scm.contribution.ts
index fed3eb0..013b989 100644
--- a/src/vs/workbench/contrib/scm/browser/scm.contribution.ts
+++ b/src/vs/workbench/contrib/scm/browser/scm.contribution.ts
@@ -19,14 +19,14 @@ import { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/co
 import { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';
 import { SCMService } from 'vs/workbench/contrib/scm/common/scmService';
 import { IViewContainersRegistry, ViewContainerLocation, Extensions as ViewContainerExtensions, IViewsRegistry } from 'vs/workbench/common/views';
-import { SCMViewPaneContainer } from 'vs/workbench/contrib/scm/browser/scmViewPaneContainer';
-import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
+// import { SCMViewPaneContainer } from 'vs/workbench/contrib/scm/browser/scmViewPaneContainer';
+// import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
 import { ModesRegistry } from 'vs/editor/common/languages/modesRegistry';
 import { Codicon } from 'vs/base/common/codicons';
-import { registerIcon } from 'vs/platform/theme/common/iconRegistry';
-import { SCMViewPane } from 'vs/workbench/contrib/scm/browser/scmViewPane';
+// import { registerIcon } from 'vs/platform/theme/common/iconRegistry';
+// import { SCMViewPane } from 'vs/workbench/contrib/scm/browser/scmViewPane';
 import { SCMViewService } from 'vs/workbench/contrib/scm/browser/scmViewService';
-import { SCMRepositoriesViewPane } from 'vs/workbench/contrib/scm/browser/scmRepositoriesViewPane';
+// import { SCMRepositoriesViewPane } from 'vs/workbench/contrib/scm/browser/scmRepositoriesViewPane';
 import { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
 import { Context as SuggestContext } from 'vs/editor/contrib/suggest/browser/suggest';
 import { MANAGE_TRUST_COMMAND_ID, WorkspaceTrustContext } from 'vs/workbench/contrib/workspace/common/workspace';
@@ -43,18 +43,18 @@ ModesRegistry.registerLanguage({
 Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)
 	.registerWorkbenchContribution(DirtyDiffWorkbenchController, LifecyclePhase.Restored);
 
-const sourceControlViewIcon = registerIcon('source-control-view-icon', Codicon.sourceControl, localize('sourceControlViewIcon', 'View icon of the Source Control view.'));
+// const sourceControlViewIcon = registerIcon('source-control-view-icon', Codicon.sourceControl, localize('sourceControlViewIcon', 'View icon of the Source Control view.'));
 
-const viewContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({
-	id: VIEWLET_ID,
-	title: localize('source control', "Source Control"),
-	ctorDescriptor: new SyncDescriptor(SCMViewPaneContainer),
-	storageId: 'workbench.scm.views.state',
-	icon: sourceControlViewIcon,
-	alwaysUseContainerInfo: true,
-	order: 2,
-	hideIfEmpty: true,
-}, ViewContainerLocation.Sidebar, { doNotRegisterOpenCommand: true });
+// const viewContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({
+// 	id: VIEWLET_ID,
+// 	title: localize('source control', "Source Control"),
+// 	ctorDescriptor: new SyncDescriptor(SCMViewPaneContainer),
+// 	storageId: 'workbench.scm.views.state',
+// 	icon: sourceControlViewIcon,
+// 	alwaysUseContainerInfo: true,
+// 	order: 2,
+// 	hideIfEmpty: true,
+// }, ViewContainerLocation.Sidebar, { doNotRegisterOpenCommand: true });
 
 const viewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);
 
@@ -73,41 +73,41 @@ viewsRegistry.registerViewWelcomeContent(VIEW_PANE_ID, {
 	when: ContextKeyExpr.and(ContextKeyExpr.equals('scm.providerCount', 0), WorkspaceTrustContext.IsEnabled, WorkspaceTrustContext.IsTrusted.toNegated())
 });
 
-viewsRegistry.registerViews([{
-	id: VIEW_PANE_ID,
-	name: localize('source control', "Source Control"),
-	ctorDescriptor: new SyncDescriptor(SCMViewPane),
-	canToggleVisibility: true,
-	canMoveView: true,
-	weight: 80,
-	order: -999,
-	containerIcon: sourceControlViewIcon,
-	openCommandActionDescriptor: {
-		id: viewContainer.id,
-		mnemonicTitle: localize({ key: 'miViewSCM', comment: ['&& denotes a mnemonic'] }, "Source &&Control"),
-		keybindings: {
-			primary: 0,
-			win: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyG },
-			linux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyG },
-			mac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KeyG },
-		},
-		order: 2,
-	}
-}], viewContainer);
+// viewsRegistry.registerViews([{
+// 	id: VIEW_PANE_ID,
+// 	name: localize('source control', "Source Control"),
+// 	ctorDescriptor: new SyncDescriptor(SCMViewPane),
+// 	canToggleVisibility: true,
+// 	canMoveView: true,
+// 	weight: 80,
+// 	order: -999,
+// 	containerIcon: sourceControlViewIcon,
+// 	openCommandActionDescriptor: {
+// 		id: viewContainer.id,
+// 		mnemonicTitle: localize({ key: 'miViewSCM', comment: ['&& denotes a mnemonic'] }, "Source &&Control"),
+// 		keybindings: {
+// 			primary: 0,
+// 			win: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyG },
+// 			linux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyG },
+// 			mac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KeyG },
+// 		},
+// 		order: 2,
+// 	}
+// }], viewContainer);
 
-viewsRegistry.registerViews([{
-	id: REPOSITORIES_VIEW_PANE_ID,
-	name: localize('source control repositories', "Source Control Repositories"),
-	ctorDescriptor: new SyncDescriptor(SCMRepositoriesViewPane),
-	canToggleVisibility: true,
-	hideByDefault: true,
-	canMoveView: true,
-	weight: 20,
-	order: -1000,
-	when: ContextKeyExpr.and(ContextKeyExpr.has('scm.providerCount'), ContextKeyExpr.notEquals('scm.providerCount', 0)),
-	// readonly when = ContextKeyExpr.or(ContextKeyExpr.equals('config.scm.alwaysShowProviders', true), ContextKeyExpr.and(ContextKeyExpr.notEquals('scm.providerCount', 0), ContextKeyExpr.notEquals('scm.providerCount', 1)));
-	containerIcon: sourceControlViewIcon
-}], viewContainer);
+// viewsRegistry.registerViews([{
+// 	id: REPOSITORIES_VIEW_PANE_ID,
+// 	name: localize('source control repositories', "Source Control Repositories"),
+// 	ctorDescriptor: new SyncDescriptor(SCMRepositoriesViewPane),
+// 	canToggleVisibility: true,
+// 	hideByDefault: true,
+// 	canMoveView: true,
+// 	weight: 20,
+// 	order: -1000,
+// 	when: ContextKeyExpr.and(ContextKeyExpr.has('scm.providerCount'), ContextKeyExpr.notEquals('scm.providerCount', 0)),
+// 	// readonly when = ContextKeyExpr.or(ContextKeyExpr.equals('config.scm.alwaysShowProviders', true), ContextKeyExpr.and(ContextKeyExpr.notEquals('scm.providerCount', 0), ContextKeyExpr.notEquals('scm.providerCount', 1)));
+// 	containerIcon: sourceControlViewIcon
+// }], viewContainer);
 
 Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)
 	.registerWorkbenchContribution(SCMActiveResourceContextKeyController, LifecyclePhase.Restored);
-- 
2.39.2 (Apple Git-143)

