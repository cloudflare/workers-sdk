// This file has been automatically generated by capnp-es.
import * as $ from "capnp-es";

export const _capnpFileId = BigInt("0xb042d6da9e1721ad");
export const Type_Which = {
	UNKNOWN: 0,
	VOIDT: 1,
	BOOLT: 2,
	NUMBER: 3,
	PROMISE: 4,
	STRUCTURE: 5,
	STRING: 6,
	OBJECT: 7,
	ARRAY: 8,
	MAYBE: 9,
	DICT: 10,
	ONE_OF: 11,
	BUILTIN: 12,
	INTRINSIC: 13,
	FUNCTION: 14,
	JSG_IMPL: 15,
	JS_BUILTIN: 16,
} as const;
export type Type_Which = (typeof Type_Which)[keyof typeof Type_Which];
/**
 * A description of the C++ type.
 * It is as precise as needed for applications, and is mostly how the type looks from the js side.
 * */
export class Type extends $.Struct {
	static readonly UNKNOWN = Type_Which.UNKNOWN;
	static readonly VOIDT = Type_Which.VOIDT;
	static readonly BOOLT = Type_Which.BOOLT;
	static readonly NUMBER = Type_Which.NUMBER;
	static readonly PROMISE = Type_Which.PROMISE;
	static readonly STRUCTURE = Type_Which.STRUCTURE;
	static readonly STRING = Type_Which.STRING;
	static readonly OBJECT = Type_Which.OBJECT;
	static readonly ARRAY = Type_Which.ARRAY;
	static readonly MAYBE = Type_Which.MAYBE;
	static readonly DICT = Type_Which.DICT;
	static readonly ONE_OF = Type_Which.ONE_OF;
	static readonly BUILTIN = Type_Which.BUILTIN;
	static readonly INTRINSIC = Type_Which.INTRINSIC;
	static readonly FUNCTION = Type_Which.FUNCTION;
	static readonly JSG_IMPL = Type_Which.JSG_IMPL;
	static readonly JS_BUILTIN = Type_Which.JS_BUILTIN;
	static readonly _capnp = {
		displayName: "Type",
		id: "d2347ab301451a8c",
		size: new $.ObjectSize(8, 1),
	};
	get _isUnknown(): boolean {
		return $.utils.getUint16(0, this) === 0;
	}
	set unknown(_: true) {
		$.utils.setUint16(0, 0, this);
	}
	get _isVoidt(): boolean {
		return $.utils.getUint16(0, this) === 1;
	}
	set voidt(_: true) {
		$.utils.setUint16(0, 1, this);
	}
	get _isBoolt(): boolean {
		return $.utils.getUint16(0, this) === 2;
	}
	set boolt(_: true) {
		$.utils.setUint16(0, 2, this);
	}
	_adoptNumber(value: $.Orphan<NumberType>): void {
		$.utils.setUint16(0, 3, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownNumber(): $.Orphan<NumberType> {
		return $.utils.disown(this.number);
	}
	/**
	 * number type
	 * */
	get number(): NumberType {
		$.utils.testWhich("number", $.utils.getUint16(0, this), 3, this);
		return $.utils.getStruct(0, NumberType, this);
	}
	_hasNumber(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initNumber(): NumberType {
		$.utils.setUint16(0, 3, this);
		return $.utils.initStructAt(0, NumberType, this);
	}
	get _isNumber(): boolean {
		return $.utils.getUint16(0, this) === 3;
	}
	set number(value: NumberType) {
		$.utils.setUint16(0, 3, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptPromise(value: $.Orphan<PromiseType>): void {
		$.utils.setUint16(0, 4, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownPromise(): $.Orphan<PromiseType> {
		return $.utils.disown(this.promise);
	}
	/**
	 * jsg, kj Promise
	 * */
	get promise(): PromiseType {
		$.utils.testWhich("promise", $.utils.getUint16(0, this), 4, this);
		return $.utils.getStruct(0, PromiseType, this);
	}
	_hasPromise(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initPromise(): PromiseType {
		$.utils.setUint16(0, 4, this);
		return $.utils.initStructAt(0, PromiseType, this);
	}
	get _isPromise(): boolean {
		return $.utils.getUint16(0, this) === 4;
	}
	set promise(value: PromiseType) {
		$.utils.setUint16(0, 4, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptStructure(value: $.Orphan<StructureType>): void {
		$.utils.setUint16(0, 5, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownStructure(): $.Orphan<StructureType> {
		return $.utils.disown(this.structure);
	}
	/**
	 * jsg resource or struct
	 * */
	get structure(): StructureType {
		$.utils.testWhich("structure", $.utils.getUint16(0, this), 5, this);
		return $.utils.getStruct(0, StructureType, this);
	}
	_hasStructure(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initStructure(): StructureType {
		$.utils.setUint16(0, 5, this);
		return $.utils.initStructAt(0, StructureType, this);
	}
	get _isStructure(): boolean {
		return $.utils.getUint16(0, this) === 5;
	}
	set structure(value: StructureType) {
		$.utils.setUint16(0, 5, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptString(value: $.Orphan<StringType>): void {
		$.utils.setUint16(0, 6, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownString(): $.Orphan<StringType> {
		return $.utils.disown(this.string);
	}
	/**
	 * any string-like type
	 * */
	get string(): StringType {
		$.utils.testWhich("string", $.utils.getUint16(0, this), 6, this);
		return $.utils.getStruct(0, StringType, this);
	}
	_hasString(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initString(): StringType {
		$.utils.setUint16(0, 6, this);
		return $.utils.initStructAt(0, StringType, this);
	}
	get _isString(): boolean {
		return $.utils.getUint16(0, this) === 6;
	}
	set string(value: StringType) {
		$.utils.setUint16(0, 6, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	get _isObject(): boolean {
		return $.utils.getUint16(0, this) === 7;
	}
	set object(_: true) {
		$.utils.setUint16(0, 7, this);
	}
	_adoptArray(value: $.Orphan<ArrayType>): void {
		$.utils.setUint16(0, 8, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownArray(): $.Orphan<ArrayType> {
		return $.utils.disown(this.array);
	}
	/**
	 * Array or ArrayPtr
	 * */
	get array(): ArrayType {
		$.utils.testWhich("array", $.utils.getUint16(0, this), 8, this);
		return $.utils.getStruct(0, ArrayType, this);
	}
	_hasArray(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initArray(): ArrayType {
		$.utils.setUint16(0, 8, this);
		return $.utils.initStructAt(0, ArrayType, this);
	}
	get _isArray(): boolean {
		return $.utils.getUint16(0, this) === 8;
	}
	set array(value: ArrayType) {
		$.utils.setUint16(0, 8, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptMaybe(value: $.Orphan<MaybeType>): void {
		$.utils.setUint16(0, 9, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownMaybe(): $.Orphan<MaybeType> {
		return $.utils.disown(this.maybe);
	}
	/**
	 * kj::Maybe or jsg::Optional
	 * */
	get maybe(): MaybeType {
		$.utils.testWhich("maybe", $.utils.getUint16(0, this), 9, this);
		return $.utils.getStruct(0, MaybeType, this);
	}
	_hasMaybe(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initMaybe(): MaybeType {
		$.utils.setUint16(0, 9, this);
		return $.utils.initStructAt(0, MaybeType, this);
	}
	get _isMaybe(): boolean {
		return $.utils.getUint16(0, this) === 9;
	}
	set maybe(value: MaybeType) {
		$.utils.setUint16(0, 9, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptDict(value: $.Orphan<DictType>): void {
		$.utils.setUint16(0, 10, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownDict(): $.Orphan<DictType> {
		return $.utils.disown(this.dict);
	}
	/**
	 * jsg::Dict
	 * */
	get dict(): DictType {
		$.utils.testWhich("dict", $.utils.getUint16(0, this), 10, this);
		return $.utils.getStruct(0, DictType, this);
	}
	_hasDict(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initDict(): DictType {
		$.utils.setUint16(0, 10, this);
		return $.utils.initStructAt(0, DictType, this);
	}
	get _isDict(): boolean {
		return $.utils.getUint16(0, this) === 10;
	}
	set dict(value: DictType) {
		$.utils.setUint16(0, 10, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptOneOf(value: $.Orphan<OneOfType>): void {
		$.utils.setUint16(0, 11, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownOneOf(): $.Orphan<OneOfType> {
		return $.utils.disown(this.oneOf);
	}
	/**
	 * kj::OneOf
	 * */
	get oneOf(): OneOfType {
		$.utils.testWhich("oneOf", $.utils.getUint16(0, this), 11, this);
		return $.utils.getStruct(0, OneOfType, this);
	}
	_hasOneOf(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initOneOf(): OneOfType {
		$.utils.setUint16(0, 11, this);
		return $.utils.initStructAt(0, OneOfType, this);
	}
	get _isOneOf(): boolean {
		return $.utils.getUint16(0, this) === 11;
	}
	set oneOf(value: OneOfType) {
		$.utils.setUint16(0, 11, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptBuiltin(value: $.Orphan<BuiltinType>): void {
		$.utils.setUint16(0, 12, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownBuiltin(): $.Orphan<BuiltinType> {
		return $.utils.disown(this.builtin);
	}
	/**
	 * one of the builtin types
	 * */
	get builtin(): BuiltinType {
		$.utils.testWhich("builtin", $.utils.getUint16(0, this), 12, this);
		return $.utils.getStruct(0, BuiltinType, this);
	}
	_hasBuiltin(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initBuiltin(): BuiltinType {
		$.utils.setUint16(0, 12, this);
		return $.utils.initStructAt(0, BuiltinType, this);
	}
	get _isBuiltin(): boolean {
		return $.utils.getUint16(0, this) === 12;
	}
	set builtin(value: BuiltinType) {
		$.utils.setUint16(0, 12, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptIntrinsic(value: $.Orphan<IntrinsicType>): void {
		$.utils.setUint16(0, 13, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownIntrinsic(): $.Orphan<IntrinsicType> {
		return $.utils.disown(this.intrinsic);
	}
	/**
	 * one of v8 intrinsics
	 * */
	get intrinsic(): IntrinsicType {
		$.utils.testWhich("intrinsic", $.utils.getUint16(0, this), 13, this);
		return $.utils.getStruct(0, IntrinsicType, this);
	}
	_hasIntrinsic(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initIntrinsic(): IntrinsicType {
		$.utils.setUint16(0, 13, this);
		return $.utils.initStructAt(0, IntrinsicType, this);
	}
	get _isIntrinsic(): boolean {
		return $.utils.getUint16(0, this) === 13;
	}
	set intrinsic(value: IntrinsicType) {
		$.utils.setUint16(0, 13, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptFunction(value: $.Orphan<FunctionType>): void {
		$.utils.setUint16(0, 14, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownFunction(): $.Orphan<FunctionType> {
		return $.utils.disown(this.function);
	}
	/**
	 * jsg::Function
	 * */
	get function(): FunctionType {
		$.utils.testWhich("function", $.utils.getUint16(0, this), 14, this);
		return $.utils.getStruct(0, FunctionType, this);
	}
	_hasFunction(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initFunction(): FunctionType {
		$.utils.setUint16(0, 14, this);
		return $.utils.initStructAt(0, FunctionType, this);
	}
	get _isFunction(): boolean {
		return $.utils.getUint16(0, this) === 14;
	}
	set function(value: FunctionType) {
		$.utils.setUint16(0, 14, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptJsgImpl(value: $.Orphan<JsgImplType>): void {
		$.utils.setUint16(0, 15, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownJsgImpl(): $.Orphan<JsgImplType> {
		return $.utils.disown(this.jsgImpl);
	}
	/**
	 * jsg implementation type
	 * */
	get jsgImpl(): JsgImplType {
		$.utils.testWhich("jsgImpl", $.utils.getUint16(0, this), 15, this);
		return $.utils.getStruct(0, JsgImplType, this);
	}
	_hasJsgImpl(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initJsgImpl(): JsgImplType {
		$.utils.setUint16(0, 15, this);
		return $.utils.initStructAt(0, JsgImplType, this);
	}
	get _isJsgImpl(): boolean {
		return $.utils.getUint16(0, this) === 15;
	}
	set jsgImpl(value: JsgImplType) {
		$.utils.setUint16(0, 15, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptJsBuiltin(value: $.Orphan<JsBuiltinType>): void {
		$.utils.setUint16(0, 16, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownJsBuiltin(): $.Orphan<JsBuiltinType> {
		return $.utils.disown(this.jsBuiltin);
	}
	get jsBuiltin(): JsBuiltinType {
		$.utils.testWhich("jsBuiltin", $.utils.getUint16(0, this), 16, this);
		return $.utils.getStruct(0, JsBuiltinType, this);
	}
	_hasJsBuiltin(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initJsBuiltin(): JsBuiltinType {
		$.utils.setUint16(0, 16, this);
		return $.utils.initStructAt(0, JsBuiltinType, this);
	}
	get _isJsBuiltin(): boolean {
		return $.utils.getUint16(0, this) === 16;
	}
	set jsBuiltin(value: JsBuiltinType) {
		$.utils.setUint16(0, 16, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	toString(): string {
		return "Type_" + super.toString();
	}
	which(): Type_Which {
		return $.utils.getUint16(0, this) as Type_Which;
	}
}
/**
 * Any c++ number type
 * */
export class NumberType extends $.Struct {
	static readonly _capnp = {
		displayName: "NumberType",
		id: "afd4316863bdd80a",
		size: new $.ObjectSize(0, 1),
	};
	get name(): string {
		return $.utils.getText(0, this);
	}
	set name(value: string) {
		$.utils.setText(0, value, this);
	}
	toString(): string {
		return "NumberType_" + super.toString();
	}
}
/**
 * kj or jsg Promise<T>
 * */
export class PromiseType extends $.Struct {
	static readonly _capnp = {
		displayName: "PromiseType",
		id: "977eaa74d24bb2dc",
		size: new $.ObjectSize(0, 1),
	};
	_adoptValue(value: $.Orphan<Type>): void {
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownValue(): $.Orphan<Type> {
		return $.utils.disown(this.value);
	}
	get value(): Type {
		return $.utils.getStruct(0, Type, this);
	}
	_hasValue(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initValue(): Type {
		return $.utils.initStructAt(0, Type, this);
	}
	set value(value: Type) {
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	toString(): string {
		return "PromiseType_" + super.toString();
	}
}
/**
 * Structure types need to be resolved separately to prevent circular references with types
 * */
export class StructureType extends $.Struct {
	static readonly _capnp = {
		displayName: "StructureType",
		id: "9001b3522132305a",
		size: new $.ObjectSize(0, 2),
	};
	get name(): string {
		return $.utils.getText(0, this);
	}
	set name(value: string) {
		$.utils.setText(0, value, this);
	}
	get fullyQualifiedName(): string {
		return $.utils.getText(1, this);
	}
	set fullyQualifiedName(value: string) {
		$.utils.setText(1, value, this);
	}
	toString(): string {
		return "StructureType_" + super.toString();
	}
}
/**
 * any string or string-like type
 * */
export class StringType extends $.Struct {
	static readonly _capnp = {
		displayName: "StringType",
		id: "913621db0713d640",
		size: new $.ObjectSize(0, 1),
	};
	get name(): string {
		return $.utils.getText(0, this);
	}
	set name(value: string) {
		$.utils.setText(0, value, this);
	}
	toString(): string {
		return "StringType_" + super.toString();
	}
}
/**
 * v8::Intrinsic
 * */
export class IntrinsicType extends $.Struct {
	static readonly _capnp = {
		displayName: "IntrinsicType",
		id: "87c24648e89ccc02",
		size: new $.ObjectSize(0, 1),
	};
	get name(): string {
		return $.utils.getText(0, this);
	}
	set name(value: string) {
		$.utils.setText(0, value, this);
	}
	toString(): string {
		return "IntrinsicType_" + super.toString();
	}
}
/**
 * Array like structure
 * */
export class ArrayType extends $.Struct {
	static readonly _capnp = {
		displayName: "ArrayType",
		id: "f6d86da0d225932b",
		size: new $.ObjectSize(0, 2),
	};
	_adoptElement(value: $.Orphan<Type>): void {
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownElement(): $.Orphan<Type> {
		return $.utils.disown(this.element);
	}
	get element(): Type {
		return $.utils.getStruct(0, Type, this);
	}
	_hasElement(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initElement(): Type {
		return $.utils.initStructAt(0, Type, this);
	}
	set element(value: Type) {
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	get name(): string {
		return $.utils.getText(1, this);
	}
	set name(value: string) {
		$.utils.setText(1, value, this);
	}
	toString(): string {
		return "ArrayType_" + super.toString();
	}
}
/**
 * kj::Maybe, jsg::Optional, jsg::LenientOptional
 * */
export class MaybeType extends $.Struct {
	static readonly _capnp = {
		displayName: "MaybeType",
		id: "9d64649bff8a5cee",
		size: new $.ObjectSize(0, 2),
	};
	_adoptValue(value: $.Orphan<Type>): void {
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownValue(): $.Orphan<Type> {
		return $.utils.disown(this.value);
	}
	get value(): Type {
		return $.utils.getStruct(0, Type, this);
	}
	_hasValue(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initValue(): Type {
		return $.utils.initStructAt(0, Type, this);
	}
	set value(value: Type) {
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	get name(): string {
		return $.utils.getText(1, this);
	}
	set name(value: string) {
		$.utils.setText(1, value, this);
	}
	toString(): string {
		return "MaybeType_" + super.toString();
	}
}
/**
 * jsg::dict
 * */
export class DictType extends $.Struct {
	static readonly _capnp = {
		displayName: "DictType",
		id: "b7d8e1ee6205d554",
		size: new $.ObjectSize(0, 2),
	};
	_adoptKey(value: $.Orphan<Type>): void {
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownKey(): $.Orphan<Type> {
		return $.utils.disown(this.key);
	}
	get key(): Type {
		return $.utils.getStruct(0, Type, this);
	}
	_hasKey(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initKey(): Type {
		return $.utils.initStructAt(0, Type, this);
	}
	set key(value: Type) {
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptValue(value: $.Orphan<Type>): void {
		$.utils.adopt(value, $.utils.getPointer(1, this));
	}
	_disownValue(): $.Orphan<Type> {
		return $.utils.disown(this.value);
	}
	get value(): Type {
		return $.utils.getStruct(1, Type, this);
	}
	_hasValue(): boolean {
		return !$.utils.isNull($.utils.getPointer(1, this));
	}
	_initValue(): Type {
		return $.utils.initStructAt(1, Type, this);
	}
	set value(value: Type) {
		$.utils.copyFrom(value, $.utils.getPointer(1, this));
	}
	toString(): string {
		return "DictType_" + super.toString();
	}
}
/**
 * kj::OneOf
 * */
export class OneOfType extends $.Struct {
	static readonly _capnp = {
		displayName: "OneOfType",
		id: "95216521d1f195ae",
		size: new $.ObjectSize(0, 1),
	};
	static _Variants: $.ListCtor<Type>;
	_adoptVariants(value: $.Orphan<$.List<Type>>): void {
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownVariants(): $.Orphan<$.List<Type>> {
		return $.utils.disown(this.variants);
	}
	get variants(): $.List<Type> {
		return $.utils.getList(0, OneOfType._Variants, this);
	}
	_hasVariants(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initVariants(length: number): $.List<Type> {
		return $.utils.initList(0, OneOfType._Variants, length, this);
	}
	set variants(value: $.List<Type>) {
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	toString(): string {
		return "OneOfType_" + super.toString();
	}
}
export const BuiltinType_Type = {
	V8UINT8ARRAY: 0,
	V8ARRAY_BUFFER_VIEW: 1,
	JSG_BUFFER_SOURCE: 2,
	KJ_DATE: 3,
	V8FUNCTION: 4,
	V8ARRAY_BUFFER: 5,
} as const;
export type BuiltinType_Type =
	(typeof BuiltinType_Type)[keyof typeof BuiltinType_Type];
/**
 * One of the types provided by the JS or Runtime platform.
 * */
export class BuiltinType extends $.Struct {
	static readonly Type = BuiltinType_Type;
	static readonly _capnp = {
		displayName: "BuiltinType",
		id: "96dfb79b276b3379",
		size: new $.ObjectSize(8, 0),
	};
	get type(): BuiltinType_Type {
		return $.utils.getUint16(0, this) as BuiltinType_Type;
	}
	set type(value: BuiltinType_Type) {
		$.utils.setUint16(0, value, this);
	}
	toString(): string {
		return "BuiltinType_" + super.toString();
	}
}
/**
 * jsg::Function type
 * */
export class FunctionType extends $.Struct {
	static readonly _capnp = {
		displayName: "FunctionType",
		id: "d7c3505ac05e5fad",
		size: new $.ObjectSize(0, 2),
	};
	static _Args: $.ListCtor<Type>;
	_adoptReturnType(value: $.Orphan<Type>): void {
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownReturnType(): $.Orphan<Type> {
		return $.utils.disown(this.returnType);
	}
	get returnType(): Type {
		return $.utils.getStruct(0, Type, this);
	}
	_hasReturnType(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initReturnType(): Type {
		return $.utils.initStructAt(0, Type, this);
	}
	set returnType(value: Type) {
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptArgs(value: $.Orphan<$.List<Type>>): void {
		$.utils.adopt(value, $.utils.getPointer(1, this));
	}
	_disownArgs(): $.Orphan<$.List<Type>> {
		return $.utils.disown(this.args);
	}
	get args(): $.List<Type> {
		return $.utils.getList(1, FunctionType._Args, this);
	}
	_hasArgs(): boolean {
		return !$.utils.isNull($.utils.getPointer(1, this));
	}
	_initArgs(length: number): $.List<Type> {
		return $.utils.initList(1, FunctionType._Args, length, this);
	}
	set args(value: $.List<Type>) {
		$.utils.copyFrom(value, $.utils.getPointer(1, this));
	}
	toString(): string {
		return "FunctionType_" + super.toString();
	}
}
export const JsgImplType_Type = {
	CONFIGURATION: 0,
	V8ISOLATE: 1,
	JSG_LOCK: 2,
	JSG_TYPE_HANDLER: 3,
	JSG_UNIMPLEMENTED: 4,
	JSG_VARARGS: 5,
	JSG_SELF_REF: 6,
	V8FUNCTION_CALLBACK_INFO: 7,
	V8PROPERTY_CALLBACK_INFO: 8,
	JSG_NAME: 9,
} as const;
export type JsgImplType_Type =
	(typeof JsgImplType_Type)[keyof typeof JsgImplType_Type];
/**
 * one of the internal jsg types that are not exposed directly but handled specially
 * */
export class JsgImplType extends $.Struct {
	static readonly Type = JsgImplType_Type;
	static readonly _capnp = {
		displayName: "JsgImplType",
		id: "e0dfbe1216e6985e",
		size: new $.ObjectSize(8, 0),
	};
	get type(): JsgImplType_Type {
		return $.utils.getUint16(0, this) as JsgImplType_Type;
	}
	set type(value: JsgImplType_Type) {
		$.utils.setUint16(0, value, this);
	}
	toString(): string {
		return "JsgImplType_" + super.toString();
	}
}
/**
 * A description of either JSG_RESOURCE or JSG_STRUCT
 * */
export class Structure extends $.Struct {
	static readonly _capnp = {
		displayName: "Structure",
		id: "c9aee5d3d27484f2",
		size: new $.ObjectSize(8, 12),
	};
	static _Members: $.ListCtor<Member>;
	static _BuiltinModules: $.ListCtor<Module>;
	/**
	 * Structure name
	 * */
	get name(): string {
		return $.utils.getText(0, this);
	}
	set name(value: string) {
		$.utils.setText(0, value, this);
	}
	/**
	 * All members in declaration order
	 * */
	get fullyQualifiedName(): string {
		return $.utils.getText(3, this);
	}
	set fullyQualifiedName(value: string) {
		$.utils.setText(3, value, this);
	}
	_adoptMembers(value: $.Orphan<$.List<Member>>): void {
		$.utils.adopt(value, $.utils.getPointer(1, this));
	}
	_disownMembers(): $.Orphan<$.List<Member>> {
		return $.utils.disown(this.members);
	}
	/**
	 * base type
	 * */
	get members(): $.List<Member> {
		return $.utils.getList(1, Structure._Members, this);
	}
	_hasMembers(): boolean {
		return !$.utils.isNull($.utils.getPointer(1, this));
	}
	_initMembers(length: number): $.List<Member> {
		return $.utils.initList(1, Structure._Members, length, this);
	}
	set members(value: $.List<Member>) {
		$.utils.copyFrom(value, $.utils.getPointer(1, this));
	}
	_adoptExtends(value: $.Orphan<Type>): void {
		$.utils.adopt(value, $.utils.getPointer(2, this));
	}
	_disownExtends(): $.Orphan<Type> {
		return $.utils.disown(this.extends);
	}
	/**
	 * true if the structure is iterable
	 * */
	get extends(): Type {
		return $.utils.getStruct(2, Type, this);
	}
	_hasExtends(): boolean {
		return !$.utils.isNull($.utils.getPointer(2, this));
	}
	_initExtends(): Type {
		return $.utils.initStructAt(2, Type, this);
	}
	set extends(value: Type) {
		$.utils.copyFrom(value, $.utils.getPointer(2, this));
	}
	/**
	 * true if the structure is async iterable
	 * */
	get iterable(): boolean {
		return $.utils.getBit(0, this);
	}
	set iterable(value: boolean) {
		$.utils.setBit(0, value, this);
	}
	_adoptIterator(value: $.Orphan<Method>): void {
		$.utils.adopt(value, $.utils.getPointer(4, this));
	}
	_disownIterator(): $.Orphan<Method> {
		return $.utils.disown(this.iterator);
	}
	/**
	 * Fully-qualified structure name including namespaces and parents
	 * */
	get iterator(): Method {
		return $.utils.getStruct(4, Method, this);
	}
	_hasIterator(): boolean {
		return !$.utils.isNull($.utils.getPointer(4, this));
	}
	_initIterator(): Method {
		return $.utils.initStructAt(4, Method, this);
	}
	set iterator(value: Method) {
		$.utils.copyFrom(value, $.utils.getPointer(4, this));
	}
	/**
	 * Method returning iterator if the structure is iterable
	 * */
	get asyncIterable(): boolean {
		return $.utils.getBit(1, this);
	}
	set asyncIterable(value: boolean) {
		$.utils.setBit(1, value, this);
	}
	_adoptAsyncIterator(value: $.Orphan<Method>): void {
		$.utils.adopt(value, $.utils.getPointer(5, this));
	}
	_disownAsyncIterator(): $.Orphan<Method> {
		return $.utils.disown(this.asyncIterator);
	}
	/**
	 * Method returning async iterator if the structure is async iterable
	 * */
	get asyncIterator(): Method {
		return $.utils.getStruct(5, Method, this);
	}
	_hasAsyncIterator(): boolean {
		return !$.utils.isNull($.utils.getPointer(5, this));
	}
	_initAsyncIterator(): Method {
		return $.utils.initStructAt(5, Method, this);
	}
	set asyncIterator(value: Method) {
		$.utils.copyFrom(value, $.utils.getPointer(5, this));
	}
	/**
	 * See `JSG_TS_ROOT`'s documentation in the `## TypeScript` section of the JSG README.md.
	 * If `JSG_(STRUCT_)TS_ROOT` is declared for a type, this value will be `true`.
	 * */
	get disposable(): boolean {
		return $.utils.getBit(3, this);
	}
	set disposable(value: boolean) {
		$.utils.setBit(3, value, this);
	}
	_adoptDispose(value: $.Orphan<Method>): void {
		$.utils.adopt(value, $.utils.getPointer(10, this));
	}
	_disownDispose(): $.Orphan<Method> {
		return $.utils.disown(this.dispose);
	}
	/**
	 * See `JSG_TS_OVERRIDE`'s documentation in the `## TypeScript` section of the JSG README.md.
	 * If `JSG_(STRUCT_)TS_OVERRIDE` is declared for a type, this value will be the contents of the
	 * macro declaration verbatim.
	 * */
	get dispose(): Method {
		return $.utils.getStruct(10, Method, this);
	}
	_hasDispose(): boolean {
		return !$.utils.isNull($.utils.getPointer(10, this));
	}
	_initDispose(): Method {
		return $.utils.initStructAt(10, Method, this);
	}
	set dispose(value: Method) {
		$.utils.copyFrom(value, $.utils.getPointer(10, this));
	}
	/**
	 * See `JSG_TS_DEFINE`'s documentation in the `## TypeScript` section of the JSG README.md.
	 * If `JSG_(STRUCT_)TS_DEFINE` is declared for a type, this value will be the contents of the
	 * macro declaration verbatim.
	 * */
	get asyncDisposable(): boolean {
		return $.utils.getBit(4, this);
	}
	set asyncDisposable(value: boolean) {
		$.utils.setBit(4, value, this);
	}
	_adoptAsyncDispose(value: $.Orphan<Method>): void {
		$.utils.adopt(value, $.utils.getPointer(11, this));
	}
	_disownAsyncDispose(): $.Orphan<Method> {
		return $.utils.disown(this.asyncDispose);
	}
	/**
	 * If this type is callable as a function, the signature of said function. Otherwise, null.
	 * */
	get asyncDispose(): Method {
		return $.utils.getStruct(11, Method, this);
	}
	_hasAsyncDispose(): boolean {
		return !$.utils.isNull($.utils.getPointer(11, this));
	}
	_initAsyncDispose(): Method {
		return $.utils.initStructAt(11, Method, this);
	}
	set asyncDispose(value: Method) {
		$.utils.copyFrom(value, $.utils.getPointer(11, this));
	}
	/**
	 * List of all builtin modules provided by the context.
	 * */
	get tsRoot(): boolean {
		return $.utils.getBit(2, this);
	}
	set tsRoot(value: boolean) {
		$.utils.setBit(2, value, this);
	}
	/**
	 * true if the structure is disposable
	 * */
	get tsOverride(): string {
		return $.utils.getText(6, this);
	}
	set tsOverride(value: string) {
		$.utils.setText(6, value, this);
	}
	/**
	 * dispose method
	 * */
	get tsDefine(): string {
		return $.utils.getText(7, this);
	}
	set tsDefine(value: string) {
		$.utils.setText(7, value, this);
	}
	_adoptCallable(value: $.Orphan<FunctionType>): void {
		$.utils.adopt(value, $.utils.getPointer(8, this));
	}
	_disownCallable(): $.Orphan<FunctionType> {
		return $.utils.disown(this.callable);
	}
	/**
	 * true if the structure is async disposable
	 * */
	get callable(): FunctionType {
		return $.utils.getStruct(8, FunctionType, this);
	}
	_hasCallable(): boolean {
		return !$.utils.isNull($.utils.getPointer(8, this));
	}
	_initCallable(): FunctionType {
		return $.utils.initStructAt(8, FunctionType, this);
	}
	set callable(value: FunctionType) {
		$.utils.copyFrom(value, $.utils.getPointer(8, this));
	}
	_adoptBuiltinModules(value: $.Orphan<$.List<Module>>): void {
		$.utils.adopt(value, $.utils.getPointer(9, this));
	}
	_disownBuiltinModules(): $.Orphan<$.List<Module>> {
		return $.utils.disown(this.builtinModules);
	}
	/**
	 * asyncDispose method
	 * */
	get builtinModules(): $.List<Module> {
		return $.utils.getList(9, Structure._BuiltinModules, this);
	}
	_hasBuiltinModules(): boolean {
		return !$.utils.isNull($.utils.getPointer(9, this));
	}
	_initBuiltinModules(length: number): $.List<Module> {
		return $.utils.initList(9, Structure._BuiltinModules, length, this);
	}
	set builtinModules(value: $.List<Module>) {
		$.utils.copyFrom(value, $.utils.getPointer(9, this));
	}
	toString(): string {
		return "Structure_" + super.toString();
	}
}
/**
 * nested type
 * */
export class Member_Nested extends $.Struct {
	static readonly _capnp = {
		displayName: "nested",
		id: "cc1920702876b1f6",
		size: new $.ObjectSize(8, 2),
	};
	_adoptStructure(value: $.Orphan<Structure>): void {
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownStructure(): $.Orphan<Structure> {
		return $.utils.disown(this.structure);
	}
	get structure(): Structure {
		return $.utils.getStruct(0, Structure, this);
	}
	_hasStructure(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initStructure(): Structure {
		return $.utils.initStructAt(0, Structure, this);
	}
	set structure(value: Structure) {
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	/**
	 * For JSG_NESTED_TYPE_NAMED, if name is different to structure
	 * */
	get name(): string {
		return $.utils.getText(1, this);
	}
	set name(value: string) {
		$.utils.setText(1, value, this);
	}
	toString(): string {
		return "Member_Nested_" + super.toString();
	}
}
export const Member_Which = {
	METHOD: 0,
	PROPERTY: 1,
	NESTED: 2,
	CONSTANT: 3,
	CONSTRUCTOR: 4,
} as const;
export type Member_Which = (typeof Member_Which)[keyof typeof Member_Which];
/**
 * One of structure members
 * */
export class Member extends $.Struct {
	static readonly METHOD = Member_Which.METHOD;
	static readonly PROPERTY = Member_Which.PROPERTY;
	static readonly NESTED = Member_Which.NESTED;
	static readonly CONSTANT = Member_Which.CONSTANT;
	static readonly CONSTRUCTOR = Member_Which.CONSTRUCTOR;
	static readonly _capnp = {
		displayName: "Member",
		id: "85c316fd4114aba7",
		size: new $.ObjectSize(8, 2),
	};
	_adoptMethod(value: $.Orphan<Method>): void {
		$.utils.setUint16(0, 0, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownMethod(): $.Orphan<Method> {
		return $.utils.disown(this.method);
	}
	/**
	 * any kind of method
	 * */
	get method(): Method {
		$.utils.testWhich("method", $.utils.getUint16(0, this), 0, this);
		return $.utils.getStruct(0, Method, this);
	}
	_hasMethod(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initMethod(): Method {
		$.utils.setUint16(0, 0, this);
		return $.utils.initStructAt(0, Method, this);
	}
	get _isMethod(): boolean {
		return $.utils.getUint16(0, this) === 0;
	}
	set method(value: Method) {
		$.utils.setUint16(0, 0, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptProperty(value: $.Orphan<Property>): void {
		$.utils.setUint16(0, 1, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownProperty(): $.Orphan<Property> {
		return $.utils.disown(this.property);
	}
	/**
	 * any kind of property
	 * */
	get property(): Property {
		$.utils.testWhich("property", $.utils.getUint16(0, this), 1, this);
		return $.utils.getStruct(0, Property, this);
	}
	_hasProperty(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initProperty(): Property {
		$.utils.setUint16(0, 1, this);
		return $.utils.initStructAt(0, Property, this);
	}
	get _isProperty(): boolean {
		return $.utils.getUint16(0, this) === 1;
	}
	set property(value: Property) {
		$.utils.setUint16(0, 1, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	/**
	 * nested type
	 * */
	get nested(): Member_Nested {
		$.utils.testWhich("nested", $.utils.getUint16(0, this), 2, this);
		return $.utils.getAs(Member_Nested, this);
	}
	_initNested(): Member_Nested {
		$.utils.setUint16(0, 2, this);
		return $.utils.getAs(Member_Nested, this);
	}
	get _isNested(): boolean {
		return $.utils.getUint16(0, this) === 2;
	}
	set nested(_: true) {
		$.utils.setUint16(0, 2, this);
	}
	_adoptConstant(value: $.Orphan<Constant>): void {
		$.utils.setUint16(0, 3, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownConstant(): $.Orphan<Constant> {
		return $.utils.disown(this.constant);
	}
	/**
	 * static constant
	 * */
	get constant(): Constant {
		$.utils.testWhich("constant", $.utils.getUint16(0, this), 3, this);
		return $.utils.getStruct(0, Constant, this);
	}
	_hasConstant(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initConstant(): Constant {
		$.utils.setUint16(0, 3, this);
		return $.utils.initStructAt(0, Constant, this);
	}
	get _isConstant(): boolean {
		return $.utils.getUint16(0, this) === 3;
	}
	set constant(value: Constant) {
		$.utils.setUint16(0, 3, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptConstructor(value: $.Orphan<Constructor>): void {
		$.utils.setUint16(0, 4, this);
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownConstructor(): $.Orphan<Constructor> {
		return $.utils.disown(this.constructor);
	}
	/**
	 * structure constructor
	 * */
	get $constructor(): Constructor {
		$.utils.testWhich("constructor", $.utils.getUint16(0, this), 4, this);
		return $.utils.getStruct(0, Constructor, this);
	}
	_hasConstructor(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initConstructor(): Constructor {
		$.utils.setUint16(0, 4, this);
		return $.utils.initStructAt(0, Constructor, this);
	}
	get _isConstructor(): boolean {
		return $.utils.getUint16(0, this) === 4;
	}
	set $constructor(value: Constructor) {
		$.utils.setUint16(0, 4, this);
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	toString(): string {
		return "Member_" + super.toString();
	}
	which(): Member_Which {
		return $.utils.getUint16(0, this) as Member_Which;
	}
}
export class Method extends $.Struct {
	static readonly _capnp = {
		displayName: "Method",
		id: "a0a20f19ed7321e8",
		size: new $.ObjectSize(8, 3),
	};
	static _Args: $.ListCtor<Type>;
	get name(): string {
		return $.utils.getText(0, this);
	}
	set name(value: string) {
		$.utils.setText(0, value, this);
	}
	_adoptReturnType(value: $.Orphan<Type>): void {
		$.utils.adopt(value, $.utils.getPointer(1, this));
	}
	_disownReturnType(): $.Orphan<Type> {
		return $.utils.disown(this.returnType);
	}
	get returnType(): Type {
		return $.utils.getStruct(1, Type, this);
	}
	_hasReturnType(): boolean {
		return !$.utils.isNull($.utils.getPointer(1, this));
	}
	_initReturnType(): Type {
		return $.utils.initStructAt(1, Type, this);
	}
	set returnType(value: Type) {
		$.utils.copyFrom(value, $.utils.getPointer(1, this));
	}
	_adoptArgs(value: $.Orphan<$.List<Type>>): void {
		$.utils.adopt(value, $.utils.getPointer(2, this));
	}
	_disownArgs(): $.Orphan<$.List<Type>> {
		return $.utils.disown(this.args);
	}
	get args(): $.List<Type> {
		return $.utils.getList(2, Method._Args, this);
	}
	_hasArgs(): boolean {
		return !$.utils.isNull($.utils.getPointer(2, this));
	}
	_initArgs(length: number): $.List<Type> {
		return $.utils.initList(2, Method._Args, length, this);
	}
	set args(value: $.List<Type>) {
		$.utils.copyFrom(value, $.utils.getPointer(2, this));
	}
	get static(): boolean {
		return $.utils.getBit(0, this);
	}
	set static(value: boolean) {
		$.utils.setBit(0, value, this);
	}
	toString(): string {
		return "Method_" + super.toString();
	}
}
export class Property extends $.Struct {
	static readonly _capnp = {
		displayName: "Property",
		id: "e1d238e9fecd3757",
		size: new $.ObjectSize(8, 2),
	};
	get name(): string {
		return $.utils.getText(0, this);
	}
	set name(value: string) {
		$.utils.setText(0, value, this);
	}
	_adoptType(value: $.Orphan<Type>): void {
		$.utils.adopt(value, $.utils.getPointer(1, this));
	}
	_disownType(): $.Orphan<Type> {
		return $.utils.disown(this.type);
	}
	get type(): Type {
		return $.utils.getStruct(1, Type, this);
	}
	_hasType(): boolean {
		return !$.utils.isNull($.utils.getPointer(1, this));
	}
	_initType(): Type {
		return $.utils.initStructAt(1, Type, this);
	}
	set type(value: Type) {
		$.utils.copyFrom(value, $.utils.getPointer(1, this));
	}
	get readonly(): boolean {
		return $.utils.getBit(0, this);
	}
	set readonly(value: boolean) {
		$.utils.setBit(0, value, this);
	}
	get lazy(): boolean {
		return $.utils.getBit(1, this);
	}
	set lazy(value: boolean) {
		$.utils.setBit(1, value, this);
	}
	get prototype(): boolean {
		return $.utils.getBit(2, this);
	}
	set prototype(value: boolean) {
		$.utils.setBit(2, value, this);
	}
	toString(): string {
		return "Property_" + super.toString();
	}
}
/**
 * static constant in the resource
 * */
export class Constant extends $.Struct {
	static readonly _capnp = {
		displayName: "Constant",
		id: "e354a1a55c4cfc59",
		size: new $.ObjectSize(8, 1),
	};
	get name(): string {
		return $.utils.getText(0, this);
	}
	set name(value: string) {
		$.utils.setText(0, value, this);
	}
	/**
	 * TODO: we may need a union here
	 * */
	get value(): bigint {
		return $.utils.getInt64(0, this);
	}
	set value(value: bigint) {
		$.utils.setInt64(0, value, this);
	}
	toString(): string {
		return "Constant_" + super.toString();
	}
}
export class Constructor extends $.Struct {
	static readonly _capnp = {
		displayName: "Constructor",
		id: "f4610fdb47099d17",
		size: new $.ObjectSize(0, 1),
	};
	static _Args: $.ListCtor<Type>;
	_adoptArgs(value: $.Orphan<$.List<Type>>): void {
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownArgs(): $.Orphan<$.List<Type>> {
		return $.utils.disown(this.args);
	}
	get args(): $.List<Type> {
		return $.utils.getList(0, Constructor._Args, this);
	}
	_hasArgs(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initArgs(length: number): $.List<Type> {
		return $.utils.initList(0, Constructor._Args, length, this);
	}
	set args(value: $.List<Type>) {
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	toString(): string {
		return "Constructor_" + super.toString();
	}
}
export const Module_Which = {
	STRUCTURE_NAME: 0,
	TS_DECLARATIONS: 1,
} as const;
export type Module_Which = (typeof Module_Which)[keyof typeof Module_Which];
export class Module extends $.Struct {
	static readonly STRUCTURE_NAME = Module_Which.STRUCTURE_NAME;
	static readonly TS_DECLARATIONS = Module_Which.TS_DECLARATIONS;
	static readonly _capnp = {
		displayName: "Module",
		id: "cd4221e3248069bd",
		size: new $.ObjectSize(8, 2),
	};
	/**
	 * if anyone ever needs module type, it can be implemented by either fixing the Modules reference
	 * problem above or copying the original enum.
	 * type @1 :Modules.ModuleType;
	 * */
	get specifier(): string {
		return $.utils.getText(0, this);
	}
	set specifier(value: string) {
		$.utils.setText(0, value, this);
	}
	get structureName(): string {
		$.utils.testWhich("structureName", $.utils.getUint16(0, this), 0, this);
		return $.utils.getText(1, this);
	}
	get _isStructureName(): boolean {
		return $.utils.getUint16(0, this) === 0;
	}
	set structureName(value: string) {
		$.utils.setUint16(0, 0, this);
		$.utils.setText(1, value, this);
	}
	get tsDeclarations(): string {
		$.utils.testWhich("tsDeclarations", $.utils.getUint16(0, this), 1, this);
		return $.utils.getText(1, this);
	}
	get _isTsDeclarations(): boolean {
		return $.utils.getUint16(0, this) === 1;
	}
	set tsDeclarations(value: string) {
		$.utils.setUint16(0, 1, this);
		$.utils.setText(1, value, this);
	}
	toString(): string {
		return "Module_" + super.toString();
	}
	which(): Module_Which {
		return $.utils.getUint16(0, this) as Module_Which;
	}
}
/**
 * Collection of related structures
 * */
export class StructureGroups_StructureGroup extends $.Struct {
	static readonly _capnp = {
		displayName: "StructureGroup",
		id: "fe89d9d03a268a31",
		size: new $.ObjectSize(0, 2),
	};
	static _Structures: $.ListCtor<Structure>;
	get name(): string {
		return $.utils.getText(0, this);
	}
	set name(value: string) {
		$.utils.setText(0, value, this);
	}
	_adoptStructures(value: $.Orphan<$.List<Structure>>): void {
		$.utils.adopt(value, $.utils.getPointer(1, this));
	}
	_disownStructures(): $.Orphan<$.List<Structure>> {
		return $.utils.disown(this.structures);
	}
	get structures(): $.List<Structure> {
		return $.utils.getList(1, StructureGroups_StructureGroup._Structures, this);
	}
	_hasStructures(): boolean {
		return !$.utils.isNull($.utils.getPointer(1, this));
	}
	_initStructures(length: number): $.List<Structure> {
		return $.utils.initList(
			1,
			StructureGroups_StructureGroup._Structures,
			length,
			this
		);
	}
	set structures(value: $.List<Structure>) {
		$.utils.copyFrom(value, $.utils.getPointer(1, this));
	}
	toString(): string {
		return "StructureGroups_StructureGroup_" + super.toString();
	}
}
/**
 * Collection of structure groups, consumed by TypeScript definitions generator
 * */
export class StructureGroups extends $.Struct {
	static readonly StructureGroup = StructureGroups_StructureGroup;
	static readonly _capnp = {
		displayName: "StructureGroups",
		id: "ed8c71dbb06eb831",
		size: new $.ObjectSize(0, 2),
	};
	static _Groups: $.ListCtor<StructureGroups_StructureGroup>;
	static _Modules: $.ListCtor<Module>;
	_adoptGroups(value: $.Orphan<$.List<StructureGroups_StructureGroup>>): void {
		$.utils.adopt(value, $.utils.getPointer(0, this));
	}
	_disownGroups(): $.Orphan<$.List<StructureGroups_StructureGroup>> {
		return $.utils.disown(this.groups);
	}
	get groups(): $.List<StructureGroups_StructureGroup> {
		return $.utils.getList(0, StructureGroups._Groups, this);
	}
	_hasGroups(): boolean {
		return !$.utils.isNull($.utils.getPointer(0, this));
	}
	_initGroups(length: number): $.List<StructureGroups_StructureGroup> {
		return $.utils.initList(0, StructureGroups._Groups, length, this);
	}
	set groups(value: $.List<StructureGroups_StructureGroup>) {
		$.utils.copyFrom(value, $.utils.getPointer(0, this));
	}
	_adoptModules(value: $.Orphan<$.List<Module>>): void {
		$.utils.adopt(value, $.utils.getPointer(1, this));
	}
	_disownModules(): $.Orphan<$.List<Module>> {
		return $.utils.disown(this.modules);
	}
	get modules(): $.List<Module> {
		return $.utils.getList(1, StructureGroups._Modules, this);
	}
	_hasModules(): boolean {
		return !$.utils.isNull($.utils.getPointer(1, this));
	}
	_initModules(length: number): $.List<Module> {
		return $.utils.initList(1, StructureGroups._Modules, length, this);
	}
	set modules(value: $.List<Module>) {
		$.utils.copyFrom(value, $.utils.getPointer(1, this));
	}
	toString(): string {
		return "StructureGroups_" + super.toString();
	}
}
/**
 * special type for properties whose value is supplied by built-in javascript
 * */
export class JsBuiltinType extends $.Struct {
	static readonly _capnp = {
		displayName: "JsBuiltinType",
		id: "ccf1cde29b10a0bb",
		size: new $.ObjectSize(0, 2),
	};
	/**
	 * module from which the property is imported
	 * */
	get module(): string {
		return $.utils.getText(0, this);
	}
	set module(value: string) {
		$.utils.setText(0, value, this);
	}
	/**
	 * export name of the property
	 * */
	get export(): string {
		return $.utils.getText(1, this);
	}
	set export(value: string) {
		$.utils.setText(1, value, this);
	}
	toString(): string {
		return "JsBuiltinType_" + super.toString();
	}
}
OneOfType._Variants = $.CompositeList(Type);
FunctionType._Args = $.CompositeList(Type);
Structure._Members = $.CompositeList(Member);
Structure._BuiltinModules = $.CompositeList(Module);
Method._Args = $.CompositeList(Type);
Constructor._Args = $.CompositeList(Type);
StructureGroups_StructureGroup._Structures = $.CompositeList(Structure);
StructureGroups._Groups = $.CompositeList(StructureGroups_StructureGroup);
StructureGroups._Modules = $.CompositeList(Module);
