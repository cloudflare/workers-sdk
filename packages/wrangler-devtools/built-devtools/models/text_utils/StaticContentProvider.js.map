{"version":3,"file":"StaticContentProvider.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/StaticContentProvider.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAM7B,OAAO,EAAC,sBAAsB,EAAC,MAAM,gBAAgB,CAAC;AAEtD,MAAM,OAAO,qBAAqB;IACf,kBAAkB,CAAkC;IACpD,mBAAmB,CAAmC;IACtD,WAAW,CAAiC;IAE7D,YACI,UAA2C,EAAE,WAA6C,EAC1F,WAA2C;QAC7C,IAAI,CAAC,kBAAkB,GAAG,UAAU,CAAC;QACrC,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,UAAU,CACb,UAA2C,EAAE,WAA6C,EAC1F,OAAe;QACjB,MAAM,WAAW,GAAG,GAGjB,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAC,OAAO,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QACnD,OAAO,IAAI,qBAAqB,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IACzE,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED,cAAc;QACZ,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,KAAa,EAAE,aAAsB,EAAE,OAAgB;QAC3E,MAAM,EAAC,OAAO,EAAC,GAAI,MAAM,IAAI,CAAC,WAAW,EAGvC,CAAC;QACH,OAAO,OAAO,CAAC,CAAC,CAAC,sBAAsB,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACvF,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport type {ContentProvider, DeferredContent, SearchMatch} from './ContentProvider.js';\nimport {performSearchInContent} from './TextUtils.js';\n\nexport class StaticContentProvider implements ContentProvider {\n  private readonly contentURLInternal: Platform.DevToolsPath.UrlString;\n  private readonly contentTypeInternal: Common.ResourceType.ResourceType;\n  private readonly lazyContent: () => Promise<DeferredContent>;\n\n  constructor(\n      contentURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      lazyContent: () => Promise<DeferredContent>) {\n    this.contentURLInternal = contentURL;\n    this.contentTypeInternal = contentType;\n    this.lazyContent = lazyContent;\n  }\n\n  static fromString(\n      contentURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      content: string): StaticContentProvider {\n    const lazyContent = (): Promise<{\n      content: string,\n      isEncoded: boolean,\n    }> => Promise.resolve({content, isEncoded: false});\n    return new StaticContentProvider(contentURL, contentType, lazyContent);\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.contentURLInternal;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.contentTypeInternal;\n  }\n\n  contentEncoded(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  requestContent(): Promise<DeferredContent> {\n    return this.lazyContent();\n  }\n\n  async searchInContent(query: string, caseSensitive: boolean, isRegex: boolean): Promise<SearchMatch[]> {\n    const {content} = (await this.lazyContent() as {\n      content: string,\n      isEncoded: boolean,\n    });\n    return content ? performSearchInContent(content, query, caseSensitive, isRegex) : [];\n  }\n}\n"]}