{"version":3,"file":"ExtensionEndpoint.js","sourceRoot":"","sources":["../../../../../../front_end/models/extensions/ExtensionEndpoint.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAc7B,MAAM,OAAO,iBAAiB;IACX,IAAI,CAAc;IAC3B,aAAa,GAAW,CAAC,CAAC;IAC1B,eAAe,CAGpB;IAEH,YAAY,IAAiB;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;IACnC,CAAC;IAED,WAAW,CAAa,MAAc,EAAE,UAAmB;QACzD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YACvC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,OAAiC,EAAE,MAAM,EAAC,CAAC,CAAC;YAC1F,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAC,SAAS,EAAE,MAAM,EAAE,UAAU,EAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC;IAES,UAAU;QAClB,KAAK,MAAM,EAAC,MAAM,EAAC,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE;YACpD,MAAM,CAAC,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC,CAAC;SACtD;QACD,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;IAEO,UAAU,CAAC,EAAC,IAAI,EAAU;QAChC,IAAI,OAAO,IAAI,IAAI,EAAE;YACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACvB,OAAO;SACR;QACD,MAAM,EAAC,SAAS,EAAE,MAAM,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC;QACxC,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,CAAC,KAAK,CAAC,sBAAsB,SAAS,EAAE,CAAC,CAAC;YACjD,OAAO;SACR;QACD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACvC,IAAI,KAAK,EAAE;YACT,cAAc,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;SACjD;aAAM;YACL,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAChC;IACH,CAAC;IAES,WAAW,CAAC,MAAa;QACjC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;CACF","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\ntype Response = {\n  requestId: number,\n  result: unknown,\n  error: Error|null,\n};\n\ntype Event = {\n  event: string,\n};\n\ntype Message = MessageEvent<Response|Event>;\n\nexport class ExtensionEndpoint {\n  private readonly port: MessagePort;\n  private nextRequestId: number = 0;\n  private pendingRequests: Map<number, {\n    resolve: (arg: unknown) => void,\n    reject: (error: Error) => void,\n  }>;\n\n  constructor(port: MessagePort) {\n    this.port = port;\n    this.port.onmessage = this.onResponse.bind(this);\n    this.pendingRequests = new Map();\n  }\n\n  sendRequest<ReturnType>(method: string, parameters: unknown): Promise<ReturnType> {\n    return new Promise((resolve, reject) => {\n      const requestId = this.nextRequestId++;\n      this.pendingRequests.set(requestId, {resolve: resolve as (arg: unknown) => void, reject});\n      this.port.postMessage({requestId, method, parameters});\n    });\n  }\n\n  protected disconnect(): void {\n    for (const {reject} of this.pendingRequests.values()) {\n      reject(new Error('Extension endpoint disconnected'));\n    }\n    this.pendingRequests.clear();\n    this.port.close();\n  }\n\n  private onResponse({data}: Message): void {\n    if ('event' in data) {\n      this.handleEvent(data);\n      return;\n    }\n    const {requestId, result, error} = data;\n    const pendingRequest = this.pendingRequests.get(requestId);\n    if (!pendingRequest) {\n      console.error(`No pending request ${requestId}`);\n      return;\n    }\n    this.pendingRequests.delete(requestId);\n    if (error) {\n      pendingRequest.reject(new Error(error.message));\n    } else {\n      pendingRequest.resolve(result);\n    }\n  }\n\n  protected handleEvent(_event: Event): void {\n    throw new Error('handleEvent is not implemented');\n  }\n}\n"]}