{"version":3,"file":"AttributionReportingIssue.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/AttributionReportingIssue.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAK7B,OAAO,EAAC,KAAK,EAAE,aAAa,EAAE,SAAS,EAAC,MAAM,YAAY,CAAC;AAY3D,SAAS,YAAY,CAAC,OAAyD;IAC7E,QAAQ,OAAO,CAAC,aAAa,EAAE;QAC7B;YACE,4FAA0C;QAC5C;YACE,OAAO,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,wHAAqD,CAAC;4HACP,CAAC;QACtF;YACE,OAAO,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,4GAA+C,CAAC;gHACP,CAAC;QAChF;YACE,sEAA+B;KAClC;AACH,CAAC;AAED,MAAM,OAAO,yBAA0B,SAAQ,KAAgB;IAC7D,YAAY,CAA6D;IAEzE,YACI,YAA8D,EAAE,WAAwC;QAC1G,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,WAAW,CAAC,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED,WAAW;QACT,OAAO,aAAa,CAAC,oBAAoB,CAAC;IAC5C,CAAC;IAED,cAAc;QACZ,QAAQ,IAAI,CAAC,IAAI,EAAE,EAAE;YACnB;gBACE,OAAO;oBACL,IAAI,EAAE,+BAA+B;oBACrC,KAAK,EAAE,EAAE;iBACV,CAAC;YACJ;gBACE,OAAO;oBACL,IAAI,EAAE,gDAAgD;oBACtD,KAAK,EAAE,EAAE;iBACV,CAAC;YACJ;gBACE,OAAO;oBACL,IAAI,EAAE,2CAA2C;oBACjD,KAAK,EAAE;wBACL;4BACE,IAAI,EACA,qIAAqI;4BACzI,SAAS,EAAE,kCAAkC;yBAC9C;wBACD;4BACE,IAAI,EACA,yHAAyH;4BAC7H,SAAS,EAAE,+BAA+B;yBAC3C;qBACF;iBACF,CAAC;YACJ;gBACE,OAAO;oBACL,IAAI,EAAE,0CAA0C;oBAChD,KAAK,EAAE,EAAE;iBACV,CAAC;YACJ;gBACE,OAAO;oBACL,IAAI,EAAE,qCAAqC;oBAC3C,KAAK,EAAE,EAAE;iBACV,CAAC;YACJ;gBACE,OAAO;oBACL,IAAI,EAAE,oBAAoB;oBAC1B,KAAK,EAAE,EAAE;iBACV,CAAC;SACL;IACH,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC3C,CAAC;IAED,OAAO;QACL,OAAO,SAAS,CAAC,SAAS,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,WAAwC,EAAE,cAA8C;QAEhH,MAAM,EAAC,gCAAgC,EAAC,GAAG,cAAc,CAAC,OAAO,CAAC;QAClE,IAAI,CAAC,gCAAgC,EAAE;YACrC,OAAO,CAAC,IAAI,CAAC,uDAAuD,CAAC,CAAC;YACtE,OAAO,EAAE,CAAC;SACX;QACD,OAAO,CAAC,IAAI,yBAAyB,CAAC,gCAAgC,EAAE,WAAW,CAAC,CAAC,CAAC;IACxF,CAAC;CACF","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Issue, IssueCategory, IssueKind} from './Issue.js';\nimport type {MarkdownIssueDescription} from './MarkdownIssueDescription.js';\n\nexport const enum IssueCode {\n  PermissionPolicyDisabled = 'AttributionReportingIssue::PermissionPolicyDisabled',\n  AttributionSourceUntrustworthyFrameOrigin = 'AttributionReportingIssue::AttributionSourceUntrustworthyFrameOrigin',\n  AttributionSourceUntrustworthyOrigin = 'AttributionReportingIssue::AttributionSourceUntrustworthyOrigin',\n  AttributionUntrustworthyFrameOrigin = 'AttributionReportingIssue::AttributionUntrustworthyFrameOrigin',\n  AttributionUntrustworthyOrigin = 'AttributionReportingIssue::AttributionUntrustworthyOrigin',\n  InvalidHeader = 'AttributionReportingIssue::InvalidHeader',\n}\n\nfunction getIssueCode(details: Protocol.Audits.AttributionReportingIssueDetails): IssueCode {\n  switch (details.violationType) {\n    case Protocol.Audits.AttributionReportingIssueType.PermissionPolicyDisabled:\n      return IssueCode.PermissionPolicyDisabled;\n    case Protocol.Audits.AttributionReportingIssueType.AttributionSourceUntrustworthyOrigin:\n      return details.frame !== undefined ? IssueCode.AttributionSourceUntrustworthyFrameOrigin :\n                                           IssueCode.AttributionSourceUntrustworthyOrigin;\n    case Protocol.Audits.AttributionReportingIssueType.AttributionUntrustworthyOrigin:\n      return details.frame !== undefined ? IssueCode.AttributionUntrustworthyFrameOrigin :\n                                           IssueCode.AttributionUntrustworthyOrigin;\n    case Protocol.Audits.AttributionReportingIssueType.InvalidHeader:\n      return IssueCode.InvalidHeader;\n  }\n}\n\nexport class AttributionReportingIssue extends Issue<IssueCode> {\n  issueDetails: Readonly<Protocol.Audits.AttributionReportingIssueDetails>;\n\n  constructor(\n      issueDetails: Protocol.Audits.AttributionReportingIssueDetails, issuesModel: SDK.IssuesModel.IssuesModel) {\n    super(getIssueCode(issueDetails), issuesModel);\n    this.issueDetails = issueDetails;\n  }\n\n  getCategory(): IssueCategory {\n    return IssueCategory.AttributionReporting;\n  }\n\n  getDescription(): MarkdownIssueDescription|null {\n    switch (this.code()) {\n      case IssueCode.PermissionPolicyDisabled:\n        return {\n          file: 'arPermissionPolicyDisabled.md',\n          links: [],\n        };\n      case IssueCode.AttributionSourceUntrustworthyFrameOrigin:\n        return {\n          file: 'arAttributionSourceUntrustworthyFrameOrigin.md',\n          links: [],\n        };\n      case IssueCode.AttributionSourceUntrustworthyOrigin:\n        return {\n          file: 'arAttributionSourceUntrustworthyOrigin.md',\n          links: [\n            {\n              link:\n                  'https://developer.chrome.com/docs/privacy-sandbox/attribution-reporting-event-guide/#html-attribute-attributiondestination-required',\n              linkTitle: 'attributiondestination attribute',\n            },\n            {\n              link:\n                  'https://developer.chrome.com/docs/privacy-sandbox/attribution-reporting-event-guide/#html-attribute-attributionreportto',\n              linkTitle: 'attributionreportto attribute',\n            },\n          ],\n        };\n      case IssueCode.AttributionUntrustworthyFrameOrigin:\n        return {\n          file: 'arAttributionUntrustworthyFrameOrigin.md',\n          links: [],\n        };\n      case IssueCode.AttributionUntrustworthyOrigin:\n        return {\n          file: 'arAttributionUntrustworthyOrigin.md',\n          links: [],\n        };\n      case IssueCode.InvalidHeader:\n        return {\n          file: 'arInvalidHeader.md',\n          links: [],\n        };\n    }\n  }\n\n  primaryKey(): string {\n    return JSON.stringify(this.issueDetails);\n  }\n\n  getKind(): IssueKind {\n    return IssueKind.PageError;\n  }\n\n  static fromInspectorIssue(issuesModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue):\n      AttributionReportingIssue[] {\n    const {attributionReportingIssueDetails} = inspectorIssue.details;\n    if (!attributionReportingIssueDetails) {\n      console.warn('Attribution Reporting issue without details received.');\n      return [];\n    }\n    return [new AttributionReportingIssue(attributionReportingIssueDetails, issuesModel)];\n  }\n}\n"]}