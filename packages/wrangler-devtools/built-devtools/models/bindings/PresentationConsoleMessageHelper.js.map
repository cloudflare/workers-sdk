{"version":3,"file":"PresentationConsoleMessageHelper.js","sourceRoot":"","sources":["../../../../../../front_end/models/bindings/PresentationConsoleMessageHelper.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {DebuggerWorkspaceBinding} from './DebuggerWorkspaceBinding.js';\nimport type {LiveLocation} from './LiveLocation.js';\nimport {LiveLocationPool} from './LiveLocation.js';\n\nconst debuggerModelToMessageHelperMap =\n    new WeakMap<SDK.DebuggerModel.DebuggerModel, PresentationConsoleMessageHelper>();\n\nexport class PresentationConsoleMessageManager implements\n    SDK.TargetManager.SDKModelObserver<SDK.DebuggerModel.DebuggerModel> {\n  constructor() {\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.DebuggerModel.DebuggerModel, this);\n\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.ConsoleCleared, this.consoleCleared, this);\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.MessageAdded, event => this.consoleMessageAdded(event.data));\n    SDK.ConsoleModel.ConsoleModel.instance().messages().forEach(this.consoleMessageAdded, this);\n  }\n\n  modelAdded(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    debuggerModelToMessageHelperMap.set(debuggerModel, new PresentationConsoleMessageHelper(debuggerModel));\n  }\n\n  modelRemoved(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    const helper = debuggerModelToMessageHelperMap.get(debuggerModel);\n    if (helper) {\n      helper.consoleCleared();\n    }\n  }\n\n  private consoleMessageAdded(message: SDK.ConsoleModel.ConsoleMessage): void {\n    const runtimeModel = message.runtimeModel();\n    if (!message.isErrorOrWarning() || !message.runtimeModel() ||\n        message.source === Protocol.Log.LogEntrySource.Violation || !runtimeModel) {\n      return;\n    }\n    const helper = debuggerModelToMessageHelperMap.get(runtimeModel.debuggerModel());\n    if (helper) {\n      helper.consoleMessageAdded(message);\n    }\n  }\n\n  private consoleCleared(): void {\n    for (const debuggerModel of SDK.TargetManager.TargetManager.instance().models(SDK.DebuggerModel.DebuggerModel)) {\n      const helper = debuggerModelToMessageHelperMap.get(debuggerModel);\n      if (helper) {\n        helper.consoleCleared();\n      }\n    }\n  }\n}\n\nexport class PresentationConsoleMessageHelper {\n  readonly #debuggerModel: SDK.DebuggerModel.DebuggerModel;\n  #pendingConsoleMessages: Map<string, SDK.ConsoleModel.ConsoleMessage[]>;\n  #presentationConsoleMessages: PresentationConsoleMessage[];\n  readonly #locationPool: LiveLocationPool;\n\n  constructor(debuggerModel: SDK.DebuggerModel.DebuggerModel) {\n    this.#debuggerModel = debuggerModel;\n\n    this.#pendingConsoleMessages = new Map();\n\n    this.#presentationConsoleMessages = [];\n\n    // TODO(dgozman): queueMicrotask because we race with DebuggerWorkspaceBinding on ParsedScriptSource event delivery.\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.ParsedScriptSource, event => {\n      queueMicrotask(() => {\n        this.parsedScriptSource(event);\n      });\n    });\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.GlobalObjectCleared, this.debuggerReset, this);\n\n    this.#locationPool = new LiveLocationPool();\n  }\n\n  consoleMessageAdded(message: SDK.ConsoleModel.ConsoleMessage): void {\n    const rawLocation = this.rawLocation(message);\n    if (rawLocation) {\n      this.addConsoleMessageToScript(message, rawLocation);\n    } else {\n      this.addPendingConsoleMessage(message);\n    }\n  }\n\n  private rawLocation(message: SDK.ConsoleModel.ConsoleMessage): SDK.DebuggerModel.Location|null {\n    if (message.scriptId) {\n      return this.#debuggerModel.createRawLocationByScriptId(message.scriptId, message.line, message.column);\n    }\n    const callFrame = message.stackTrace && message.stackTrace.callFrames ? message.stackTrace.callFrames[0] : null;\n    if (callFrame) {\n      return this.#debuggerModel.createRawLocationByScriptId(\n          callFrame.scriptId, callFrame.lineNumber, callFrame.columnNumber);\n    }\n    if (message.url) {\n      return this.#debuggerModel.createRawLocationByURL(message.url, message.line, message.column);\n    }\n    return null;\n  }\n\n  private addConsoleMessageToScript(message: SDK.ConsoleModel.ConsoleMessage, rawLocation: SDK.DebuggerModel.Location):\n      void {\n    this.#presentationConsoleMessages.push(new PresentationConsoleMessage(message, rawLocation, this.#locationPool));\n  }\n\n  private addPendingConsoleMessage(message: SDK.ConsoleModel.ConsoleMessage): void {\n    if (!message.url) {\n      return;\n    }\n    const pendingMessages = this.#pendingConsoleMessages.get(message.url);\n    if (!pendingMessages) {\n      this.#pendingConsoleMessages.set(message.url, [message]);\n    } else {\n      pendingMessages.push(message);\n    }\n  }\n\n  private parsedScriptSource(event: Common.EventTarget.EventTargetEvent<SDK.Script.Script>): void {\n    const script = event.data;\n\n    const messages = this.#pendingConsoleMessages.get(script.sourceURL);\n    if (!messages) {\n      return;\n    }\n\n    const pendingMessages = [];\n    for (const message of messages) {\n      const rawLocation = this.rawLocation(message);\n      if (rawLocation && script.scriptId === rawLocation.scriptId) {\n        this.addConsoleMessageToScript(message, rawLocation);\n      } else {\n        pendingMessages.push(message);\n      }\n    }\n\n    if (pendingMessages.length) {\n      this.#pendingConsoleMessages.set(script.sourceURL, pendingMessages);\n    } else {\n      this.#pendingConsoleMessages.delete(script.sourceURL);\n    }\n  }\n\n  consoleCleared(): void {\n    this.#pendingConsoleMessages = new Map();\n    this.debuggerReset();\n  }\n\n  private debuggerReset(): void {\n    for (const message of this.#presentationConsoleMessages) {\n      message.dispose();\n    }\n    this.#presentationConsoleMessages = [];\n    this.#locationPool.disposeAll();\n  }\n}\n\nexport class PresentationConsoleMessage extends Workspace.UISourceCode.Message {\n  #uiSourceCode?: Workspace.UISourceCode.UISourceCode;\n\n  constructor(\n      message: SDK.ConsoleModel.ConsoleMessage, rawLocation: SDK.DebuggerModel.Location,\n      locationPool: LiveLocationPool) {\n    const level = message.level === Protocol.Log.LogEntryLevel.Error ? Workspace.UISourceCode.Message.Level.Error :\n                                                                       Workspace.UISourceCode.Message.Level.Warning;\n    super(level, message.messageText);\n    void DebuggerWorkspaceBinding.instance().createLiveLocation(\n        rawLocation, this.updateLocation.bind(this), locationPool);\n  }\n\n  private async updateLocation(liveLocation: LiveLocation): Promise<void> {\n    if (this.#uiSourceCode) {\n      this.#uiSourceCode.removeMessage(this);\n    }\n    const uiLocation = await liveLocation.uiLocation();\n    if (!uiLocation) {\n      return;\n    }\n    this.range = TextUtils.TextRange.TextRange.createFromLocation(uiLocation.lineNumber, uiLocation.columnNumber || 0);\n    this.#uiSourceCode = uiLocation.uiSourceCode;\n    this.#uiSourceCode.addMessage(this);\n  }\n\n  dispose(): void {\n    if (this.#uiSourceCode) {\n      this.#uiSourceCode.removeMessage(this);\n    }\n  }\n}\n"]}