{"version":3,"file":"PlatformFileSystem.js","sourceRoot":"","sources":["../../../../../../front_end/models/persistence/PlatformFileSystem.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nconst UIStrings = {\n  /**\n  * @description Assertion error message when failing to load a file.\n  */\n  unableToReadFilesWithThis: '`PlatformFileSystem` cannot read files.',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/persistence/PlatformFileSystem.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class PlatformFileSystem {\n  private readonly pathInternal: Platform.DevToolsPath.UrlString;\n  private readonly typeInternal: string;\n  constructor(path: Platform.DevToolsPath.UrlString, type: string) {\n    this.pathInternal = path;\n    this.typeInternal = type;\n  }\n\n  getMetadata(_path: Platform.DevToolsPath.EncodedPathString): Promise<{modificationTime: Date, size: number}|null> {\n    return Promise.resolve(null);\n  }\n\n  initialFilePaths(): Platform.DevToolsPath.EncodedPathString[] {\n    return [];\n  }\n\n  initialGitFolders(): Platform.DevToolsPath.EncodedPathString[] {\n    return [];\n  }\n\n  path(): Platform.DevToolsPath.UrlString {\n    return this.pathInternal;\n  }\n\n  embedderPath(): Platform.DevToolsPath.RawPathString {\n    throw new Error('Not implemented');\n  }\n\n  type(): string {\n    // TODO(kozyatinskiy): remove type, overrides should implement this interface.\n    return this.typeInternal;\n  }\n\n  async createFile(_path: Platform.DevToolsPath.EncodedPathString, _name: Platform.DevToolsPath.RawPathString|null):\n      Promise<Platform.DevToolsPath.EncodedPathString|null> {\n    return Promise.resolve(null);\n  }\n\n  deleteFile(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  requestFileBlob(_path: Platform.DevToolsPath.EncodedPathString): Promise<Blob|null> {\n    return Promise.resolve(null as Blob | null);\n  }\n\n  async requestFileContent(_path: Platform.DevToolsPath.EncodedPathString):\n      Promise<TextUtils.ContentProvider.DeferredContent> {\n    return {content: null, error: i18nString(UIStrings.unableToReadFilesWithThis), isEncoded: false};\n  }\n\n  setFileContent(_path: Platform.DevToolsPath.EncodedPathString, _content: string, _isBase64: boolean): void {\n    throw new Error('Not implemented');\n  }\n\n  renameFile(\n      _path: Platform.DevToolsPath.EncodedPathString, _newName: Platform.DevToolsPath.RawPathString,\n      callback: (arg0: boolean, arg1?: string|undefined) => void): void {\n    callback(false);\n  }\n\n  addExcludedFolder(_path: Platform.DevToolsPath.EncodedPathString): void {\n  }\n\n  removeExcludedFolder(_path: Platform.DevToolsPath.EncodedPathString): void {\n  }\n\n  fileSystemRemoved(): void {\n  }\n\n  isFileExcluded(_folderPath: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  excludedFolders(): Set<Platform.DevToolsPath.EncodedPathString> {\n    return new Set();\n  }\n\n  searchInPath(_query: string, _progress: Common.Progress.Progress): Promise<string[]> {\n    return Promise.resolve([]);\n  }\n\n  indexContent(progress: Common.Progress.Progress): void {\n    queueMicrotask(() => {\n      progress.done();\n    });\n  }\n\n  mimeFromPath(_path: Platform.DevToolsPath.UrlString): string {\n    throw new Error('Not implemented');\n  }\n\n  canExcludeFolder(_path: Platform.DevToolsPath.EncodedPathString): boolean {\n    return false;\n  }\n\n  contentType(_path: string): Common.ResourceType.ResourceType {\n    throw new Error('Not implemented');\n  }\n\n  tooltipForURL(_url: Platform.DevToolsPath.UrlString): string {\n    throw new Error('Not implemented');\n  }\n\n  supportsAutomapping(): boolean {\n    throw new Error('Not implemented');\n  }\n}\n"]}