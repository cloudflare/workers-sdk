{"version":3,"file":"BinaryResourceView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/BinaryResourceView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nimport binaryResourceViewStyles from './binaryResourceView.css.js';\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  * @description Text in Binary Resource View of the Network panel. Shown to the user as a status\n  * message after the current text has been copied to the clipboard. Base64 is a format for encoding\n  * data.\n  */\n  copiedAsBase: 'Copied as `Base64`',\n  /**\n  *@description Text in Binary Resource View of the Network panel\n  */\n  hexViewer: '`Hex` Viewer',\n  /**\n  * @description Text in Binary Resource View of the Network panel. Shown to the user as a status\n  * message after the current text has been copied to the clipboard. Hex is short for hexadecimal,\n  * and is a format for encoding data.\n  */\n  copiedAsHex: 'Copied as `Hex`',\n  /**\n  *@description Text in Binary Resource View of the Network panel. Shown to the user as a status\n  * message after the current text has been copied to the clipboard. UTF-8 is a format for encoding data.\n  */\n  copiedAsUtf: 'Copied as `UTF-8`',\n  /**\n  *@description Screen reader label for a select box that chooses how to display binary data in the Network panel\n  */\n  binaryViewType: 'Binary view type',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon copy button in the Binary Resource View of the Network panel\n  */\n  copyToClipboard: 'Copy to clipboard',\n  /**\n  * @description A context menu command in the Binary Resource View of the Network panel, for\n  * copying to the clipboard. Base64 is a format for encoding data.\n  */\n  copyAsBase: 'Copy as `Base64`',\n  /**\n  *@description A context menu command in the Binary Resource View of the Network panel, for copying\n  * to the clipboard. Hex is short for hexadecimal, and is a format for encoding data.\n  */\n  copyAsHex: 'Copy as `Hex`',\n  /**\n  *@description A context menu command in the Binary Resource View of the Network panel, for copying\n  *to the clipboard. UTF-8 is a format for encoding data.\n  */\n  copyAsUtf: 'Copy as `UTF-8`',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/BinaryResourceView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class BinaryResourceView extends UI.Widget.VBox {\n  private readonly binaryResourceViewFactory: SourceFrame.BinaryResourceViewFactory.BinaryResourceViewFactory;\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private readonly binaryViewObjects: BinaryViewObject[];\n  private binaryViewTypeSetting: Common.Settings.Setting<string>;\n  private binaryViewTypeCombobox: UI.Toolbar.ToolbarComboBox;\n  private readonly copiedText: UI.Toolbar.ToolbarText;\n  private addFadeoutSettimeoutId: number|null;\n  private lastView: UI.Widget.Widget|null;\n\n  constructor(\n      base64content: string, contentUrl: Platform.DevToolsPath.UrlString,\n      resourceType: Common.ResourceType.ResourceType) {\n    super();\n\n    this.binaryResourceViewFactory =\n        new SourceFrame.BinaryResourceViewFactory.BinaryResourceViewFactory(base64content, contentUrl, resourceType);\n\n    this.toolbar = new UI.Toolbar.Toolbar('binary-view-toolbar', this.element);\n\n    this.binaryViewObjects = [\n      new BinaryViewObject(\n          'base64', i18n.i18n.lockedString('Base64'), i18nString(UIStrings.copiedAsBase),\n          this.binaryResourceViewFactory.createBase64View.bind(this.binaryResourceViewFactory),\n          this.binaryResourceViewFactory.base64.bind(this.binaryResourceViewFactory)),\n      new BinaryViewObject(\n          'hex', i18nString(UIStrings.hexViewer), i18nString(UIStrings.copiedAsHex),\n          this.binaryResourceViewFactory.createHexView.bind(this.binaryResourceViewFactory),\n          this.binaryResourceViewFactory.hex.bind(this.binaryResourceViewFactory)),\n      new BinaryViewObject(\n          'utf8', i18n.i18n.lockedString('UTF-8'), i18nString(UIStrings.copiedAsUtf),\n          this.binaryResourceViewFactory.createUtf8View.bind(this.binaryResourceViewFactory),\n          this.binaryResourceViewFactory.utf8.bind(this.binaryResourceViewFactory)),\n    ];\n    this.binaryViewTypeSetting = Common.Settings.Settings.instance().createSetting('binaryViewType', 'hex');\n    this.binaryViewTypeCombobox =\n        new UI.Toolbar.ToolbarComboBox(this.binaryViewTypeChanged.bind(this), i18nString(UIStrings.binaryViewType));\n    for (const viewObject of this.binaryViewObjects) {\n      this.binaryViewTypeCombobox.addOption(\n          this.binaryViewTypeCombobox.createOption(viewObject.label, viewObject.type));\n    }\n    this.toolbar.appendToolbarItem(this.binaryViewTypeCombobox);\n\n    const copyButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.copyToClipboard), 'largeicon-copy');\n    copyButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.copySelectedViewToClipboard();\n    }, this);\n    this.toolbar.appendToolbarItem(copyButton);\n\n    this.copiedText = new UI.Toolbar.ToolbarText();\n    this.copiedText.element.classList.add('binary-view-copied-text');\n    this.toolbar.element.appendChild(this.copiedText.element);\n\n    this.addFadeoutSettimeoutId = null;\n\n    this.lastView = null;\n    this.updateView();\n  }\n\n  private getCurrentViewObject(): BinaryViewObject|null {\n    const filter = (obj: BinaryViewObject): boolean => obj.type === this.binaryViewTypeSetting.get();\n    const binaryViewObject = this.binaryViewObjects.find(filter);\n    console.assert(\n        Boolean(binaryViewObject),\n        `No binary view found for binary view type found in setting 'binaryViewType': ${\n            this.binaryViewTypeSetting.get()}`);\n    return binaryViewObject || null;\n  }\n\n  private async copySelectedViewToClipboard(): Promise<void> {\n    const viewObject = this.getCurrentViewObject();\n    if (!viewObject) {\n      return;\n    }\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText((await viewObject.content()).content);\n    this.copiedText.setText(viewObject.copiedMessage);\n    this.copiedText.element.classList.remove('fadeout');\n    function addFadeoutClass(this: BinaryResourceView): void {\n      this.copiedText.element.classList.add('fadeout');\n    }\n    if (this.addFadeoutSettimeoutId) {\n      clearTimeout(this.addFadeoutSettimeoutId);\n      this.addFadeoutSettimeoutId = null;\n    }\n    this.addFadeoutSettimeoutId = window.setTimeout(addFadeoutClass.bind(this), 2000);\n  }\n\n  wasShown(): void {\n    this.updateView();\n    this.registerCSSFiles([binaryResourceViewStyles]);\n  }\n\n  private updateView(): void {\n    const newViewObject = this.getCurrentViewObject();\n    if (!newViewObject) {\n      return;\n    }\n\n    const newView = newViewObject.getView();\n    if (newView === this.lastView) {\n      return;\n    }\n\n    if (this.lastView) {\n      this.lastView.detach();\n    }\n    this.lastView = newView;\n\n    newView.show(this.element, this.toolbar.element);\n    this.binaryViewTypeCombobox.selectElement().value = this.binaryViewTypeSetting.get();\n  }\n\n  private binaryViewTypeChanged(): void {\n    const selectedOption = (this.binaryViewTypeCombobox.selectedOption() as HTMLOptionElement | null);\n    if (!selectedOption) {\n      return;\n    }\n    const newViewType = selectedOption.value;\n    if (this.binaryViewTypeSetting.get() === newViewType) {\n      return;\n    }\n    this.binaryViewTypeSetting.set(newViewType);\n    this.updateView();\n  }\n\n  addCopyToContextMenu(contextMenu: UI.ContextMenu.ContextMenu, submenuItemText: string): void {\n    const copyMenu = contextMenu.clipboardSection().appendSubMenuItem(submenuItemText);\n    const footerSection = copyMenu.footerSection();\n\n    footerSection.appendItem(i18nString(UIStrings.copyAsBase), async () => {\n      const content = await this.binaryResourceViewFactory.base64();\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(content.content);\n    });\n    footerSection.appendItem(i18nString(UIStrings.copyAsHex), async () => {\n      const content = await this.binaryResourceViewFactory.hex();\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(content.content);\n    });\n    footerSection.appendItem(i18nString(UIStrings.copyAsUtf), async () => {\n      const content = await this.binaryResourceViewFactory.utf8();\n      Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(content.content);\n    });\n  }\n}\n\nexport class BinaryViewObject {\n  type: string;\n  label: string;\n  copiedMessage: string;\n  content: () => Promise<TextUtils.ContentProvider.DeferredContent>;\n  private createViewFn: () => UI.Widget.Widget;\n  private view: UI.Widget.Widget|null;\n\n  constructor(\n      type: string, label: string, copiedMessage: string, createViewFn: () => UI.Widget.Widget,\n      deferredContent: () => Promise<TextUtils.ContentProvider.DeferredContent>) {\n    this.type = type;\n    this.label = label;\n    this.copiedMessage = copiedMessage;\n    this.content = deferredContent;\n    this.createViewFn = createViewFn;\n\n    this.view = null;\n  }\n\n  getView(): UI.Widget.Widget {\n    if (!this.view) {\n      this.view = this.createViewFn();\n    }\n    return this.view;\n  }\n}\n"]}