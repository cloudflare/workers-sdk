{"version":3,"file":"TopLayerContainer.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/TopLayerContainer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as ElementsComponents from './components/components.js';\nimport * as ElementsTreeOutline from './ElementsTreeOutline.js';\n\nimport type {ElementsTreeElement} from './ElementsTreeElement.js';\n\nconst UIStrings = {\n  /**\n   * @description Top layer is rendered closest to the user within a viewport, therefore its elements always appear on top of all other content\n   */\n  topLayer: 'top-layer',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/TopLayerContainer.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class TopLayerContainer extends UI.TreeOutline.TreeElement {\n  treeOutline: ElementsTreeOutline.ElementsTreeOutline|null;\n  domModel: SDK.DOMModel.DOMModel;\n  currentTopLayerElements: Set<ElementsTreeElement>;\n  bodyElement: ElementsTreeElement;\n\n  constructor(bodyElement: ElementsTreeElement) {\n    super('#top-layer');\n    this.bodyElement = bodyElement;\n    this.domModel = bodyElement.node().domModel();\n    this.treeOutline = null;\n    this.currentTopLayerElements = new Set();\n  }\n\n  updateBody(bodyElement: ElementsTreeElement): void {\n    this.bodyElement = bodyElement;\n  }\n\n  async addTopLayerElementsAsChildren(): Promise<boolean> {\n    this.removeCurrentTopLayerElementsAdorners();\n    this.currentTopLayerElements = new Set();\n    const newTopLayerElementsIDs = await this.domModel.getTopLayerElements();\n    if (newTopLayerElementsIDs === null) {\n      return false;\n    }\n    let topLayerElementIndex = 0;\n    if (newTopLayerElementsIDs) {\n      for (const elementID of newTopLayerElementsIDs) {\n        const topLayerDOMNode = this.domModel.idToDOMNode.get(elementID);\n        // Will need to add support for backdrop in the future.\n        if (topLayerDOMNode && topLayerDOMNode.nodeName() !== '::backdrop') {\n          topLayerElementIndex++;\n          const topLayerElementShortcut = new SDK.DOMModel.DOMNodeShortcut(\n              this.domModel.target(), topLayerDOMNode.backendNodeId(), 0, topLayerDOMNode.nodeName());\n          const topLayerTreeElement = this.treeOutline?.treeElementByNode.get(topLayerDOMNode);\n          const topLayerElementRepresentation = new ElementsTreeOutline.ShortcutTreeElement(topLayerElementShortcut);\n          if (topLayerTreeElement && !this.currentTopLayerElements.has(topLayerTreeElement)) {\n            this.appendChild(topLayerElementRepresentation);\n            this.addTopLayerAdorner(topLayerTreeElement, topLayerElementRepresentation, topLayerElementIndex);\n            this.currentTopLayerElements.add(topLayerTreeElement);\n          }\n        }\n      }\n    }\n    return topLayerElementIndex > 0;\n  }\n\n  private removeCurrentTopLayerElementsAdorners(): void {\n    for (const topLayerElement of this.currentTopLayerElements) {\n      topLayerElement.removeAllAdorners();\n    }\n  }\n\n  private addTopLayerAdorner(\n      element: ElementsTreeElement, topLayerElementRepresentation: ElementsTreeOutline.ShortcutTreeElement,\n      topLayerElementIndex: number): void {\n    const config = ElementsComponents.AdornerManager.getRegisteredAdorner(\n        ElementsComponents.AdornerManager.RegisteredAdorners.TOP_LAYER);\n    const adornerContent = document.createElement('span');\n    adornerContent.textContent = ` top-layer (${topLayerElementIndex}) `;\n    const adorner = element?.adorn(config, adornerContent);\n    if (adorner) {\n      const onClick = (((): void => {\n                         topLayerElementRepresentation.revealAndSelect();\n                       }) as EventListener);\n      adorner.addInteraction(onClick, {\n        isToggle: false,\n        shouldPropagateOnKeydown: false,\n        ariaLabelDefault: i18nString(UIStrings.topLayer),\n        ariaLabelActive: i18nString(UIStrings.topLayer),\n      });\n      adorner.addEventListener('mousedown', e => e.consume(), false);\n    }\n  }\n}\n"]}