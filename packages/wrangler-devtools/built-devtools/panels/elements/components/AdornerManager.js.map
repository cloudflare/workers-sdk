{"version":3,"file":"AdornerManager.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/AdornerManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const enum AdornerCategories {\n  SECURITY = 'Security',\n  LAYOUT = 'Layout',\n  DEFAULT = 'Default',\n}\n\nexport interface AdornerSetting {\n  adorner: string;\n  isEnabled: boolean;\n}\n\nexport type AdornerSettingsMap = Map<string, boolean>;\n\nexport interface RegisteredAdorner {\n  readonly name: string;\n  readonly category: AdornerCategories;\n  readonly enabledByDefault: boolean;\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum RegisteredAdorners {\n  GRID = 'grid',\n  FLEX = 'flex',\n  AD = 'ad',\n  SCROLL_SNAP = 'scroll-snap',\n  CONTAINER = 'container',\n  SLOT = 'slot',\n  TOP_LAYER = 'top-layer',\n}\n\n// This enum-like const object serves as the authoritative registry for all the\n// adorners available.\nexport function getRegisteredAdorner(which: RegisteredAdorners): RegisteredAdorner {\n  switch (which) {\n    case RegisteredAdorners.GRID:\n      return {\n        name: 'grid',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.FLEX:\n      return {\n        name: 'flex',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.AD:\n      return {\n        name: 'ad',\n        category: AdornerCategories.SECURITY,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.SCROLL_SNAP:\n      return {\n        name: 'scroll-snap',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.CONTAINER:\n      return {\n        name: 'container',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.SLOT:\n      return {\n        name: 'slot',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n    case RegisteredAdorners.TOP_LAYER:\n      return {\n        name: 'top-layer',\n        category: AdornerCategories.LAYOUT,\n        enabledByDefault: true,\n      };\n  }\n}\n\nlet adornerNameToCategoryMap: Map<string, AdornerCategories>|undefined = undefined;\n\nfunction getCategoryFromAdornerName(name: string): AdornerCategories {\n  if (!adornerNameToCategoryMap) {\n    adornerNameToCategoryMap = new Map();\n    for (const {name, category} of Object.values(RegisteredAdorners).map(getRegisteredAdorner)) {\n      adornerNameToCategoryMap.set(name, category);\n    }\n  }\n  return adornerNameToCategoryMap.get(name) || AdornerCategories.DEFAULT;\n}\n\nexport const DefaultAdornerSettings: AdornerSetting[] =\n    Object.values(RegisteredAdorners).map(getRegisteredAdorner).map(({name, enabledByDefault}) => ({\n                                                                      adorner: name,\n                                                                      isEnabled: enabledByDefault,\n                                                                    }));\n\ninterface SettingStore<Setting> {\n  get(): Setting;\n  set(setting: Setting): void;\n}\n\nexport class AdornerManager {\n  #adornerSettings: AdornerSettingsMap = new Map();\n  #settingStore: SettingStore<AdornerSetting[]>;\n\n  constructor(settingStore: SettingStore<AdornerSetting[]>) {\n    this.#settingStore = settingStore;\n    this.#syncSettings();\n  }\n\n  updateSettings(settings: AdornerSettingsMap): void {\n    this.#adornerSettings = settings;\n    this.#persistCurrentSettings();\n  }\n\n  getSettings(): Readonly<AdornerSettingsMap> {\n    return this.#adornerSettings;\n  }\n\n  isAdornerEnabled(adornerText: string): boolean {\n    return this.#adornerSettings.get(adornerText) || false;\n  }\n\n  #persistCurrentSettings(): void {\n    const settingList = [];\n    for (const [adorner, isEnabled] of this.#adornerSettings) {\n      settingList.push({adorner, isEnabled});\n    }\n    this.#settingStore.set(settingList);\n  }\n\n  #loadSettings(): void {\n    const settingList = this.#settingStore.get();\n    for (const setting of settingList) {\n      this.#adornerSettings.set(setting.adorner, setting.isEnabled);\n    }\n  }\n\n  #syncSettings(): void {\n    this.#loadSettings();\n\n    // Prune outdated adorners and add new ones to the persistence.\n    const outdatedAdorners = new Set(this.#adornerSettings.keys());\n    for (const {adorner, isEnabled} of DefaultAdornerSettings) {\n      outdatedAdorners.delete(adorner);\n      if (!this.#adornerSettings.has(adorner)) {\n        this.#adornerSettings.set(adorner, isEnabled);\n      }\n    }\n    for (const outdatedAdorner of outdatedAdorners) {\n      this.#adornerSettings.delete(outdatedAdorner);\n    }\n\n    this.#persistCurrentSettings();\n  }\n}\n\nconst OrderedAdornerCategories = [\n  AdornerCategories.SECURITY,\n  AdornerCategories.LAYOUT,\n  AdornerCategories.DEFAULT,\n];\n\n// Use idx + 1 for the order to avoid JavaScript's 0 == false issue\nexport const AdornerCategoryOrder = new Map(OrderedAdornerCategories.map((category, idx) => [category, idx + 1]));\n\nexport function compareAdornerNamesByCategory(nameA: string, nameB: string): number {\n  const orderA = AdornerCategoryOrder.get(getCategoryFromAdornerName(nameA)) || Number.POSITIVE_INFINITY;\n  const orderB = AdornerCategoryOrder.get(getCategoryFromAdornerName(nameB)) || Number.POSITIVE_INFINITY;\n  return orderA - orderB;\n}\n"]}