{"version":3,"file":"AdornerSettingsPane.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/AdornerSettingsPane.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as Input from '../../../ui/components/input/input.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport adornerSettingsPaneStyles from './adornerSettingsPane.css.js';\n\nimport type {AdornerSettingsMap} from './AdornerManager.js';\n\nconst UIStrings = {\n  /**\n    * @description Title of a list of settings to toggle badges.\n    */\n  settingsTitle: 'Show badges',\n  /**\n   * @description ARIA label of the button to close the badge settings pane\n   */\n  closeButton: 'Close',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/AdornerSettingsPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst {render, html} = LitHtml;\n\nexport class AdornerSettingUpdatedEvent extends Event {\n  static readonly eventName = 'adornersettingupdated';\n  data: {\n    adornerName: string,\n    isEnabledNow: boolean,\n    newSettings: AdornerSettingsMap,\n  };\n\n  constructor(adornerName: string, isEnabledNow: boolean, newSettings: AdornerSettingsMap) {\n    super(AdornerSettingUpdatedEvent.eventName, {});\n    this.data = {adornerName, isEnabledNow, newSettings};\n  }\n}\n\nexport interface AdornerSettingsPaneData {\n  settings: Readonly<AdornerSettingsMap>;\n}\n\nexport class AdornerSettingsPane extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-adorner-settings-pane`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #settings: AdornerSettingsMap = new Map();\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, adornerSettingsPaneStyles];\n  }\n\n  set data(data: AdornerSettingsPaneData) {\n    this.#settings = new Map(data.settings.entries());\n    this.#render();\n  }\n\n  show(): void {\n    this.classList.remove('hidden');\n    const settingsPane = this.#shadow.querySelector<HTMLElement>('.adorner-settings-pane');\n    if (settingsPane) {\n      settingsPane.focus();\n    }\n  }\n\n  hide(): void {\n    this.classList.add('hidden');\n  }\n\n  #onChange(ev: Event): void {\n    const inputEl = ev.target as HTMLInputElement;\n    const adorner = inputEl.dataset.adorner;\n    if (adorner === undefined) {\n      return;\n    }\n    const isEnabledNow = inputEl.checked;\n    this.#settings.set(adorner, isEnabledNow);\n    this.dispatchEvent(new AdornerSettingUpdatedEvent(adorner, isEnabledNow, this.#settings));\n    this.#render();\n  }\n\n  #render(): void {\n    const settingTemplates = [];\n    for (const [adorner, isEnabled] of this.#settings) {\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      settingTemplates.push(html`\n        <label class=\"setting\" title=${adorner}>\n          <input\n            class=\"adorner-status\"\n            type=\"checkbox\" name=${adorner}\n            .checked=${isEnabled}\n            data-adorner=${adorner}>\n          <span class=\"adorner-name\">${adorner}</span>\n        </label>\n      `);\n      // clang-format on\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"adorner-settings-pane\" tabindex=\"-1\">\n        <div class=\"settings-title\">${i18nString(UIStrings.settingsTitle)}</div>\n        <div class=\"setting-list\" @change=${this.#onChange}>\n          ${settingTemplates}\n        </div>\n        <button class=\"close\" @click=${this.hide} aria-label=${i18nString(UIStrings.closeButton)}></button>\n      </div>\n    `, this.#shadow, {\n      host: this,\n    });\n    // clang-format on\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-adorner-settings-pane', AdornerSettingsPane);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-adorner-settings-pane': AdornerSettingsPane;\n  }\n}\n"]}