{"version":3,"file":"ClassesPaneWidget.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/ClassesPaneWidget.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport classesPaneWidgetStyles from './classesPaneWidget.css.js';\nimport {ElementsPanel} from './ElementsPanel.js';\n\nconst UIStrings = {\n  /**\n  * @description Prompt text for a text field in the Classes Pane Widget of the Elements panel.\n  * Class refers to a CSS class.\n  */\n  addNewClass: 'Add new class',\n  /**\n  * @description Screen reader announcement string when adding a CSS class via the Classes Pane Widget.\n  * @example {vbox flex-auto} PH1\n  */\n  classesSAdded: 'Classes {PH1} added',\n  /**\n  * @description Screen reader announcement string when adding a class via the Classes Pane Widget.\n  * @example {title-container} PH1\n  */\n  classSAdded: 'Class {PH1} added',\n  /**\n  * @description Accessible title read by screen readers for the Classes Pane Widget of the Elements\n  * panel. Element is a HTML DOM Element and classes refers to CSS classes.\n  */\n  elementClasses: 'Element Classes',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/ClassesPaneWidget.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ClassesPaneWidget extends UI.Widget.Widget {\n  private input: HTMLElement;\n  private readonly classesContainer: HTMLElement;\n  private readonly prompt: ClassNamePrompt;\n  private readonly mutatingNodes: Set<SDK.DOMModel.DOMNode>;\n  private readonly pendingNodeClasses: Map<SDK.DOMModel.DOMNode, string>;\n  private readonly updateNodeThrottler: Common.Throttler.Throttler;\n  private previousTarget: SDK.DOMModel.DOMNode|null;\n\n  constructor() {\n    super(true);\n    this.contentElement.className = 'styles-element-classes-pane';\n    const container = this.contentElement.createChild('div', 'title-container');\n    this.input = container.createChild('div', 'new-class-input monospace');\n    this.setDefaultFocusedElement(this.input);\n    this.classesContainer = this.contentElement.createChild('div', 'source-code');\n    this.classesContainer.classList.add('styles-element-classes-container');\n    this.prompt = new ClassNamePrompt(this.nodeClasses.bind(this));\n    this.prompt.setAutocompletionTimeout(0);\n    this.prompt.renderAsBlock();\n\n    const proxyElement = (this.prompt.attach(this.input) as HTMLElement);\n    this.prompt.setPlaceholder(i18nString(UIStrings.addNewClass));\n    this.prompt.addEventListener(UI.TextPrompt.Events.TextChanged, this.onTextChanged, this);\n    proxyElement.addEventListener('keydown', this.onKeyDown.bind(this), false);\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DOMModel.DOMModel, SDK.DOMModel.Events.DOMMutated, this.onDOMMutated, this);\n    this.mutatingNodes = new Set();\n    this.pendingNodeClasses = new Map();\n    this.updateNodeThrottler = new Common.Throttler.Throttler(0);\n    this.previousTarget = null;\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.DOMModel.DOMNode, this.onSelectedNodeChanged, this);\n  }\n\n  private splitTextIntoClasses(text: string): string[] {\n    return text.split(/[,\\s]/).map(className => className.trim()).filter(className => className.length);\n  }\n\n  private onKeyDown(event: KeyboardEvent): void {\n    if (!(event.key === 'Enter') && !isEscKey(event)) {\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      event.consume();\n      if (this.prompt.acceptAutoComplete()) {\n        return;\n      }\n    }\n\n    const eventTarget = (event.target as HTMLElement);\n    let text: ''|string = (eventTarget.textContent as string);\n    if (isEscKey(event)) {\n      if (!Platform.StringUtilities.isWhitespace(text)) {\n        event.consume(true);\n      }\n      text = '';\n    }\n\n    this.prompt.clearAutocomplete();\n    eventTarget.textContent = '';\n\n    const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!node) {\n      return;\n    }\n\n    const classNames = this.splitTextIntoClasses(text);\n    if (!classNames.length) {\n      this.installNodeClasses(node);\n      return;\n    }\n\n    for (const className of classNames) {\n      this.toggleClass(node, className, true);\n    }\n\n    // annoucementString is used for screen reader to announce that the class(es) has been added successfully.\n    const joinClassString = classNames.join(' ');\n    const announcementString = classNames.length > 1 ? i18nString(UIStrings.classesSAdded, {PH1: joinClassString}) :\n                                                       i18nString(UIStrings.classSAdded, {PH1: joinClassString});\n    UI.ARIAUtils.alert(announcementString);\n\n    this.installNodeClasses(node);\n    this.update();\n  }\n\n  private onTextChanged(): void {\n    const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!node) {\n      return;\n    }\n    this.installNodeClasses(node);\n  }\n\n  private onDOMMutated(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMNode>): void {\n    const node = event.data;\n    if (this.mutatingNodes.has(node)) {\n      return;\n    }\n    cachedClassesMap.delete(node);\n    this.update();\n  }\n\n  private onSelectedNodeChanged(event: Common.EventTarget.EventTargetEvent<SDK.DOMModel.DOMNode|null>): void {\n    if (this.previousTarget && this.prompt.text()) {\n      this.input.textContent = '';\n      this.installNodeClasses(this.previousTarget);\n    }\n    this.previousTarget = event.data;\n    this.update();\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.update();\n    this.registerCSSFiles([classesPaneWidgetStyles]);\n  }\n\n  private update(): void {\n    if (!this.isShowing()) {\n      return;\n    }\n\n    let node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (node) {\n      node = node.enclosingElementOrSelf();\n    }\n\n    this.classesContainer.removeChildren();\n    // @ts-ignore this.input is a div, not an input element. So this line makes no sense at all\n    this.input.disabled = !node;\n\n    if (!node) {\n      return;\n    }\n\n    const classes = this.nodeClasses(node);\n    const keys = [...classes.keys()];\n    keys.sort(Platform.StringUtilities.caseInsensetiveComparator);\n    for (const className of keys) {\n      const label = UI.UIUtils.CheckboxLabel.create(className, classes.get(className));\n      label.classList.add('monospace');\n      label.checkboxElement.addEventListener('click', this.onClick.bind(this, className), false);\n      this.classesContainer.appendChild(label);\n    }\n  }\n\n  private onClick(className: string, event: Event): void {\n    const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!node) {\n      return;\n    }\n    const enabled = (event.target as HTMLInputElement).checked;\n    this.toggleClass(node, className, enabled);\n    this.installNodeClasses(node);\n  }\n\n  private nodeClasses(node: SDK.DOMModel.DOMNode): Map<string, boolean> {\n    let result = cachedClassesMap.get(node);\n    if (!result) {\n      const classAttribute = node.getAttribute('class') || '';\n      const classes = classAttribute.split(/\\s/);\n      result = new Map();\n      for (let i = 0; i < classes.length; ++i) {\n        const className = classes[i].trim();\n        if (!className.length) {\n          continue;\n        }\n        result.set(className, true);\n      }\n      cachedClassesMap.set(node, result);\n    }\n    return result;\n  }\n\n  private toggleClass(node: SDK.DOMModel.DOMNode, className: string, enabled: boolean): void {\n    const classes = this.nodeClasses(node);\n    classes.set(className, enabled);\n  }\n\n  private installNodeClasses(node: SDK.DOMModel.DOMNode): void {\n    const classes = this.nodeClasses(node);\n    const activeClasses = new Set<string>();\n    for (const className of classes.keys()) {\n      if (classes.get(className)) {\n        activeClasses.add(className);\n      }\n    }\n\n    const additionalClasses = this.splitTextIntoClasses(this.prompt.textWithCurrentSuggestion());\n    for (const className of additionalClasses) {\n      activeClasses.add(className);\n    }\n\n    const newClasses = [...activeClasses.values()].sort();\n\n    this.pendingNodeClasses.set(node, newClasses.join(' '));\n    void this.updateNodeThrottler.schedule(this.flushPendingClasses.bind(this));\n  }\n\n  private async flushPendingClasses(): Promise<void> {\n    const promises = [];\n    for (const node of this.pendingNodeClasses.keys()) {\n      this.mutatingNodes.add(node);\n      const promise = node.setAttributeValuePromise('class', (this.pendingNodeClasses.get(node) as string))\n                          .then(onClassValueUpdated.bind(this, node));\n      promises.push(promise);\n    }\n    this.pendingNodeClasses.clear();\n    await Promise.all(promises);\n\n    function onClassValueUpdated(this: ClassesPaneWidget, node: SDK.DOMModel.DOMNode): void {\n      this.mutatingNodes.delete(node);\n    }\n  }\n}\n\nconst cachedClassesMap = new WeakMap<SDK.DOMModel.DOMNode, Map<string, boolean>>();\n\nlet buttonProviderInstance: ButtonProvider;\n\nexport class ButtonProvider implements UI.Toolbar.Provider {\n  private readonly button: UI.Toolbar.ToolbarToggle;\n  private view: ClassesPaneWidget;\n  private constructor() {\n    this.button = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.elementClasses), '');\n    this.button.setText('.cls');\n    this.button.element.classList.add('monospace');\n    this.button.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.clicked, this);\n    this.view = new ClassesPaneWidget();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ButtonProvider {\n    const {forceNew} = opts;\n    if (!buttonProviderInstance || forceNew) {\n      buttonProviderInstance = new ButtonProvider();\n    }\n\n    return buttonProviderInstance;\n  }\n\n  private clicked(): void {\n    ElementsPanel.instance().showToolbarPane(!this.view.isShowing() ? this.view : null, this.button);\n  }\n\n  item(): UI.Toolbar.ToolbarItem {\n    return this.button;\n  }\n}\n\nexport class ClassNamePrompt extends UI.TextPrompt.TextPrompt {\n  private readonly nodeClasses: (arg0: SDK.DOMModel.DOMNode) => Map<string, boolean>;\n  private selectedFrameId: string|null;\n  private classNamesPromise: Promise<string[]>|null;\n  constructor(nodeClasses: (arg0: SDK.DOMModel.DOMNode) => Map<string, boolean>) {\n    super();\n    this.nodeClasses = nodeClasses;\n    this.initialize(this.buildClassNameCompletions.bind(this), ' ');\n    this.disableDefaultSuggestionForEmptyInput();\n    this.selectedFrameId = '';\n    this.classNamesPromise = null;\n  }\n\n  private async getClassNames(selectedNode: SDK.DOMModel.DOMNode): Promise<string[]> {\n    const promises = [];\n    const completions = new Set<string>();\n    this.selectedFrameId = selectedNode.frameId();\n\n    const cssModel = selectedNode.domModel().cssModel();\n    const allStyleSheets = cssModel.allStyleSheets();\n    for (const stylesheet of allStyleSheets) {\n      if (stylesheet.frameId !== this.selectedFrameId) {\n        continue;\n      }\n      const cssPromise = cssModel.getClassNames(stylesheet.id).then(classes => {\n        for (const className of classes) {\n          completions.add(className);\n        }\n      });\n      promises.push(cssPromise);\n    }\n\n    const ownerDocumentId = ((selectedNode.ownerDocument as SDK.DOMModel.DOMDocument).id);\n\n    const domPromise = selectedNode.domModel().classNamesPromise(ownerDocumentId).then(classes => {\n      for (const className of classes) {\n        completions.add(className);\n      }\n    });\n    promises.push(domPromise);\n    await Promise.all(promises);\n    return [...completions];\n  }\n\n  private async buildClassNameCompletions(expression: string, prefix: string, force?: boolean):\n      Promise<UI.SuggestBox.Suggestions> {\n    if (!prefix || force) {\n      this.classNamesPromise = null;\n    }\n\n    const selectedNode = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n    if (!selectedNode || (!prefix && !force && !expression.trim())) {\n      return [];\n    }\n\n    if (!this.classNamesPromise || this.selectedFrameId !== selectedNode.frameId()) {\n      this.classNamesPromise = this.getClassNames(selectedNode);\n    }\n\n    let completions: string[] = await this.classNamesPromise;\n    const classesMap = this.nodeClasses((selectedNode as SDK.DOMModel.DOMNode));\n    completions = completions.filter(value => !classesMap.get(value));\n\n    if (prefix[0] === '.') {\n      completions = completions.map(value => '.' + value);\n    }\n    return completions.filter(value => value.startsWith(prefix)).sort().map(completion => {\n      return {\n        text: completion,\n        title: undefined,\n        subtitle: undefined,\n        iconType: undefined,\n        priority: undefined,\n        isSecondary: undefined,\n        subtitleRenderer: undefined,\n        selectionRange: undefined,\n        hideGhostText: undefined,\n        iconElement: undefined,\n      };\n    });\n  }\n}\n"]}