{"version":3,"file":"AccessibilityTreeUtils.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/AccessibilityTreeUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as TreeOutline from '../../ui/components/tree_outline/tree_outline.js';\nimport * as ElementsComponents from './components/components.js';\nimport * as LitHtml from '../../ui/lit-html/lit-html.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport type AXTreeNodeData = SDK.AccessibilityModel.AccessibilityNode;\nexport type AXTreeNode = TreeOutline.TreeOutlineUtils.TreeNode<AXTreeNodeData>;\n\nfunction isLeafNode(node: SDK.AccessibilityModel.AccessibilityNode): boolean {\n  return node.numChildren() === 0 && node.role()?.value !== 'Iframe';\n}\n\nfunction getModel(frameId: Protocol.Page.FrameId): SDK.AccessibilityModel.AccessibilityModel {\n  const frame = SDK.FrameManager.FrameManager.instance().getFrame(frameId);\n  const model = frame?.resourceTreeModel().target().model(SDK.AccessibilityModel.AccessibilityModel);\n  if (!model) {\n    throw Error('Could not instantiate model for frameId');\n  }\n  return model;\n}\n\nexport async function getRootNode(frameId: Protocol.Page.FrameId): Promise<SDK.AccessibilityModel.AccessibilityNode> {\n  const model = getModel(frameId);\n  const root = await model.requestRootNode(frameId);\n  if (!root) {\n    throw Error('No accessibility root for frame');\n  }\n  return root;\n}\n\nfunction getFrameIdForNodeOrDocument(node: SDK.DOMModel.DOMNode): Protocol.Page.FrameId {\n  let frameId;\n  if (node instanceof SDK.DOMModel.DOMDocument) {\n    frameId = node.body?.frameId();\n  } else {\n    frameId = node.frameId();\n  }\n  if (!frameId) {\n    throw Error('No frameId for DOM node');\n  }\n  return frameId;\n}\n\nexport async function getNodeAndAncestorsFromDOMNode(domNode: SDK.DOMModel.DOMNode):\n    Promise<SDK.AccessibilityModel.AccessibilityNode[]> {\n  let frameId = getFrameIdForNodeOrDocument(domNode);\n  const model = getModel(frameId);\n  const result = await model.requestAndLoadSubTreeToNode(domNode);\n  if (!result) {\n    throw Error('Could not retrieve accessibility node for inspected DOM node');\n  }\n\n  const topFrameId = SDK.FrameManager.FrameManager.instance().getTopFrame()?.id;\n  if (!topFrameId) {\n    return result;\n  }\n  while (frameId !== topFrameId) {\n    const node = await SDK.FrameManager.FrameManager.instance().getFrame(frameId)?.getOwnerDOMNodeOrDocument();\n    if (!node) {\n      break;\n    }\n    frameId = getFrameIdForNodeOrDocument(node);\n    const model = getModel(frameId);\n    const ancestors = await model.requestAndLoadSubTreeToNode(node);\n    result.push(...ancestors || []);\n  }\n  return result;\n}\n\nasync function getChildren(node: SDK.AccessibilityModel.AccessibilityNode):\n    Promise<SDK.AccessibilityModel.AccessibilityNode[]> {\n  if (node.role()?.value === 'Iframe') {\n    const domNode = await node.deferredDOMNode()?.resolvePromise();\n    if (!domNode) {\n      throw new Error('Could not find corresponding DOMNode');\n    }\n    const frameId = domNode.frameOwnerFrameId();\n    if (!frameId) {\n      throw Error('No owner frameId on iframe node');\n    }\n    const localRoot = await getRootNode(frameId);\n    return [localRoot];\n  }\n  return node.accessibilityModel().requestAXChildren(node.id(), node.getFrameId() || undefined);\n}\n\nexport async function sdkNodeToAXTreeNodes(sdkNode: SDK.AccessibilityModel.AccessibilityNode): Promise<AXTreeNode[]> {\n  const treeNodeData = sdkNode;\n  if (isLeafNode(sdkNode)) {\n    return [{\n      treeNodeData,\n      id: getNodeId(sdkNode),\n    }];\n  }\n\n  return [{\n    treeNodeData,\n    children: async(): Promise<AXTreeNode[]> => {\n      const childNodes = await getChildren(sdkNode);\n      const childTreeNodes = await Promise.all(childNodes.map(childNode => sdkNodeToAXTreeNodes(childNode)));\n      return childTreeNodes.flat(1);\n    },\n    id: getNodeId(sdkNode),\n  }];\n}\n\ntype Data = ElementsComponents.AccessibilityTreeNode.AccessibilityTreeNodeData;\n\nexport function accessibilityNodeRenderer(node: AXTreeNode): LitHtml.TemplateResult {\n  const tag = ElementsComponents.AccessibilityTreeNode.AccessibilityTreeNode.litTagName;\n  const sdkNode = node.treeNodeData;\n  const name = sdkNode.name()?.value || '';\n  const role = sdkNode.role()?.value || '';\n  const properties = sdkNode.properties() || [];\n  const ignored = sdkNode.ignored();\n  return LitHtml.html`<${tag} .data=${{name, role, ignored, properties} as Data}></${tag}>`;\n}\n\nexport function getNodeId(node: SDK.AccessibilityModel.AccessibilityNode): string {\n  return node.getFrameId() + '#' + node.id();\n}\n"]}