{"version":3,"file":"CSSRuleValidator.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/CSSRuleValidator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\n\nconst UIStrings = {\n  /**\n    *@description Hint prefix for deprecated properties.\n    */\n  deprecatedPropertyHintPrefix: 'Deprecated Property',\n  /**\n    *@description Hint prefix for rule validation.\n    */\n  ruleValidationHintPrefix: 'Inactive rule',\n  /**\n    *@description Hint for rules that was violated because of same elements rule.\n    *@example {flex-wrap: nowrap} REASON_RULE_CODE\n    *@example {align-content} AFFECTED_RULE_CODE\n    */\n  ruleViolatedBySameElementRuleReason: 'This element has {REASON_RULE_CODE} rule, therefore {AFFECTED_RULE_CODE} has no effect.',\n  /**\n    *@description Possible fix for rules that was violated because of same elements rule.\n    *@example {flex-wrap: nowrap} REASON_RULE_CODE\n    */\n  ruleViolatedBySameElementRuleFix: 'For this property to work, please remove or change the value of {REASON_RULE_CODE}',\n  /**\n    *@description Hint for rules that was violated because of parent element rule.\n    *@example {display: block} REASON_RULE_CODE\n    *@example {flex} AFFECTED_RULE_CODE\n    */\n  ruleViolatedByParentElementRuleReason: 'Parent element has {REASON_RULE_CODE} rule, therefore this elements {AFFECTED_RULE_CODE} has no effect',\n  /**\n    *@description Posible fix for rules that was violated because of parent element rule.\n    *@example {display: block} EXISTING_PARENT_ELEMENT_RULE\n    *@example {display: flex} TARGET_PARENT_ELEMENT_RULE\n    */\n  ruleViolatedByParentElementRuleFix: 'Please change parent elements {EXISTING_PARENT_ELEMENT_RULE} to {TARGET_PARENT_ELEMENT_RULE} to fix this issue.',\n  };\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/CSSRuleValidator.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport const enum AuthoringHintType {\n  RULE_VALIDATION = 'ruleValidation',\n  DEPRECATED_PROPERTY = 'deprecatedProperty',\n}\n\nexport class AuthoringHint {\n  readonly #hintType: AuthoringHintType;\n  readonly #hintMessage: string;\n  readonly #possibleFixMessage: string|null;\n  readonly #learnMore: string|null;\n\n  constructor(property: string, hintType: AuthoringHintType, hintMessage: string, possibleFixMessage: string|null, showLearnMore: boolean) {\n    this.#hintType = hintType;\n    this.#hintMessage = hintMessage;\n    this.#possibleFixMessage = possibleFixMessage;\n    this.#learnMore = showLearnMore ? property : null; // TODO: Add Goo.gle short link base url\n  }\n\n  getHintPrefix(): string {\n    switch (this.#hintType) {\n      case AuthoringHintType.RULE_VALIDATION:\n        return i18nString(UIStrings.ruleValidationHintPrefix);\n      case AuthoringHintType.DEPRECATED_PROPERTY:\n        return i18nString(UIStrings.deprecatedPropertyHintPrefix);\n    }\n  }\n\n  getHintMessage(): string {\n    return this.#hintMessage;\n  }\n\n  getPossibleFixMessage(): string|null {\n    return this.#possibleFixMessage;\n  }\n\n  getLearnMoreLink(): string|null {\n    return this.#learnMore;\n  }\n}\n\nexport abstract class CSSRuleValidator {\n  readonly #affectedProperties: string[];\n\n  constructor(affectedProperties: string[]) {\n    this.#affectedProperties = affectedProperties;\n  }\n\n  abstract isRuleValid(computedStyles: Map<String, String>|null, parentsComputedStyles?: Map<String, String>|null):\n      boolean;\n\n  getAffectedProperties(): string[] {\n    return this.#affectedProperties;\n  }\n\n  abstract getAuthoringHint(propertyName: string, parentComputedStyles: Map<String, String>|null): AuthoringHint;\n}\n\nexport class AlignContentValidator extends CSSRuleValidator {\n  constructor() {\n    super(['align-content']);\n  }\n\n  isRuleValid(computedStyles: Map<String, String>|null): boolean {\n    if (computedStyles === null || computedStyles === undefined) {\n      return true;\n    }\n    const display = computedStyles.get('display');\n    if (display !== 'flex' && display !== 'inline-flex') {\n      return true;\n    }\n    return computedStyles.get('flex-wrap') !== 'nowrap';\n  }\n\n  getAuthoringHint(): AuthoringHint {\n    const reasonRuleCode = '<code class=\"unbreakable-text\"><span class=\"property\">flex-wrap</span>: nowrap</code>';\n    const affectedRuleCode = '<code class=\"unbreakable-text\"><span class=\"property\">align-content</span></code>';\n\n    return new AuthoringHint(\n      'align-content',\n      AuthoringHintType.RULE_VALIDATION,\n      i18nString(UIStrings.ruleViolatedBySameElementRuleReason, {\n        'REASON_RULE_CODE': reasonRuleCode,\n        'AFFECTED_RULE_CODE': affectedRuleCode,\n      }),\n      i18nString(UIStrings.ruleViolatedBySameElementRuleFix, {\n        'REASON_RULE_CODE': reasonRuleCode,\n      }),\n      true,\n    );\n  }\n}\n\nexport class FlexItemValidator extends CSSRuleValidator {\n  constructor() {\n    super(['flex', 'flex-basis', 'flex-grow', 'flex-shrink']);\n  }\n\n  isRuleValid(computedStyles: Map<String, String>|null, parentsComputedStyles: Map<String, String>|null): boolean {\n    if (computedStyles === null || computedStyles === undefined || parentsComputedStyles === null ||\n        parentsComputedStyles === undefined) {\n      return true;\n    }\n    const parentDisplay = parentsComputedStyles.get('display');\n    return parentDisplay === 'flex' || parentDisplay === 'inline-flex';\n  }\n\n  getAuthoringHint(property: string, parentsComputedStyles: Map<String, String>|null): AuthoringHint {\n    const reasonRuleCode = '<code class=\"unbreakable-text\"><span class=\"property\">display</span>:' + parentsComputedStyles?.get('display') + '</code>';\n    const affectedRuleCode = '<code class=\"unbreakable-text\"><span class=\"property\">' + property + '</span></code>';\n    const targetParentRuleCode = '<code class=\"unbreakable-text\"><span class=\"property\">display</span>: flex</code>';\n\n    return new AuthoringHint(\n      property,\n      AuthoringHintType.RULE_VALIDATION,\n      i18nString(UIStrings.ruleViolatedByParentElementRuleReason, {\n        'REASON_RULE_CODE': reasonRuleCode,\n        'AFFECTED_RULE_CODE': affectedRuleCode,\n      }),\n      i18nString(UIStrings.ruleViolatedByParentElementRuleFix, {\n        'EXISTING_PARENT_ELEMENT_RULE': reasonRuleCode,\n        'TARGET_PARENT_ELEMENT_RULE': targetParentRuleCode,\n      }),\n      true,\n    );\n  }\n}\n\nconst setupCSSRulesValidators = (): Map<String, CSSRuleValidator[]> => {\n  const validators = [new AlignContentValidator(), new FlexItemValidator()];\n\n  const validatorsMap = new Map<String, CSSRuleValidator[]>();\n  for (const validator of validators) {\n    const affectedProperties = validator.getAffectedProperties();\n\n    for (const affectedProperty of affectedProperties) {\n      let propertyValidators = validatorsMap.get(affectedProperty);\n      if (propertyValidators === undefined) {\n        propertyValidators = [];\n      }\n      propertyValidators.push(validator);\n\n      validatorsMap.set(affectedProperty, propertyValidators);\n    }\n  }\n  return validatorsMap;\n};\n\nexport const cssRuleValidatorsMap: Map<String, CSSRuleValidator[]> = setupCSSRulesValidators();\n"]}