{"version":3,"file":"InspectElementModeController.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/InspectElementModeController.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAEH,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;AAEjD,IAAI,4BAA0D,CAAC;AAE/D,MAAM,OAAO,4BAA4B;IACtB,kBAAkB,CAAoC;IAC/D,IAAI,CAA+B;IAC1B,iCAAiC,CAAmC;IAErF;QACE,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,gCAAgC,CAAC,CAAC;QAC/G,IAAI,CAAC,IAAI,oBAAoC,CAAC;QAC9C,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CACvD,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAClF,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CACvD,GAAG,CAAC,YAAY,CAAC,YAAY,EAAE,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,EACxE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,mBAAmC,CAAC,CAAC;QAC3D,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjF,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAE9F,IAAI,CAAC,iCAAiC;YAClC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,4BAA4B,CAAC,CAAC;QACpF,IAAI,CAAC,iCAAiC,CAAC,iBAAiB,CAAC,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE5G,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;YAC3C,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;gBACvD,OAAO;aACR;YACD,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,EAAE;gBAClC,OAAO;aACR;YACD,IAAI,CAAC,OAAO,mBAAmC,CAAC;YAChD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,EAAC,QAAQ,KAErB,EAAC,QAAQ,EAAE,KAAK,EAAC;QACnB,IAAI,CAAC,4BAA4B,IAAI,QAAQ,EAAE;YAC7C,4BAA4B,GAAG,IAAI,4BAA4B,EAAE,CAAC;SACnE;QAED,OAAO,4BAA4B,CAAC;IACtC,CAAC;IAED,UAAU,CAAC,YAA2C;QACpD,mFAAmF;QACnF,0EAA0E;QAC1E,IAAI,IAAI,CAAC,IAAI,sBAAsC,EAAE;YACnD,OAAO;SACR;QACD,KAAK,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,iCAAiC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC5F,CAAC;IAED,YAAY,CAAC,aAA4C;IACzD,CAAC;IAEO,sBAAsB;QAC5B,OAAO,IAAI,CAAC,IAAI,sBAAsC,CAAC;IACzD,CAAC;IAED,iBAAiB;QACf,IAAI,IAAI,CAAC;QACT,IAAI,IAAI,CAAC,sBAAsB,EAAE,EAAE;YACjC,IAAI,oBAAoC,CAAC;SAC1C;aAAM;YACL,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;kEAC7B,CAAC;mDACT,CAAC;SAChD;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,OAAO,qDAAoD,CAAC;IACnE,CAAC;IAEO,OAAO,CAAC,IAAkC;QAChD,IAAI,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,mBAAmB,EAAE,EAAE;YACpE,OAAO;SACR;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,KAAK,MAAM,YAAY,IAAI,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;YAC3G,KAAK,YAAY,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,iCAAiC,CAAC,GAAG,EAAE,CAAC,CAAC;SACtF;QACD,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;SACnE;IACH,CAAC;IAEO,mBAAmB;QACzB,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,mBAAmB,EAAE,EAAE;YACrE,OAAO;SACR;QAED,IAAI,CAAC,IAAI,oBAAoC,CAAC;QAC9C,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;SAC3C;IACH,CAAC;IAEO,WAAW,CAAC,IAA0B;QAC5C,KAAK,aAAa,CAAC,QAAQ,EAAE,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACtE,CAAC;IAEO,iCAAiC;QACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;CACF;AAED,IAAI,kCAA8D,CAAC;AAEnE,MAAM,OAAO,0BAA0B;IACrC,YAAY,CAAC,OAA2B,EAAE,QAAgB;QACxD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;YACrD,OAAO,KAAK,CAAC;SACd;QAED,4BAA4B,GAAG,4BAA4B,CAAC,QAAQ,EAAE,CAAC;QACvE,IAAI,CAAC,4BAA4B,EAAE;YACjC,OAAO,KAAK,CAAC;SACd;QACD,IAAI,QAAQ,KAAK,gCAAgC,EAAE;YACjD,4BAA4B,CAAC,iBAAiB,EAAE,CAAC;SAClD;aAAM,IAAI,QAAQ,KAAK,kCAAkC,EAAE;YAC1D,4BAA4B,CAAC,qBAAqB,EAAE,CAAC;SACtD;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAEF,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC5B,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,kCAAkC,IAAI,QAAQ,EAAE;YACnD,kCAAkC,GAAG,IAAI,0BAA0B,EAAE,CAAC;SACvE;QAED,OAAO,kCAAkC,CAAC;IAC5C,CAAC;CACF","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ElementsPanel} from './ElementsPanel.js';\n\nlet inspectElementModeController: InspectElementModeController;\n\nexport class InspectElementModeController implements SDK.TargetManager.SDKModelObserver<SDK.OverlayModel.OverlayModel> {\n  private readonly toggleSearchAction: UI.ActionRegistration.Action|null;\n  private mode: Protocol.Overlay.InspectMode;\n  private readonly showDetailedInspectTooltipSetting: Common.Settings.Setting<boolean>;\n\n  constructor() {\n    this.toggleSearchAction = UI.ActionRegistry.ActionRegistry.instance().action('elements.toggle-element-search');\n    this.mode = Protocol.Overlay.InspectMode.None;\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.SuspendStateChanged, this.suspendStateChanged, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.OverlayModel.OverlayModel, SDK.OverlayModel.Events.ExitedInspectMode,\n        () => this.setMode(Protocol.Overlay.InspectMode.None));\n    SDK.OverlayModel.OverlayModel.setInspectNodeHandler(this.inspectNode.bind(this));\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.OverlayModel.OverlayModel, this);\n\n    this.showDetailedInspectTooltipSetting =\n        Common.Settings.Settings.instance().moduleSetting('showDetailedInspectTooltip');\n    this.showDetailedInspectTooltipSetting.addChangeListener(this.showDetailedInspectTooltipChanged.bind(this));\n\n    document.addEventListener('keydown', event => {\n      if (event.keyCode !== UI.KeyboardShortcut.Keys.Esc.code) {\n        return;\n      }\n      if (!this.isInInspectElementMode()) {\n        return;\n      }\n      this.setMode(Protocol.Overlay.InspectMode.None);\n      event.consume(true);\n    }, true);\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): InspectElementModeController {\n    if (!inspectElementModeController || forceNew) {\n      inspectElementModeController = new InspectElementModeController();\n    }\n\n    return inspectElementModeController;\n  }\n\n  modelAdded(overlayModel: SDK.OverlayModel.OverlayModel): void {\n    // When DevTools are opening in the inspect element mode, the first target comes in\n    // much later than the InspectorFrontendAPI.enterInspectElementMode event.\n    if (this.mode === Protocol.Overlay.InspectMode.None) {\n      return;\n    }\n    void overlayModel.setInspectMode(this.mode, this.showDetailedInspectTooltipSetting.get());\n  }\n\n  modelRemoved(_overlayModel: SDK.OverlayModel.OverlayModel): void {\n  }\n\n  private isInInspectElementMode(): boolean {\n    return this.mode !== Protocol.Overlay.InspectMode.None;\n  }\n\n  toggleInspectMode(): void {\n    let mode;\n    if (this.isInInspectElementMode()) {\n      mode = Protocol.Overlay.InspectMode.None;\n    } else {\n      mode = Common.Settings.Settings.instance().moduleSetting('showUAShadowDOM').get() ?\n          Protocol.Overlay.InspectMode.SearchForUAShadowDOM :\n          Protocol.Overlay.InspectMode.SearchForNode;\n    }\n    this.setMode(mode);\n  }\n\n  captureScreenshotMode(): void {\n    this.setMode(Protocol.Overlay.InspectMode.CaptureAreaScreenshot);\n  }\n\n  private setMode(mode: Protocol.Overlay.InspectMode): void {\n    if (SDK.TargetManager.TargetManager.instance().allTargetsSuspended()) {\n      return;\n    }\n    this.mode = mode;\n    for (const overlayModel of SDK.TargetManager.TargetManager.instance().models(SDK.OverlayModel.OverlayModel)) {\n      void overlayModel.setInspectMode(mode, this.showDetailedInspectTooltipSetting.get());\n    }\n    if (this.toggleSearchAction) {\n      this.toggleSearchAction.setToggled(this.isInInspectElementMode());\n    }\n  }\n\n  private suspendStateChanged(): void {\n    if (!SDK.TargetManager.TargetManager.instance().allTargetsSuspended()) {\n      return;\n    }\n\n    this.mode = Protocol.Overlay.InspectMode.None;\n    if (this.toggleSearchAction) {\n      this.toggleSearchAction.setToggled(false);\n    }\n  }\n\n  private inspectNode(node: SDK.DOMModel.DOMNode): void {\n    void ElementsPanel.instance().revealAndSelectNode(node, true, true);\n  }\n\n  private showDetailedInspectTooltipChanged(): void {\n    this.setMode(this.mode);\n  }\n}\n\nlet toggleSearchActionDelegateInstance: ToggleSearchActionDelegate;\n\nexport class ToggleSearchActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    if (Root.Runtime.Runtime.queryParam('isSharedWorker')) {\n      return false;\n    }\n\n    inspectElementModeController = InspectElementModeController.instance();\n    if (!inspectElementModeController) {\n      return false;\n    }\n    if (actionId === 'elements.toggle-element-search') {\n      inspectElementModeController.toggleInspectMode();\n    } else if (actionId === 'elements.capture-area-screenshot') {\n      inspectElementModeController.captureScreenshotMode();\n    }\n    return true;\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  }|undefined = {forceNew: null}): ToggleSearchActionDelegate {\n    const {forceNew} = opts;\n    if (!toggleSearchActionDelegateInstance || forceNew) {\n      toggleSearchActionDelegateInstance = new ToggleSearchActionDelegate();\n    }\n\n    return toggleSearchActionDelegateInstance;\n  }\n}\n"]}