{"version":3,"file":"LighthouseStartViewFR.js","sourceRoot":"","sources":["../../../../../../front_end/panels/lighthouse/LighthouseStartViewFR.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport {StartView} from './LighthouseStartView.js';\nimport {Events} from './LighthouseController.js';\n\nconst UIStrings = {\n  /**\n   * @description Text displayed as the title of a panel that can be used to audit a web page with Lighthouse.\n   */\n  generateLighthouseReport: 'Generate a Lighthouse report',\n  /**\n   * @description Text that refers to the Lighthouse mode\n   */\n  mode: 'Mode',\n  /**\n   * @description Title in the Lighthouse Start View for list of categories to run during audit\n   */\n  categories: 'Categories',\n  /**\n   * @description Title in the Lighthouse Start View for list of available start plugins\n   */\n  plugins: 'Plugins',\n  /**\n   * @description Label for a button to start analyzing a page navigation with Lighthouse\n   */\n  analyzeNavigation: 'Analyze page load',\n  /**\n   * @description Label for a button to start analyzing the current page state with Lighthouse\n   */\n  analyzeSnapshot: 'Analyze page state',\n  /**\n   * @description Label for a button that starts a Lighthouse mode that analyzes user interactions over a period of time.\n   */\n  startTimespan: 'Start timespan',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthouseStartViewFR.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class StartViewFR extends StartView {\n  changeFormMode?: (mode: string) => void;\n\n  protected render(): void {\n    this.populateRuntimeSettingAsToolbarCheckbox('lighthouse.legacy_navigation', this.settingsToolbarInternal);\n    this.populateRuntimeSettingAsToolbarCheckbox('lighthouse.clear_storage', this.settingsToolbarInternal);\n    this.populateRuntimeSettingAsToolbarDropdown('lighthouse.throttling', this.settingsToolbarInternal);\n\n    const {mode} = this.controller.getFlags();\n    this.populateStartButton(mode);\n\n    const fragment = UI.Fragment.Fragment.build`\n<form class=\"lighthouse-start-view-fr\">\n  <header class=\"hbox\">\n    <div class=\"lighthouse-logo\"></div>\n    <div class=\"lighthouse-title\">${i18nString(UIStrings.generateLighthouseReport)}</div>\n    <div class=\"lighthouse-start-button-container\" $=\"start-button-container\">${this.startButton}</div>\n  </header>\n  <div $=\"help-text\" class=\"lighthouse-help-text hidden\"></div>\n  <div class=\"lighthouse-options hbox\">\n    <div class=\"lighthouse-form-section\">\n      <div class=\"lighthouse-form-elements\" $=\"mode-form-elements\"></div>\n    </div>\n    <div class=\"lighthouse-form-section\">\n      <div class=\"lighthouse-form-elements\" $=\"device-type-form-elements\"></div>\n    </div>\n    <div class=\"lighthouse-form-categories\">\n      <div class=\"lighthouse-form-section\">\n        <div class=\"lighthouse-form-section-label\">${i18nString(UIStrings.categories)}</div>\n        <div class=\"lighthouse-form-elements\" $=\"categories-form-elements\"></div>\n      </div>\n      <div class=\"lighthouse-form-section\">\n        <div class=\"lighthouse-form-section-label\">\n          <div class=\"lighthouse-icon-label\">${i18nString(UIStrings.plugins)}</div>\n        </div>\n        <div class=\"lighthouse-form-elements\" $=\"plugins-form-elements\"></div>\n      </div>\n    </div>\n  </div>\n  <div $=\"warning-text\" class=\"lighthouse-warning-text hidden\"></div>\n</form>\n    `;\n\n    this.helpText = fragment.$('help-text');\n    this.warningText = fragment.$('warning-text');\n\n    const modeFormElements = fragment.$('mode-form-elements');\n    this.populateRuntimeSettingAsRadio('lighthouse.mode', i18nString(UIStrings.mode), modeFormElements);\n\n    // The previous radios are removed later and don't exist on the new fragment yet.\n    this.populateFormControls(fragment, mode);\n\n    this.contentElement.textContent = '';\n    this.contentElement.append(fragment.element());\n\n    this.refresh();\n  }\n\n  private populateStartButton(mode: string): void {\n    let buttonLabel: Platform.UIString.LocalizedString;\n    let callback: () => void;\n\n    if (mode === 'timespan') {\n      buttonLabel = i18nString(UIStrings.startTimespan);\n      callback = (): void => {\n        this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseTimespanStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible'),\n        );\n      };\n    } else if (mode === 'snapshot') {\n      buttonLabel = i18nString(UIStrings.analyzeSnapshot);\n      callback = (): void => {\n        this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible'),\n        );\n      };\n    } else {\n      buttonLabel = i18nString(UIStrings.analyzeNavigation);\n      callback = (): void => {\n        this.controller.dispatchEventToListeners(\n            Events.RequestLighthouseStart,\n            /* keyboardInitiated */ this.startButton.matches(':focus-visible'),\n        );\n      };\n    }\n\n    const startButtonContainer = this.contentElement.querySelector('.lighthouse-start-button-container');\n    if (startButtonContainer) {\n      startButtonContainer.textContent = '';\n      this.startButton = UI.UIUtils.createTextButton(\n          buttonLabel,\n          callback,\n          /* className */ '',\n          /* primary */ true,\n      );\n      startButtonContainer.append(this.startButton);\n    }\n  }\n\n  refresh(): void {\n    const {mode} = this.controller.getFlags();\n    this.populateStartButton(mode);\n\n    for (const {checkbox, preset} of this.checkboxes) {\n      if (preset.supportedModes.includes(mode)) {\n        checkbox.setEnabled(true);\n        checkbox.setIndeterminate(false);\n      } else {\n        checkbox.setEnabled(false);\n        checkbox.setIndeterminate(true);\n      }\n    }\n\n    // Ensure the correct layout is used after refresh.\n    this.onResize();\n  }\n\n  onResize(): void {\n    const useNarrowLayout = this.contentElement.offsetWidth < 500;\n    const useWideLayout = this.contentElement.offsetWidth > 800;\n    const headerEl = this.contentElement.querySelector('.lighthouse-start-view-fr header');\n    const optionsEl = this.contentElement.querySelector('.lighthouse-options');\n    if (headerEl) {\n      headerEl.classList.toggle('hbox', !useNarrowLayout);\n      headerEl.classList.toggle('vbox', useNarrowLayout);\n    }\n    if (optionsEl) {\n      optionsEl.classList.toggle('wide', useWideLayout);\n      optionsEl.classList.toggle('narrow', useNarrowLayout);\n    }\n  }\n}\n"]}