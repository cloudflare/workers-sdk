{"version":3,"file":"RadioSetting.js","sourceRoot":"","sources":["../../../../../../front_end/panels/lighthouse/RadioSetting.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\ninterface RadioOption {\n  value: string;\n  label: () => Common.UIString.LocalizedString;\n  tooltip?: () => Common.UIString.LocalizedString;\n}\n\nexport class RadioSetting {\n  private readonly setting: Common.Settings.Setting<string>;\n  private options: RadioOption[];\n  element: HTMLDivElement;\n  private radioElements: HTMLInputElement[];\n  private ignoreChangeEvents: boolean;\n  private selectedIndex: number;\n  constructor(options: RadioOption[], setting: Common.Settings.Setting<string>, description: string) {\n    this.setting = setting;\n    this.options = options;\n\n    this.element = document.createElement('div');\n    UI.ARIAUtils.setDescription(this.element, description);\n    UI.ARIAUtils.markAsRadioGroup(this.element);\n\n    this.radioElements = [];\n    for (const option of this.options) {\n      const fragment = UI.Fragment.Fragment.build`\n  <label $=\"label\" class=\"lighthouse-radio\">\n  <input $=\"input\" type=\"radio\" value=${option.value} name=${setting.name}>\n  <span $=\"span\" class=\"lighthouse-radio-text\">${option.label()}</span>\n  </label>\n  `;\n\n      this.element.appendChild(fragment.element());\n\n      const tooltip = option.tooltip?.() || description;\n      if (description) {\n        UI.Tooltip.Tooltip.install(fragment.$('input') as HTMLElement, tooltip);\n        UI.Tooltip.Tooltip.install(fragment.$('span') as HTMLElement, tooltip);\n      }\n      const radioElement = fragment.$('input') as HTMLInputElement;\n      radioElement.addEventListener('change', this.valueChanged.bind(this));\n      this.radioElements.push(radioElement);\n    }\n\n    this.ignoreChangeEvents = false;\n    this.selectedIndex = -1;\n\n    setting.addChangeListener(this.settingChanged, this);\n    this.settingChanged();\n  }\n\n  private updateUI(): void {\n    this.ignoreChangeEvents = true;\n    this.radioElements[this.selectedIndex].checked = true;\n    this.ignoreChangeEvents = false;\n  }\n\n  private settingChanged(): void {\n    const value = this.setting.get();\n    this.selectedIndex = this.options.findIndex(option => option.value === value);\n    this.updateUI();\n  }\n\n  private valueChanged(_event: Event): void {\n    if (this.ignoreChangeEvents) {\n      return;\n    }\n\n    const selectedRadio = this.radioElements.find(radio => radio.checked);\n    if (!selectedRadio) {\n      return;\n    }\n    this.setting.set(selectedRadio.value);\n  }\n}\n"]}