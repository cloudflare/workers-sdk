{"version":3,"file":"NetworkThrottlingSelector.js","sourceRoot":"","sources":["../../../../../../front_end/panels/mobile_throttling/NetworkThrottlingSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\nimport type {NetworkThrottlingConditionsGroup} from './ThrottlingPresets.js';\nimport {ThrottlingPresets} from './ThrottlingPresets.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to indicate something is not enabled\n  */\n  disabled: 'Disabled',\n  /**\n  *@description Title for a group of configuration options\n  */\n  presets: 'Presets',\n  /**\n  *@description Text in Network Throttling Selector of the Network panel\n  */\n  custom: 'Custom',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/mobile_throttling/NetworkThrottlingSelector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class NetworkThrottlingSelector {\n  private populateCallback:\n      (arg0: Array<NetworkThrottlingConditionsGroup>) => Array<SDK.NetworkManager.Conditions|null>;\n  private readonly selectCallback: (arg0: number) => void;\n  private readonly customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>;\n  private options!: (SDK.NetworkManager.Conditions|null)[];\n\n  constructor(\n      populateCallback: (arg0: Array<NetworkThrottlingConditionsGroup>) => Array<SDK.NetworkManager.Conditions|null>,\n      selectCallback: (arg0: number) => void,\n      customNetworkConditionsSetting: Common.Settings.Setting<SDK.NetworkManager.Conditions[]>) {\n    this.populateCallback = populateCallback;\n    this.selectCallback = selectCallback;\n    this.customNetworkConditionsSetting = customNetworkConditionsSetting;\n    this.customNetworkConditionsSetting.addChangeListener(this.populateOptions, this);\n    SDK.NetworkManager.MultitargetNetworkManager.instance().addEventListener(\n        SDK.NetworkManager.MultitargetNetworkManager.Events.ConditionsChanged, () => {\n          this.networkConditionsChanged();\n        }, this);\n    this.populateOptions();\n  }\n\n  revealAndUpdate(): void {\n    void Common.Revealer.reveal(this.customNetworkConditionsSetting);\n    this.networkConditionsChanged();\n  }\n\n  optionSelected(conditions: SDK.NetworkManager.Conditions): void {\n    SDK.NetworkManager.MultitargetNetworkManager.instance().setNetworkConditions(conditions);\n  }\n\n  private populateOptions(): void {\n    const disabledGroup = {title: i18nString(UIStrings.disabled), items: [SDK.NetworkManager.NoThrottlingConditions]};\n    const presetsGroup = {title: i18nString(UIStrings.presets), items: ThrottlingPresets.networkPresets};\n    const customGroup = {title: i18nString(UIStrings.custom), items: this.customNetworkConditionsSetting.get()};\n    this.options = this.populateCallback([disabledGroup, presetsGroup, customGroup]);\n    if (!this.networkConditionsChanged()) {\n      for (let i = this.options.length - 1; i >= 0; i--) {\n        if (this.options[i]) {\n          this.optionSelected(this.options[i] as SDK.NetworkManager.Conditions);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * returns false if selected condition no longer exists\n   */\n  private networkConditionsChanged(): boolean {\n    const value = SDK.NetworkManager.MultitargetNetworkManager.instance().networkConditions();\n    for (let index = 0; index < this.options.length; ++index) {\n      const option = this.options[index];\n      if (option && SDK.NetworkManager.networkConditionsEqual(value, option)) {\n        this.selectCallback(index);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"]}