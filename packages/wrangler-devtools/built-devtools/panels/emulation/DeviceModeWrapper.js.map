{"version":3,"file":"DeviceModeWrapper.js","sourceRoot":"","sources":["../../../../../../front_end/panels/emulation/DeviceModeWrapper.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,OAAO,KAAK,cAAc,MAAM,qCAAqC,CAAC;AAEtE,OAAO,EAAC,cAAc,EAAC,MAAM,qBAAqB,CAAC;AAGnD,IAAI,yBAA4C,CAAC;AAEjD,MAAM,OAAO,iBAAkB,SAAQ,EAAE,CAAC,MAAM,CAAC,IAAI;IAClC,wBAAwB,CAA2B;IAC5D,cAAc,CAAsB;IAC3B,sBAAsB,CAAoC;IACnE,qBAAqB,CAAmC;IAEhE,YAAoB,wBAAkD;QACpE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;QACzD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;QACjH,MAAM,KAAK,GAAG,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QACxE,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC,cAAc,EAAE,CAAC;QACpD,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC9G,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5E,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CACvD,GAAG,CAAC,YAAY,CAAC,YAAY,EAAE,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAAC,8BAA8B,EAC/G,IAAI,CAAC,CAAC;QACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAGZ,EAAC,QAAQ,EAAE,IAAI,EAAE,wBAAwB,EAAE,IAAI,EAAC;QAClD,MAAM,EAAC,QAAQ,EAAE,wBAAwB,EAAC,GAAG,IAAI,CAAC;QAClD,IAAI,CAAC,yBAAyB,IAAI,QAAQ,EAAE;YAC1C,IAAI,CAAC,wBAAwB,EAAE;gBAC7B,MAAM,IAAI,KAAK,CACX,kFAAkF,IAAI,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;aAC5G;YAED,yBAAyB,GAAG,IAAI,iBAAiB,CAAC,wBAAwB,CAAC,CAAC;SAC7E;QAED,OAAO,yBAAyB,CAAC;IACnC,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC;IAC1C,CAAC;IAED,iBAAiB,CAAC,QAAkB,EAAE,IAA6B;QACjE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;SAC5C;QACD,IAAI,CAAC,cAAc,CAAC,2BAA2B,CAAC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;QACvF,IAAI,QAAQ,EAAE;YACZ,KAAK,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC;SACtD;aAAM,IAAI,IAAI,EAAE;YACf,KAAK,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;SACtD;aAAM;YACL,KAAK,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC;SAC9C;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,8BAA8B,CAAC,KAAkE;QACvG,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAEO,MAAM,CAAC,KAAc;QAC3B,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC/B,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,CAAC;SAC1E;QACD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;YACvE,IAAI,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,KAAK,OAAO,EAAE;gBAChD,OAAO;aACR;SACF;QAED,IAAI,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,EAAE;YACpC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;gBACxB,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;aAC5C;YACD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvC,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,CAAC;YACjD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;SACjE;aAAM;YACL,IAAI,IAAI,CAAC,cAAc,EAAE;gBACvB,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;gBACpC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;aAC9B;YACD,IAAI,CAAC,wBAAwB,CAAC,kBAAkB,EAAE,CAAC;YACnD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAClD;IACH,CAAC;CACF;AAED,IAAI,sBAAsC,CAAC;AAE3C,MAAM,OAAO,cAAc;IACzB,YAAY,CAAC,OAA2B,EAAE,QAAgB;QACxD,IAAI,iBAAiB,CAAC,QAAQ,EAAE,EAAE;YAChC,QAAQ,QAAQ,EAAE;gBAChB,KAAK,8BAA8B;oBACjC,OAAO,iBAAiB,CAAC,QAAQ,EAAE,CAAC,iBAAiB,EAAE,CAAC;gBAE1D,KAAK,mCAAmC,CAAC,CAAC;oBACxC,MAAM,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBACxE,IAAI,CAAC,IAAI,EAAE;wBACT,OAAO,IAAI,CAAC;qBACb;oBACD,KAAK,UAAU,WAAW;wBACxB,IAAI,CAAC,IAAI,EAAE;4BACT,OAAO;yBACR;wBAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;wBAC5C,IAAI,CAAC,MAAM,EAAE;4BACX,OAAO;yBACR;wBACD,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC;4BACvC,MAAM,IAAI,GAAI,IAAgB,CAAC,qBAAqB,EAAE,CAAC;4BACvD,MAAM,OAAO,GAAI,IAAgB,CAAC,aAAa,CAAC,eAAe,CAAC,qBAAqB,EAAE,CAAC;4BACxF,OAAO,IAAI,CAAC,SAAS,CAAC;gCACpB,CAAC,EAAE,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI;gCAC3B,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG;gCACzB,KAAK,EAAE,IAAI,CAAC,KAAK;gCACjB,MAAM,EAAE,IAAI,CAAC,MAAM;gCACnB,KAAK,EAAE,CAAC;6BACT,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;wBACH,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;4BAClB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;yBAC/D;wBACD,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAE,MAAM,CAAC,MAAM,CAAC,KAAgB,CAAC,CAAC,CAAC;wBAC3D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC,SAAS,EAAE,CAAC,uBAAuB,EAAE,CAAC;wBACtF,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;wBAClC,mEAAmE;wBACnE,gEAAgE;wBAChE,MAAM,SAAS,GAAG,CAAC,KAAK,IAAI,QAAQ,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,CAAC;wBAC9D,IAAI,CAAC,CAAC,IAAI,SAAS,CAAC;wBACpB,IAAI,CAAC,CAAC,IAAI,SAAS,CAAC;wBACpB,IAAI,CAAC,KAAK,IAAI,SAAS,CAAC;wBACxB,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC;wBACzB,iBAAiB,CAAC,QAAQ,EAAE,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;oBAC9D,CAAC;oBACD,KAAK,WAAW,EAAE,CAAC;oBACnB,OAAO,IAAI,CAAC;iBACb;gBAED,KAAK,0CAA0C;oBAC7C,OAAO,iBAAiB,CAAC,QAAQ,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAE9D,KAAK,8BAA8B;oBACjC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,gBAAgB,EAAE,CAAC;oBAChD,OAAO,IAAI,CAAC;aACf;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,sBAAsB,IAAI,QAAQ,EAAE;YACvC,sBAAsB,GAAG,IAAI,cAAc,EAAE,CAAC;SAC/C;QAED,OAAO,sBAAsB,CAAC;IAChC,CAAC;CACF","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as EmulationModel from '../../models/emulation/emulation.js';\n\nimport {DeviceModeView} from './DeviceModeView.js';\nimport type {InspectedPagePlaceholder} from './InspectedPagePlaceholder.js';\n\nlet deviceModeWrapperInstance: DeviceModeWrapper;\n\nexport class DeviceModeWrapper extends UI.Widget.VBox {\n  private readonly inspectedPagePlaceholder: InspectedPagePlaceholder;\n  private deviceModeView: DeviceModeView|null;\n  private readonly toggleDeviceModeAction: UI.ActionRegistration.Action|null;\n  private showDeviceModeSetting: Common.Settings.Setting<boolean>;\n\n  private constructor(inspectedPagePlaceholder: InspectedPagePlaceholder) {\n    super();\n    this.inspectedPagePlaceholder = inspectedPagePlaceholder;\n    this.deviceModeView = null;\n    this.toggleDeviceModeAction = UI.ActionRegistry.ActionRegistry.instance().action('emulation.toggle-device-mode');\n    const model = EmulationModel.DeviceModeModel.DeviceModeModel.instance();\n    this.showDeviceModeSetting = model.enabledSetting();\n    this.showDeviceModeSetting.setRequiresUserAction(Boolean(Root.Runtime.Runtime.queryParam('hasOtherClients')));\n    this.showDeviceModeSetting.addChangeListener(this.update.bind(this, false));\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.OverlayModel.OverlayModel, SDK.OverlayModel.Events.ScreenshotRequested, this.screenshotRequestedFromOverlay,\n        this);\n    this.update(true);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    inspectedPagePlaceholder: InspectedPagePlaceholder|null,\n  } = {forceNew: null, inspectedPagePlaceholder: null}): DeviceModeWrapper {\n    const {forceNew, inspectedPagePlaceholder} = opts;\n    if (!deviceModeWrapperInstance || forceNew) {\n      if (!inspectedPagePlaceholder) {\n        throw new Error(\n            `Unable to create DeviceModeWrapper: inspectedPagePlaceholder must be provided: ${new Error().stack}`);\n      }\n\n      deviceModeWrapperInstance = new DeviceModeWrapper(inspectedPagePlaceholder);\n    }\n\n    return deviceModeWrapperInstance;\n  }\n\n  toggleDeviceMode(): void {\n    this.showDeviceModeSetting.set(!this.showDeviceModeSetting.get());\n  }\n\n  isDeviceModeOn(): boolean {\n    return this.showDeviceModeSetting.get();\n  }\n\n  captureScreenshot(fullSize?: boolean, clip?: Protocol.Page.Viewport): boolean {\n    if (!this.deviceModeView) {\n      this.deviceModeView = new DeviceModeView();\n    }\n    this.deviceModeView.setNonEmulatedAvailableSize(this.inspectedPagePlaceholder.element);\n    if (fullSize) {\n      void this.deviceModeView.captureFullSizeScreenshot();\n    } else if (clip) {\n      void this.deviceModeView.captureAreaScreenshot(clip);\n    } else {\n      void this.deviceModeView.captureScreenshot();\n    }\n    return true;\n  }\n\n  private screenshotRequestedFromOverlay(event: Common.EventTarget.EventTargetEvent<Protocol.Page.Viewport>): void {\n    const clip = event.data;\n    this.captureScreenshot(false, clip);\n  }\n\n  private update(force: boolean): void {\n    if (this.toggleDeviceModeAction) {\n      this.toggleDeviceModeAction.setToggled(this.showDeviceModeSetting.get());\n    }\n    if (!force) {\n      const showing = this.deviceModeView && this.deviceModeView.isShowing();\n      if (this.showDeviceModeSetting.get() === showing) {\n        return;\n      }\n    }\n\n    if (this.showDeviceModeSetting.get()) {\n      if (!this.deviceModeView) {\n        this.deviceModeView = new DeviceModeView();\n      }\n      this.deviceModeView.show(this.element);\n      this.inspectedPagePlaceholder.clearMinimumSize();\n      this.inspectedPagePlaceholder.show(this.deviceModeView.element);\n    } else {\n      if (this.deviceModeView) {\n        this.deviceModeView.exitHingeMode();\n        this.deviceModeView.detach();\n      }\n      this.inspectedPagePlaceholder.restoreMinimumSize();\n      this.inspectedPagePlaceholder.show(this.element);\n    }\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    if (DeviceModeWrapper.instance()) {\n      switch (actionId) {\n        case 'emulation.capture-screenshot':\n          return DeviceModeWrapper.instance().captureScreenshot();\n\n        case 'emulation.capture-node-screenshot': {\n          const node = UI.Context.Context.instance().flavor(SDK.DOMModel.DOMNode);\n          if (!node) {\n            return true;\n          }\n          async function captureClip(): Promise<void> {\n            if (!node) {\n              return;\n            }\n\n            const object = await node.resolveToObject();\n            if (!object) {\n              return;\n            }\n            const result = await object.callFunction(function() {\n              const rect = (this as Element).getBoundingClientRect();\n              const docRect = (this as Element).ownerDocument.documentElement.getBoundingClientRect();\n              return JSON.stringify({\n                x: rect.left - docRect.left,\n                y: rect.top - docRect.top,\n                width: rect.width,\n                height: rect.height,\n                scale: 1,\n              });\n            });\n            if (!result.object) {\n              throw new Error('Clipping error: could not get object data.');\n            }\n            const clip = (JSON.parse((result.object.value as string)));\n            const response = await node.domModel().target().pageAgent().invoke_getLayoutMetrics();\n            const error = response.getError();\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            const page_zoom = !error && response.visualViewport.zoom || 1;\n            clip.x *= page_zoom;\n            clip.y *= page_zoom;\n            clip.width *= page_zoom;\n            clip.height *= page_zoom;\n            DeviceModeWrapper.instance().captureScreenshot(false, clip);\n          }\n          void captureClip();\n          return true;\n        }\n\n        case 'emulation.capture-full-height-screenshot':\n          return DeviceModeWrapper.instance().captureScreenshot(true);\n\n        case 'emulation.toggle-device-mode':\n          DeviceModeWrapper.instance().toggleDeviceMode();\n          return true;\n      }\n    }\n    return false;\n  }\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n}\n"]}