{"version":3,"file":"DeviceSizeInputElement.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/emulation/components/DeviceSizeInputElement.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport * as EmulationModel from '../../../models/emulation/emulation.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as UILegacy from '../../../ui/legacy/legacy.js';\n\nclass SizeChangedEvent extends Event {\n  static readonly eventName = 'sizechanged';\n  constructor(public size: number) {\n    super(SizeChangedEvent.eventName);\n  }\n}\n\nfunction getInputValue(event: Event): number {\n  return Number((event.target as HTMLInputElement).value);\n}\n\nexport class SizeInputElement extends HTMLElement {\n  #root = this.attachShadow({mode: 'open'});\n  #disabled = false;\n  #size = '0';\n  #placeholder = '';\n  #title: Platform.UIString.LocalizedString;\n\n  static readonly litTagName = LitHtml.literal`device-mode-emulation-size-input`;\n\n  constructor(title: Platform.UIString.LocalizedString) {\n    super();\n    this.#title = title;\n  }\n\n  connectedCallback(): void {\n    this.render();\n  }\n\n  set disabled(disabled: boolean) {\n    this.#disabled = disabled;\n    this.render();\n  }\n\n  set size(size: string) {\n    this.#size = size;\n    this.render();\n  }\n\n  set placeholder(placeholder: string) {\n    this.#placeholder = placeholder;\n    this.render();\n  }\n\n  render(): void {\n    LitHtml.render(\n        // Since the emulation code runs in a different frame, we can't\n        // use constructed stylesheets (they are disallowed cross-frame).\n        // For now, use an inline style tag and later we can refactor this\n        // to use proper constructed stylesheets, when the code runs\n        // in the correct frame context.\n        // eslint-disable-next-line rulesdir/ban_style_tags_in_lit_html\n        LitHtml.html`\n      <style>\n        input {\n          /*\n           * 4 characters for the maximum size of the value,\n           * 2 characters for the width of the step-buttons,\n           * 2 pixels padding between the characters and the\n           * step-buttons.\n           */\n          width: calc(4ch + 2ch + 2px);\n          max-height: 18px;\n          margin: 0 2px;\n          text-align: center;\n          font-size: inherit;\n          font-family: inherit;\n        }\n\n        input:disabled {\n          user-select: none;\n        }\n\n        input:focus::-webkit-input-placeholder {\n          color: transparent;\n        }\n      </style>\n      <input type=\"number\"\n             max=${EmulationModel.DeviceModeModel.MaxDeviceSize}\n             min=${EmulationModel.DeviceModeModel.MinDeviceSize}\n             maxlength=\"4\"\n             title=${this.#title}\n             placeholder=${this.#placeholder}\n             ?disabled=${this.#disabled}\n             .value=${this.#size}\n             @change=${this.#fireSizeChange}\n             @keydown=${this.#handleModifierKeys} />\n    `,\n        this.#root, {host: this});\n  }\n\n  #fireSizeChange(event: Event): void {\n    this.dispatchEvent(new SizeChangedEvent(getInputValue(event)));\n  }\n\n  #handleModifierKeys(event: Event): void {\n    let modifiedValue = UILegacy.UIUtils.modifiedFloatNumber(getInputValue(event), event);\n    if (modifiedValue === null) {\n      return;\n    }\n\n    modifiedValue = Math.min(modifiedValue, EmulationModel.DeviceModeModel.MaxDeviceSize);\n    modifiedValue = Math.max(modifiedValue, EmulationModel.DeviceModeModel.MinDeviceSize);\n\n    event.preventDefault();\n    (event.target as HTMLInputElement).value = String(modifiedValue);\n    this.dispatchEvent(new SizeChangedEvent(modifiedValue));\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('device-mode-emulation-size-input', SizeInputElement);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'device-mode-emulation-size-input': SizeInputElement;\n  }\n  interface HTMLElementEventMap {\n    'sizechanged': SizeChangedEvent;\n  }\n}\n"]}