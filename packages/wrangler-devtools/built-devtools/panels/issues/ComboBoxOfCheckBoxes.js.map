{"version":3,"file":"ComboBoxOfCheckBoxes.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/ComboBoxOfCheckBoxes.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as i18n from '../../core/i18n/i18n.js';\n\nconst UIStrings = {\n  /**\n  *@description Generic menu name accessibility label\n  */\n  genericMenuLabel: 'Menu',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/ComboBoxOfCheckBoxes.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ComboBoxOfCheckBoxes extends UI.Toolbar.ToolbarButton {\n  #options = new Array<MenuOption>();\n  #headers = new Array<MenuHeader>();\n  #onOptionClicked = (): void => {};\n  constructor(title: string) {\n    super(title);\n    this.turnIntoSelect();\n    this.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.#showLevelContextMenu.bind(this));\n    UI.ARIAUtils.markAsMenuButton(this.element);\n  }\n\n  addOption(option: string, value: string, defaultEnabled: boolean): void {\n    this.#options.push({'title': option, 'value': value, default: defaultEnabled, 'enabled': defaultEnabled});\n  }\n\n  setOptionEnabled(index: number, enabled: boolean): void {\n    const option = this.#options[index];\n    if (!option) {\n      return;\n    }\n    option.enabled = enabled;\n    this.#onOptionClicked();\n  }\n\n  addHeader(headerName: string, callback: (() => void)): void {\n    this.#headers.push({title: headerName, callback: callback});\n  }\n\n  setOnOptionClicked(onOptionClicked: (() => void)): void {\n    this.#onOptionClicked = onOptionClicked;\n  }\n\n  getOptions(): Array<MenuOption> {\n    return this.#options;\n  }\n\n  async #showLevelContextMenu({data: mouseEvent}: Common.EventTarget.EventTargetEvent<Event>): Promise<void> {\n    const contextMenu = new UI.ContextMenu.ContextMenu(mouseEvent, {\n      useSoftMenu: true,\n      x: this.element.totalOffsetLeft(),\n      y: this.element.totalOffsetTop() + this.element.offsetHeight,\n    });\n\n    for (const {title, callback} of this.#headers) {\n      contextMenu.headerSection().appendCheckboxItem(title, () => callback());\n    }\n    for (const [index, {title, enabled}] of this.#options.entries()) {\n      contextMenu.defaultSection().appendCheckboxItem(title, () => {\n        this.setOptionEnabled(index, !enabled);\n      }, enabled);\n    }\n    contextMenu.setContextMenuLabel(this.title ?? i18nString(UIStrings.genericMenuLabel));\n    await contextMenu.show();\n    contextMenu.markAsMenuItemCheckBox();\n  }\n}\n\ninterface MenuOption {\n  title: string;\n  value: string;\n  default: boolean;\n  enabled: boolean;\n}\n\ninterface MenuHeader {\n  title: string;\n  callback: () => void;\n}\n"]}