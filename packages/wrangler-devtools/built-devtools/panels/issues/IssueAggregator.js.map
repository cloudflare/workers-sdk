{"version":3,"file":"IssueAggregator.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/IssueAggregator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\ntype AggregationKeyTag = {\n  aggregationKeyTag: undefined,\n};\n\n/**\n * An opaque type for the key which we use to aggregate issues. The key must be\n * chosen such that if two aggregated issues have the same aggregation key, then\n * they also have the same issue code.\n */\nexport type AggregationKey = {\n  toString(): string,\n}&AggregationKeyTag;\n\n/**\n * An `AggregatedIssue` representes a number of `IssuesManager.Issue.Issue` objects that are displayed together.\n * Currently only grouping by issue code, is supported. The class provides helpers to support displaying\n * of all resources that are affected by the aggregated issues.\n */\nexport class AggregatedIssue extends IssuesManager.Issue.Issue {\n  #affectedCookies = new Map<string, {\n    cookie: Protocol.Audits.AffectedCookie,\n    hasRequest: boolean,\n  }>();\n  #affectedRawCookieLines = new Map<string, {rawCookieLine: string, hasRequest: boolean}>();\n  #affectedRequests = new Map<string, Protocol.Audits.AffectedRequest>();\n  #affectedLocations = new Map<string, Protocol.Audits.SourceCodeLocation>();\n  #heavyAdIssues = new Set<IssuesManager.HeavyAdIssue.HeavyAdIssue>();\n  #blockedByResponseDetails = new Map<string, Protocol.Audits.BlockedByResponseIssueDetails>();\n  #corsIssues = new Set<IssuesManager.CorsIssue.CorsIssue>();\n  #cspIssues = new Set<IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue>();\n  #deprecationIssues = new Set<IssuesManager.DeprecationIssue.DeprecationIssue>();\n  #issueKind = IssuesManager.Issue.IssueKind.Improvement;\n  #lowContrastIssues = new Set<IssuesManager.LowTextContrastIssue.LowTextContrastIssue>();\n  #mixedContentIssues = new Set<IssuesManager.MixedContentIssue.MixedContentIssue>();\n  #sharedArrayBufferIssues = new Set<IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue>();\n  #trustedWebActivityIssues = new Set<IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue>();\n  #quirksModeIssues = new Set<IssuesManager.QuirksModeIssue.QuirksModeIssue>();\n  #attributionReportingIssues = new Set<IssuesManager.AttributionReportingIssue.AttributionReportingIssue>();\n  #genericIssues = new Set<IssuesManager.GenericIssue.GenericIssue>();\n  #representative?: IssuesManager.Issue.Issue;\n  #aggregatedIssuesCount = 0;\n  #key: AggregationKey;\n\n  constructor(code: string, aggregationKey: AggregationKey) {\n    super(code);\n    this.#key = aggregationKey;\n  }\n\n  override primaryKey(): string {\n    throw new Error('This should never be called');\n  }\n\n  aggregationKey(): AggregationKey {\n    return this.#key;\n  }\n\n  getBlockedByResponseDetails(): Iterable<Protocol.Audits.BlockedByResponseIssueDetails> {\n    return this.#blockedByResponseDetails.values();\n  }\n\n  cookies(): Iterable<Protocol.Audits.AffectedCookie> {\n    return Array.from(this.#affectedCookies.values()).map(x => x.cookie);\n  }\n\n  getRawCookieLines(): Iterable<{rawCookieLine: string, hasRequest: boolean}> {\n    return this.#affectedRawCookieLines.values();\n  }\n\n  sources(): Iterable<Protocol.Audits.SourceCodeLocation> {\n    return this.#affectedLocations.values();\n  }\n\n  cookiesWithRequestIndicator(): Iterable<{\n    cookie: Protocol.Audits.AffectedCookie,\n    hasRequest: boolean,\n  }> {\n    return this.#affectedCookies.values();\n  }\n\n  getHeavyAdIssues(): Iterable<IssuesManager.HeavyAdIssue.HeavyAdIssue> {\n    return this.#heavyAdIssues;\n  }\n\n  getMixedContentIssues(): Iterable<IssuesManager.MixedContentIssue.MixedContentIssue> {\n    return this.#mixedContentIssues;\n  }\n\n  getTrustedWebActivityIssues(): Iterable<IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue> {\n    return this.#trustedWebActivityIssues;\n  }\n\n  getCorsIssues(): Set<IssuesManager.CorsIssue.CorsIssue> {\n    return this.#corsIssues;\n  }\n\n  getCspIssues(): Iterable<IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue> {\n    return this.#cspIssues;\n  }\n\n  getDeprecationIssues(): Iterable<IssuesManager.DeprecationIssue.DeprecationIssue> {\n    return this.#deprecationIssues;\n  }\n\n  getLowContrastIssues(): Iterable<IssuesManager.LowTextContrastIssue.LowTextContrastIssue> {\n    return this.#lowContrastIssues;\n  }\n\n  requests(): Iterable<Protocol.Audits.AffectedRequest> {\n    return this.#affectedRequests.values();\n  }\n\n  getSharedArrayBufferIssues(): Iterable<IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue> {\n    return this.#sharedArrayBufferIssues;\n  }\n\n  getQuirksModeIssues(): Iterable<IssuesManager.QuirksModeIssue.QuirksModeIssue> {\n    return this.#quirksModeIssues;\n  }\n\n  getAttributionReportingIssues(): ReadonlySet<IssuesManager.AttributionReportingIssue.AttributionReportingIssue> {\n    return this.#attributionReportingIssues;\n  }\n\n  getGenericIssues(): ReadonlySet<IssuesManager.GenericIssue.GenericIssue> {\n    return this.#genericIssues;\n  }\n\n  getDescription(): IssuesManager.MarkdownIssueDescription.MarkdownIssueDescription|null {\n    if (this.#representative) {\n      return this.#representative.getDescription();\n    }\n    return null;\n  }\n\n  getCategory(): IssuesManager.Issue.IssueCategory {\n    if (this.#representative) {\n      return this.#representative.getCategory();\n    }\n    return IssuesManager.Issue.IssueCategory.Other;\n  }\n\n  getAggregatedIssuesCount(): number {\n    return this.#aggregatedIssuesCount;\n  }\n\n  /**\n   * Produces a primary key for a cookie. Use this instead of `JSON.stringify` in\n   * case new fields are added to `AffectedCookie`.\n   */\n  #keyForCookie(cookie: Protocol.Audits.AffectedCookie): string {\n    const {domain, path, name} = cookie;\n    return `${domain};${path};${name}`;\n  }\n\n  addInstance(issue: IssuesManager.Issue.Issue): void {\n    this.#aggregatedIssuesCount++;\n    if (!this.#representative) {\n      this.#representative = issue;\n    }\n    this.#issueKind = IssuesManager.Issue.unionIssueKind(this.#issueKind, issue.getKind());\n    let hasRequest = false;\n    for (const request of issue.requests()) {\n      hasRequest = true;\n      if (!this.#affectedRequests.has(request.requestId)) {\n        this.#affectedRequests.set(request.requestId, request);\n      }\n    }\n    for (const cookie of issue.cookies()) {\n      const key = this.#keyForCookie(cookie);\n      if (!this.#affectedCookies.has(key)) {\n        this.#affectedCookies.set(key, {cookie, hasRequest});\n      }\n    }\n    for (const rawCookieLine of issue.rawCookieLines()) {\n      if (!this.#affectedRawCookieLines.has(rawCookieLine)) {\n        this.#affectedRawCookieLines.set(rawCookieLine, {rawCookieLine, hasRequest});\n      }\n    }\n    for (const location of issue.sources()) {\n      const key = JSON.stringify(location);\n      if (!this.#affectedLocations.has(key)) {\n        this.#affectedLocations.set(key, location);\n      }\n    }\n    if (issue instanceof IssuesManager.MixedContentIssue.MixedContentIssue) {\n      this.#mixedContentIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.HeavyAdIssue.HeavyAdIssue) {\n      this.#heavyAdIssues.add(issue);\n    }\n    for (const details of issue.getBlockedByResponseDetails()) {\n      const key = JSON.stringify(details, ['parentFrame', 'blockedFrame', 'requestId', 'frameId', 'reason', 'request']);\n      this.#blockedByResponseDetails.set(key, details);\n    }\n    if (issue instanceof IssuesManager.TrustedWebActivityIssue.TrustedWebActivityIssue) {\n      this.#trustedWebActivityIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue) {\n      this.#cspIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.DeprecationIssue.DeprecationIssue) {\n      this.#deprecationIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.SharedArrayBufferIssue.SharedArrayBufferIssue) {\n      this.#sharedArrayBufferIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.LowTextContrastIssue.LowTextContrastIssue) {\n      this.#lowContrastIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.CorsIssue.CorsIssue) {\n      this.#corsIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.QuirksModeIssue.QuirksModeIssue) {\n      this.#quirksModeIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.AttributionReportingIssue.AttributionReportingIssue) {\n      this.#attributionReportingIssues.add(issue);\n    }\n    if (issue instanceof IssuesManager.GenericIssue.GenericIssue) {\n      this.#genericIssues.add(issue);\n    }\n  }\n\n  getKind(): IssuesManager.Issue.IssueKind {\n    return this.#issueKind;\n  }\n\n  isHidden(): boolean {\n    return this.#representative?.isHidden() || false;\n  }\n\n  setHidden(_value: boolean): void {\n    throw new Error('Should not call setHidden on aggregatedIssue');\n  }\n}\n\nexport class IssueAggregator extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  readonly #aggregatedIssuesByKey = new Map<AggregationKey, AggregatedIssue>();\n  readonly #hiddenAggregatedIssuesByKey = new Map<AggregationKey, AggregatedIssue>();\n  constructor(private readonly issuesManager: IssuesManager.IssuesManager.IssuesManager) {\n    super();\n    this.issuesManager.addEventListener(IssuesManager.IssuesManager.Events.IssueAdded, this.#onIssueAdded, this);\n    this.issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.FullUpdateRequired, this.#onFullUpdateRequired, this);\n    for (const issue of this.issuesManager.issues()) {\n      this.#aggregateIssue(issue);\n    }\n  }\n\n  #onIssueAdded(event: Common.EventTarget.EventTargetEvent<IssuesManager.IssuesManager.IssueAddedEvent>): void {\n    this.#aggregateIssue(event.data.issue);\n  }\n\n  #onFullUpdateRequired(): void {\n    this.#aggregatedIssuesByKey.clear();\n    this.#hiddenAggregatedIssuesByKey.clear();\n    for (const issue of this.issuesManager.issues()) {\n      this.#aggregateIssue(issue);\n    }\n    this.dispatchEventToListeners(Events.FullUpdateRequired);\n  }\n\n  #aggregateIssue(issue: IssuesManager.Issue.Issue): AggregatedIssue {\n    const map = issue.isHidden() ? this.#hiddenAggregatedIssuesByKey : this.#aggregatedIssuesByKey;\n    const aggregatedIssue = this.#aggregateIssueByStatus(map, issue);\n    this.dispatchEventToListeners(Events.AggregatedIssueUpdated, aggregatedIssue);\n    return aggregatedIssue;\n  }\n\n  #aggregateIssueByStatus(aggregatedIssuesMap: Map<AggregationKey, AggregatedIssue>, issue: IssuesManager.Issue.Issue):\n      AggregatedIssue {\n    const key = issue.code() as unknown as AggregationKey;\n    let aggregatedIssue = aggregatedIssuesMap.get(key);\n    if (!aggregatedIssue) {\n      aggregatedIssue = new AggregatedIssue(issue.code(), key);\n      aggregatedIssuesMap.set(key, aggregatedIssue);\n    }\n    aggregatedIssue.addInstance(issue);\n    return aggregatedIssue;\n  }\n\n  aggregatedIssues(): Iterable<AggregatedIssue> {\n    return [...this.#aggregatedIssuesByKey.values(), ...this.#hiddenAggregatedIssuesByKey.values()];\n  }\n\n  hiddenAggregatedIssues(): Iterable<AggregatedIssue> {\n    return this.#hiddenAggregatedIssuesByKey.values();\n  }\n\n  aggregatedIssueCodes(): Set<AggregationKey> {\n    return new Set([...this.#aggregatedIssuesByKey.keys(), ...this.#hiddenAggregatedIssuesByKey.keys()]);\n  }\n\n  aggregatedIssueCategories(): Set<IssuesManager.Issue.IssueCategory> {\n    const result = new Set<IssuesManager.Issue.IssueCategory>();\n    for (const issue of this.#aggregatedIssuesByKey.values()) {\n      result.add(issue.getCategory());\n    }\n    return result;\n  }\n\n  aggregatedIssueKinds(): Set<IssuesManager.Issue.IssueKind> {\n    const result = new Set<IssuesManager.Issue.IssueKind>();\n    for (const issue of this.#aggregatedIssuesByKey.values()) {\n      result.add(issue.getKind());\n    }\n    return result;\n  }\n\n  numberOfAggregatedIssues(): number {\n    return this.#aggregatedIssuesByKey.size;\n  }\n\n  numberOfHiddenAggregatedIssues(): number {\n    return this.#hiddenAggregatedIssuesByKey.size;\n  }\n\n  keyForIssue(issue: IssuesManager.Issue.Issue<string>): AggregationKey {\n    return issue.code() as unknown as AggregationKey;\n  }\n}\n\nexport const enum Events {\n  AggregatedIssueUpdated = 'AggregatedIssueUpdated',\n  FullUpdateRequired = 'FullUpdateRequired',\n}\n\nexport type EventTypes = {\n  [Events.AggregatedIssueUpdated]: AggregatedIssue,\n  [Events.FullUpdateRequired]: void,\n};\n"]}