{"version":3,"file":"CSPViolationsView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/CSPViolationsView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\n\nimport cspViolationsViewStyles from './cspViolationsView.css.js';\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ComboBoxOfCheckBoxes} from './ComboBoxOfCheckBoxes.js';\nimport {CSPViolationsListView} from './CSPViolationsListView.js';\n\nconst UIStrings = {\n  /**\n  *@description Text to filter result items\n  */\n  filter: 'Filter',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/issues/CSPViolationsView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet cspViolationsViewInstance: CSPViolationsView;\nexport class CSPViolationsView extends UI.Widget.VBox {\n  #listView = new CSPViolationsListView();\n  #issuesManager = IssuesManager.IssuesManager.IssuesManager.instance();\n\n  /**\n   * @private\n   */\n  constructor() {\n    super(true);\n\n    this.contentElement.classList.add('csp-violations-pane');\n\n    const topToolbar = new UI.Toolbar.Toolbar('csp-violations-toolbar', this.contentElement);\n    const textFilterUI = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.filter), '', 1, .2, '');\n    textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, () => {\n      this.#listView.updateTextFilter(textFilterUI.value());\n    });\n    topToolbar.appendToolbarItem(textFilterUI);\n\n    const levelMenuButton = new ComboBoxOfCheckBoxes('Categories');\n    levelMenuButton.setText('Categories');\n    levelMenuButton.addOption(\n        'Trusted Type Policy', IssuesManager.ContentSecurityPolicyIssue.trustedTypesPolicyViolationCode, true);\n    levelMenuButton.addOption(\n        'Trusted Type Sink', IssuesManager.ContentSecurityPolicyIssue.trustedTypesSinkViolationCode, true);\n    levelMenuButton.addOption('CSP Inline', IssuesManager.ContentSecurityPolicyIssue.inlineViolationCode, true);\n    levelMenuButton.addOption('CSP Eval', IssuesManager.ContentSecurityPolicyIssue.evalViolationCode, true);\n    levelMenuButton.addOption('CSP URL', IssuesManager.ContentSecurityPolicyIssue.urlViolationCode, true);\n    levelMenuButton.addHeader('Reset', () => {\n      levelMenuButton.getOptions().forEach((x, i) => levelMenuButton.setOptionEnabled(i, x.default));\n    });\n    levelMenuButton.setOnOptionClicked(() => {\n      const categories = new Set(levelMenuButton.getOptions().filter(x => x.enabled).map(x => x.value));\n      this.#listView.updateCategoryFilter(categories);\n    });\n    topToolbar.appendToolbarItem(levelMenuButton);\n    this.#listView.show(this.contentElement);\n\n    this.#issuesManager.addEventListener(IssuesManager.IssuesManager.Events.IssueAdded, this.#onIssueAdded, this);\n    this.#issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.FullUpdateRequired, this.#onFullUpdateRequired, this);\n\n    this.#addAllIssues();\n  }\n\n  static instance(opts = {forceNew: null}): CSPViolationsView {\n    const {forceNew} = opts;\n    if (!cspViolationsViewInstance || forceNew) {\n      cspViolationsViewInstance = new CSPViolationsView();\n    }\n\n    return cspViolationsViewInstance;\n  }\n\n  #onIssueAdded(event: Common.EventTarget.EventTargetEvent<IssuesManager.IssuesManager.IssueAddedEvent>): void {\n    const {issue} = event.data;\n    if (issue instanceof IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue) {\n      this.#listView.addIssue(issue);\n    }\n  }\n\n  #onFullUpdateRequired(): void {\n    this.#listView.clearIssues();\n    this.#addAllIssues();\n  }\n\n  #addAllIssues(): void {\n    for (const issue of this.#issuesManager.issues()) {\n      if (issue instanceof IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue) {\n        this.#listView.addIssue(issue);\n      }\n    }\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([cspViolationsViewStyles]);\n  }\n}\n"]}