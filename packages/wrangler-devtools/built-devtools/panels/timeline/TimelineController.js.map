{"version":3,"file":"TimelineController.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Extensions from '../../models/extensions/extensions.js';\nimport * as TimelineModel from '../../models/timeline_model/timeline_model.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {ExtensionTracingSession} from './ExtensionTracingSession.js';\nimport {PerformanceModel} from './PerformanceModel.js';\n\nconst UIStrings = {\n  /**\n   * @description Text in Timeline Controller of the Performance panel.\n   * A \"CPU profile\" is a recorded performance measurement how a specific target behaves.\n   * \"Target\" in this context can mean a web page, service or normal worker.\n   * \"Not available\" is used as there are multiple things that can go wrong, but we do not\n   * know what exactly, just that the CPU profile was not correctly recorded.\n   */\n  cpuProfileForATargetIsNot: 'CPU profile for a target is not available.',\n  /**\n   *@description Text in Timeline Controller of the Performance panel indicating that the Performance Panel cannot\n   * record a performance trace because the type of target (where possible types are page, service worker and shared\n   * worker) doesn't support it.\n   */\n  tracingNotSupported: 'Performance trace recording not supported for this type of target',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimelineController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TimelineController implements SDK.TargetManager.SDKModelObserver<SDK.CPUProfilerModel.CPUProfilerModel>,\n                                           SDK.TracingManager.TracingManagerClient {\n  private readonly target: SDK.Target.Target;\n  private tracingManager: SDK.TracingManager.TracingManager|null;\n  private performanceModel: PerformanceModel;\n  private readonly client: Client;\n  private readonly tracingModel: SDK.TracingModel.TracingModel;\n  private extensionSessions: ExtensionTracingSession[];\n  private extensionTraceProviders?: Extensions.ExtensionTraceProvider.ExtensionTraceProvider[];\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private tracingCompleteCallback?: ((value: any) => void)|null;\n  private profiling?: boolean;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private cpuProfiles?: Map<any, any>|null;\n\n  constructor(target: SDK.Target.Target, client: Client) {\n    this.target = target;\n    this.tracingManager = target.model(SDK.TracingManager.TracingManager);\n    this.performanceModel = new PerformanceModel();\n    this.performanceModel.setMainTarget(target);\n    this.client = client;\n\n    const backingStorage = new Bindings.TempFile.TempFileBackingStorage();\n    this.tracingModel = new SDK.TracingModel.TracingModel(backingStorage);\n\n    this.extensionSessions = [];\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.CPUProfilerModel.CPUProfilerModel, this);\n  }\n\n  dispose(): void {\n    SDK.TargetManager.TargetManager.instance().unobserveModels(SDK.CPUProfilerModel.CPUProfilerModel, this);\n  }\n\n  mainTarget(): SDK.Target.Target {\n    return this.target;\n  }\n\n  async startRecording(\n      options: RecordingOptions, providers: Extensions.ExtensionTraceProvider.ExtensionTraceProvider[]):\n      Promise<Protocol.ProtocolResponseWithError> {\n    this.extensionTraceProviders = Extensions.ExtensionServer.ExtensionServer.instance().traceProviders().slice();\n\n    function disabledByDefault(category: string): string {\n      return 'disabled-by-default-' + category;\n    }\n\n    // The following categories are also used in other tools, but this panel\n    // offers the possibility of turning them off (see below).\n    // 'disabled-by-default-devtools.screenshot'\n    //   └ default: on, option: captureFilmStrip\n    // 'disabled-by-default-devtools.timeline.invalidationTracking'\n    //   └ default: off, experiment: timelineInvalidationTracking\n    // 'disabled-by-default-v8.cpu_profiler'\n    //   └ default: on, option: enableJSSampling\n    const categoriesArray = [\n      Root.Runtime.experiments.isEnabled('timelineShowAllEvents') ? '*' : '-*',\n      TimelineModel.TimelineModel.TimelineModelImpl.Category.Console,\n      TimelineModel.TimelineModel.TimelineModelImpl.Category.UserTiming,\n      'devtools.timeline',\n      disabledByDefault('devtools.timeline'),\n      disabledByDefault('devtools.timeline.frame'),\n      disabledByDefault('devtools.timeline.stack'),\n      disabledByDefault('v8.compile'),\n      disabledByDefault('v8.cpu_profiler.hires'),\n      TimelineModel.TimelineModel.TimelineModelImpl.Category.LatencyInfo,\n      TimelineModel.TimelineModel.TimelineModelImpl.Category.Loading,\n      disabledByDefault('lighthouse'),\n      'v8.execute',\n      'v8',\n    ];\n\n    if (Root.Runtime.experiments.isEnabled('timelineV8RuntimeCallStats') && options.enableJSSampling) {\n      categoriesArray.push(disabledByDefault('v8.runtime_stats_sampling'));\n    }\n    if (!Root.Runtime.Runtime.queryParam('timelineTracingJSProfileDisabled') && options.enableJSSampling) {\n      categoriesArray.push(disabledByDefault('v8.cpu_profiler'));\n    }\n    if (Root.Runtime.experiments.isEnabled('timelineInvalidationTracking')) {\n      categoriesArray.push(disabledByDefault('devtools.timeline.invalidationTracking'));\n    }\n    if (options.capturePictures) {\n      categoriesArray.push(\n          disabledByDefault('devtools.timeline.layers'), disabledByDefault('devtools.timeline.picture'),\n          disabledByDefault('blink.graphics_context_annotations'));\n    }\n    if (options.captureFilmStrip) {\n      categoriesArray.push(disabledByDefault('devtools.screenshot'));\n    }\n\n    this.extensionSessions = providers.map(provider => new ExtensionTracingSession(provider, this.performanceModel));\n    this.extensionSessions.forEach(session => session.start());\n    this.performanceModel.setRecordStartTime(Date.now());\n    const response = await this.startRecordingWithCategories(categoriesArray.join(','), options.enableJSSampling);\n    if (response.getError()) {\n      await this.waitForTracingToStop(false);\n      await SDK.TargetManager.TargetManager.instance().resumeAllTargets();\n    }\n    return response;\n  }\n\n  async stopRecording(): Promise<PerformanceModel> {\n    if (this.tracingManager) {\n      this.tracingManager.stop();\n    }\n\n    this.client.loadingStarted();\n    await this.waitForTracingToStop(true);\n    this.allSourcesFinished();\n    return this.performanceModel;\n  }\n\n  private async waitForTracingToStop(awaitTracingCompleteCallback: boolean): Promise<void> {\n    const tracingStoppedPromises = [];\n    if (this.tracingManager && awaitTracingCompleteCallback) {\n      tracingStoppedPromises.push(new Promise(resolve => {\n        this.tracingCompleteCallback = resolve;\n      }));\n    }\n    tracingStoppedPromises.push(this.stopProfilingOnAllModels());\n\n    const extensionCompletionPromises = this.extensionSessions.map(session => session.stop());\n    if (extensionCompletionPromises.length) {\n      tracingStoppedPromises.push(\n          Promise.race([Promise.all(extensionCompletionPromises), new Promise(r => window.setTimeout(r, 5000))]));\n    }\n    await Promise.all(tracingStoppedPromises);\n  }\n\n  modelAdded(cpuProfilerModel: SDK.CPUProfilerModel.CPUProfilerModel): void {\n    if (this.profiling) {\n      void cpuProfilerModel.startRecording();\n    }\n  }\n\n  modelRemoved(_cpuProfilerModel: SDK.CPUProfilerModel.CPUProfilerModel): void {\n    // FIXME: We'd like to stop profiling on the target and retrieve a profile\n    // but it's too late. Backend connection is closed.\n  }\n\n  private async startProfilingOnAllModels(): Promise<void> {\n    this.profiling = true;\n    const models = SDK.TargetManager.TargetManager.instance().models(SDK.CPUProfilerModel.CPUProfilerModel);\n    await Promise.all(models.map(model => model.startRecording()));\n  }\n\n  private addCpuProfile(targetId: Protocol.Target.TargetID|'main', cpuProfile: Protocol.Profiler.Profile|null): void {\n    if (!cpuProfile) {\n      Common.Console.Console.instance().warn(i18nString(UIStrings.cpuProfileForATargetIsNot));\n      return;\n    }\n    if (!this.cpuProfiles) {\n      this.cpuProfiles = new Map();\n    }\n    this.cpuProfiles.set(targetId, cpuProfile);\n  }\n\n  private async stopProfilingOnAllModels(): Promise<void> {\n    const models =\n        this.profiling ? SDK.TargetManager.TargetManager.instance().models(SDK.CPUProfilerModel.CPUProfilerModel) : [];\n    this.profiling = false;\n    const promises = [];\n    for (const model of models) {\n      const targetId = model.target().id();\n      const modelPromise = model.stopRecording().then(this.addCpuProfile.bind(this, targetId));\n      promises.push(modelPromise);\n    }\n    await Promise.all(promises);\n  }\n\n  private async startRecordingWithCategories(categories: string, enableJSSampling?: boolean):\n      Promise<Protocol.ProtocolResponseWithError> {\n    if (!this.tracingManager) {\n      throw new Error(UIStrings.tracingNotSupported);\n    }\n    // There might be a significant delay in the beginning of timeline recording\n    // caused by starting CPU profiler, that needs to traverse JS heap to collect\n    // all the functions data.\n    await SDK.TargetManager.TargetManager.instance().suspendAllTargets('performance-timeline');\n    if (enableJSSampling && Root.Runtime.Runtime.queryParam('timelineTracingJSProfileDisabled')) {\n      await this.startProfilingOnAllModels();\n    }\n\n    return this.tracingManager.start(this, categories, '');\n  }\n\n  traceEventsCollected(events: SDK.TracingManager.EventPayload[]): void {\n    this.tracingModel.addEvents(events);\n  }\n\n  tracingComplete(): void {\n    if (!this.tracingCompleteCallback) {\n      return;\n    }\n    this.tracingCompleteCallback(undefined);\n    this.tracingCompleteCallback = null;\n  }\n\n  private allSourcesFinished(): void {\n    this.client.processingStarted();\n    window.setTimeout(() => this.finalizeTrace(), 0);\n  }\n\n  private async finalizeTrace(): Promise<void> {\n    this.injectCpuProfileEvents();\n    await SDK.TargetManager.TargetManager.instance().resumeAllTargets();\n    this.tracingModel.tracingComplete();\n    this.client.loadingComplete(this.tracingModel);\n  }\n\n  private injectCpuProfileEvent(pid: number, tid: number, cpuProfile: Protocol.Profiler.Profile|null): void {\n    if (!cpuProfile) {\n      return;\n    }\n    // TODO(crbug/1011811): This event type is not compatible with the SDK.TracingManager.EventPayload.\n    // EventPayload requires many properties to be defined but it's not clear if they will have\n    // any side effects.\n    const cpuProfileEvent = ({\n      cat: SDK.TracingModel.DevToolsMetadataEventCategory,\n      ph: SDK.TracingModel.Phase.Instant,\n      ts: this.tracingModel.maximumRecordTime() * 1000,\n      pid: pid,\n      tid: tid,\n      name: TimelineModel.TimelineModel.RecordType.CpuProfile,\n      args: {data: {cpuProfile: cpuProfile}},\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any);\n    this.tracingModel.addEvents([cpuProfileEvent]);\n  }\n\n  private buildTargetToProcessIdMap(): Map<string, number>|null {\n    const metadataEventTypes = TimelineModel.TimelineModel.TimelineModelImpl.DevToolsMetadataEvent;\n    const metadataEvents = this.tracingModel.devToolsMetadataEvents();\n    const browserMetaEvent = metadataEvents.find(e => e.name === metadataEventTypes.TracingStartedInBrowser);\n    if (!browserMetaEvent) {\n      return null;\n    }\n\n    const pseudoPidToFrames = new Platform.MapUtilities.Multimap<string, string>();\n    const targetIdToPid = new Map<string, number>();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const frames: any[] = browserMetaEvent.args.data.frames;\n    for (const frameInfo of frames) {\n      targetIdToPid.set(frameInfo.frame, frameInfo.processId);\n    }\n    for (const event of metadataEvents) {\n      const data = event.args.data;\n      switch (event.name) {\n        case metadataEventTypes.FrameCommittedInBrowser:\n          if (data.processId) {\n            targetIdToPid.set(data.frame, data.processId);\n          } else {\n            pseudoPidToFrames.set(data.processPseudoId, data.frame);\n          }\n          break;\n        case metadataEventTypes.ProcessReadyInBrowser:\n          for (const frame of pseudoPidToFrames.get(data.processPseudoId) || []) {\n            targetIdToPid.set(frame, data.processId);\n          }\n          break;\n      }\n    }\n    const mainFrame = frames.find(frame => !frame.parent);\n    const mainRendererProcessId = mainFrame.processId;\n    const mainProcess = this.tracingModel.getProcessById(mainRendererProcessId);\n    if (mainProcess) {\n      const target = SDK.TargetManager.TargetManager.instance().mainTarget();\n      if (target) {\n        targetIdToPid.set(target.id(), mainProcess.id());\n      }\n    }\n    return targetIdToPid;\n  }\n\n  private injectCpuProfileEvents(): void {\n    if (!this.cpuProfiles) {\n      return;\n    }\n\n    const metadataEventTypes = TimelineModel.TimelineModel.TimelineModelImpl.DevToolsMetadataEvent;\n    const metadataEvents = this.tracingModel.devToolsMetadataEvents();\n\n    const targetIdToPid = this.buildTargetToProcessIdMap();\n    if (targetIdToPid) {\n      for (const [id, profile] of this.cpuProfiles) {\n        const pid = targetIdToPid.get(id);\n        if (!pid) {\n          continue;\n        }\n        const process = this.tracingModel.getProcessById(pid);\n        const thread =\n            process && process.threadByName(TimelineModel.TimelineModel.TimelineModelImpl.RendererMainThreadName);\n        if (thread) {\n          this.injectCpuProfileEvent(pid, thread.id(), profile);\n        }\n      }\n    } else {\n      // Legacy backends support.\n      const filteredEvents = metadataEvents.filter(event => event.name === metadataEventTypes.TracingStartedInPage);\n      const mainMetaEvent = filteredEvents[filteredEvents.length - 1];\n      if (mainMetaEvent) {\n        const pid = mainMetaEvent.thread.process().id();\n        if (this.tracingManager) {\n          const mainCpuProfile = this.cpuProfiles.get(this.tracingManager.target().id());\n          this.injectCpuProfileEvent(pid, mainMetaEvent.thread.id(), mainCpuProfile);\n        }\n      } else {\n        // Or there was no tracing manager in the main target at all, in this case build the model full\n        // of cpu profiles.\n        let tid = 0;\n        for (const pair of this.cpuProfiles) {\n          const target = SDK.TargetManager.TargetManager.instance().targetById(pair[0]);\n          const name = target && target.name();\n          this.tracingModel.addEvents(\n              TimelineModel.TimelineJSProfile.TimelineJSProfileProcessor.buildTraceProfileFromCpuProfile(\n                  pair[1], ++tid, /* injectPageEvent */ tid === 1, name));\n        }\n      }\n    }\n\n    const workerMetaEvents =\n        metadataEvents.filter(event => event.name === metadataEventTypes.TracingSessionIdForWorker);\n    for (const metaEvent of workerMetaEvents) {\n      const workerId = metaEvent.args['data']['workerId'];\n      const cpuProfile = this.cpuProfiles.get(workerId);\n      this.injectCpuProfileEvent(metaEvent.thread.process().id(), metaEvent.args['data']['workerThreadId'], cpuProfile);\n    }\n    this.cpuProfiles = null;\n  }\n\n  tracingBufferUsage(usage: number): void {\n    this.client.recordingProgress(usage);\n  }\n\n  eventsRetrievalProgress(progress: number): void {\n    this.client.loadingProgress(progress);\n  }\n}\n\nexport interface Client {\n  recordingProgress(usage: number): void;\n  loadingStarted(): void;\n  processingStarted(): void;\n  loadingProgress(progress?: number): void;\n  loadingComplete(tracingModel: SDK.TracingModel.TracingModel|null): void;\n}\nexport interface RecordingOptions {\n  enableJSSampling?: boolean;\n  capturePictures?: boolean;\n  captureFilmStrip?: boolean;\n  startCoverage?: boolean;\n}\n"]}