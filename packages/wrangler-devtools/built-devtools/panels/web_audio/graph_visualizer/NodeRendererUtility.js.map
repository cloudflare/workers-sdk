{"version":3,"file":"NodeRendererUtility.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/web_audio/graph_visualizer/NodeRendererUtility.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EACL,gBAAgB,EAChB,eAAe,EACf,kBAAkB,EAClB,oBAAoB,EACpB,qBAAqB,EACrB,oBAAoB,GACrB,MAAM,iBAAiB,CAAC;AAEzB;;;GAGG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,SAAiB,EAAS,EAAE;IAC/D,MAAM,CAAC,GAAG,eAAe,GAAG,kBAAkB,GAAG,SAAS,GAAG,oBAAoB,CAAC;IAClF,OAAO,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;AACtB,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,SAAiB,EAAE,QAAc,EAAE,eAAuB,EAAS,EAAE;IACzG,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,GAAG,QAAQ,CAAC;IACjC,MAAM,WAAW,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,eAAe,GAAG,CAAC,CAAC,GAAG,qBAAqB,GAAG,CAAC,CAAC;IAErG,OAAO,EAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,WAAW,EAAC,CAAC;AACpC,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,SAAiB,EAAE,OAAe,EAAS,EAAE;IAChF,MAAM,UAAU,GAAG,OAAO,GAAG,oBAAoB,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC;IACvF,OAAO,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,EAAC,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Point, Size} from './GraphStyle.js';\nimport {\n  AudioParamRadius,\n  InputPortRadius,\n  LeftSideTopPadding,\n  TotalInputPortHeight,\n  TotalOutputPortHeight,\n  TotalParamPortHeight,\n} from './GraphStyle.js';\n\n/**\n * Calculate the x, y value of input port.\n * Input ports are placed near the top of the left-side border.\n */\nexport const calculateInputPortXY = (portIndex: number): Point => {\n  const y = InputPortRadius + LeftSideTopPadding + portIndex * TotalInputPortHeight;\n  return {x: 0, y: y};\n};\n\n/**\n * Calculate the x, y value of output port.\n * Output ports are placed near the center of the right-side border.\n */\nexport const calculateOutputPortXY = (portIndex: number, nodeSize: Size, numberOfOutputs: number): Point => {\n  const {width, height} = nodeSize;\n  const outputPortY = (height / 2) + (2 * portIndex - numberOfOutputs + 1) * TotalOutputPortHeight / 2;\n\n  return {x: width, y: outputPortY};\n};\n\n/**\n * Calculate the x, y value of param port.\n * Param ports are placed near the bottom of the left-side border.\n */\nexport const calculateParamPortXY = (portIndex: number, offsetY: number): Point => {\n  const paramPortY = offsetY + TotalParamPortHeight * (portIndex + 1) - AudioParamRadius;\n  return {x: 0, y: paramPortY};\n};\n"]}