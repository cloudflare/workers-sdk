{"version":3,"file":"WebAudioModel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/web_audio/WebAudioModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nexport class WebAudioModel extends SDK.SDKModel.SDKModel<EventTypes> implements ProtocolProxyApi.WebAudioDispatcher {\n  private enabled: boolean;\n  private readonly agent: ProtocolProxyApi.WebAudioApi;\n  constructor(target: SDK.Target.Target) {\n    super(target);\n\n    this.enabled = false;\n\n    this.agent = target.webAudioAgent();\n    target.registerWebAudioDispatcher(this);\n\n    // TODO(crbug.com/963510): Some OfflineAudioContexts are not uninitialized\n    // properly because LifeCycleObserver::ContextDestroyed() is not fired for\n    // unknown reasons. This creates inconsistency in AudioGraphTracer\n    // and AudioContextSelector in DevTools.\n    //\n    // To resolve this inconsistency, we flush the leftover from the previous\n    // frame when the current page is loaded. This call can be omitted when the\n    // bug is fixed.\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.FrameNavigated, this.flushContexts, this);\n  }\n\n  private flushContexts(): void {\n    this.dispatchEventToListeners(Events.ModelReset);\n  }\n\n  async suspendModel(): Promise<void> {\n    this.dispatchEventToListeners(Events.ModelSuspend);\n    await this.agent.invoke_disable();\n  }\n\n  async resumeModel(): Promise<void> {\n    if (!this.enabled) {\n      return Promise.resolve();\n    }\n    await this.agent.invoke_enable();\n  }\n\n  ensureEnabled(): void {\n    if (this.enabled) {\n      return;\n    }\n    void this.agent.invoke_enable();\n    this.enabled = true;\n  }\n\n  contextCreated({context}: Protocol.WebAudio.ContextCreatedEvent): void {\n    this.dispatchEventToListeners(Events.ContextCreated, context);\n  }\n\n  contextWillBeDestroyed({contextId}: Protocol.WebAudio.ContextWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.ContextDestroyed, contextId);\n  }\n\n  contextChanged({context}: Protocol.WebAudio.ContextChangedEvent): void {\n    this.dispatchEventToListeners(Events.ContextChanged, context);\n  }\n\n  audioListenerCreated({listener}: Protocol.WebAudio.AudioListenerCreatedEvent): void {\n    this.dispatchEventToListeners(Events.AudioListenerCreated, listener);\n  }\n\n  audioListenerWillBeDestroyed({listenerId, contextId}: Protocol.WebAudio.AudioListenerWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.AudioListenerWillBeDestroyed, {listenerId, contextId});\n  }\n\n  audioNodeCreated({node}: Protocol.WebAudio.AudioNodeCreatedEvent): void {\n    this.dispatchEventToListeners(Events.AudioNodeCreated, node);\n  }\n\n  audioNodeWillBeDestroyed({contextId, nodeId}: Protocol.WebAudio.AudioNodeWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.AudioNodeWillBeDestroyed, {contextId, nodeId});\n  }\n\n  audioParamCreated({param}: Protocol.WebAudio.AudioParamCreatedEvent): void {\n    this.dispatchEventToListeners(Events.AudioParamCreated, param);\n  }\n\n  audioParamWillBeDestroyed({contextId, nodeId, paramId}: Protocol.WebAudio.AudioParamWillBeDestroyedEvent): void {\n    this.dispatchEventToListeners(Events.AudioParamWillBeDestroyed, {contextId, nodeId, paramId});\n  }\n\n  nodesConnected({contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex}:\n                     Protocol.WebAudio.NodesConnectedEvent): void {\n    this.dispatchEventToListeners(\n        Events.NodesConnected, {contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex});\n  }\n\n  nodesDisconnected({contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex}:\n                        Protocol.WebAudio.NodesDisconnectedEvent): void {\n    this.dispatchEventToListeners(\n        Events.NodesDisconnected, {contextId, sourceId, destinationId, sourceOutputIndex, destinationInputIndex});\n  }\n\n  nodeParamConnected({contextId, sourceId, destinationId, sourceOutputIndex}:\n                         Protocol.WebAudio.NodeParamConnectedEvent): void {\n    this.dispatchEventToListeners(Events.NodeParamConnected, {contextId, sourceId, destinationId, sourceOutputIndex});\n  }\n\n  nodeParamDisconnected({contextId, sourceId, destinationId, sourceOutputIndex}:\n                            Protocol.WebAudio.NodeParamDisconnectedEvent): void {\n    this.dispatchEventToListeners(\n        Events.NodeParamDisconnected, {contextId, sourceId, destinationId, sourceOutputIndex});\n  }\n\n  async requestRealtimeData(contextId: Protocol.WebAudio.GraphObjectId):\n      Promise<Protocol.WebAudio.ContextRealtimeData|null> {\n    const realtimeResponse = await this.agent.invoke_getRealtimeData({contextId});\n    return realtimeResponse.realtimeData;\n  }\n}\n\nSDK.SDKModel.SDKModel.register(WebAudioModel, {capabilities: SDK.Target.Capability.DOM, autostart: false});\n\nexport const enum Events {\n  ContextCreated = 'ContextCreated',\n  ContextDestroyed = 'ContextDestroyed',\n  ContextChanged = 'ContextChanged',\n  ModelReset = 'ModelReset',\n  ModelSuspend = 'ModelSuspend',\n  AudioListenerCreated = 'AudioListenerCreated',\n  AudioListenerWillBeDestroyed = 'AudioListenerWillBeDestroyed',\n  AudioNodeCreated = 'AudioNodeCreated',\n  AudioNodeWillBeDestroyed = 'AudioNodeWillBeDestroyed',\n  AudioParamCreated = 'AudioParamCreated',\n  AudioParamWillBeDestroyed = 'AudioParamWillBeDestroyed',\n  NodesConnected = 'NodesConnected',\n  NodesDisconnected = 'NodesDisconnected',\n  NodeParamConnected = 'NodeParamConnected',\n  NodeParamDisconnected = 'NodeParamDisconnected',\n}\n\nexport type EventTypes = {\n  [Events.ContextCreated]: Protocol.WebAudio.BaseAudioContext,\n  [Events.ContextDestroyed]: Protocol.WebAudio.GraphObjectId,\n  [Events.ContextChanged]: Protocol.WebAudio.BaseAudioContext,\n  [Events.ModelReset]: void,\n  [Events.ModelSuspend]: void,\n  [Events.AudioListenerCreated]: Protocol.WebAudio.AudioListener,\n  [Events.AudioListenerWillBeDestroyed]: Protocol.WebAudio.AudioListenerWillBeDestroyedEvent,\n  [Events.AudioNodeCreated]: Protocol.WebAudio.AudioNode,\n  [Events.AudioNodeWillBeDestroyed]: Protocol.WebAudio.AudioNodeWillBeDestroyedEvent,\n  [Events.AudioParamCreated]: Protocol.WebAudio.AudioParam,\n  [Events.AudioParamWillBeDestroyed]: Protocol.WebAudio.AudioParamWillBeDestroyedEvent,\n  [Events.NodesConnected]: Protocol.WebAudio.NodesConnectedEvent,\n  [Events.NodesDisconnected]: Protocol.WebAudio.NodesDisconnectedEvent,\n  [Events.NodeParamConnected]: Protocol.WebAudio.NodeParamConnectedEvent,\n  [Events.NodeParamDisconnected]: Protocol.WebAudio.NodeParamDisconnectedEvent,\n};\n"]}