{"version":3,"file":"ScriptFormatterEditorAction.js","sourceRoot":"","sources":["../../../../../../front_end/panels/sources/ScriptFormatterEditorAction.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,KAAK,eAAe,MAAM,qCAAqC,CAAC;AACvE,OAAO,KAAK,WAAW,MAAM,yCAAyC,CAAC;AACvE,OAAO,KAAK,SAAS,MAAM,qCAAqC,CAAC;AACjE,OAAO,KAAK,WAAW,MAAM,yDAAyD,CAAC;AACvF,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAGhD,OAAO,EAAC,MAAM,EAAE,oBAAoB,EAAC,MAAM,kBAAkB,CAAC;AAE9D,MAAM,SAAS,GAAG;IAChB;;;MAGE;IACF,YAAY,EAAE,oBAAoB;IAClC;;MAEE;IACF,WAAW,EAAE,cAAc;CAC5B,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,+CAA+C,EAAE,SAAS,CAAC,CAAC;AACrG,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAEtE,IAAI,mCAAgE,CAAC;AAErE,MAAM,OAAO,2BAA2B;IACrB,mBAAmB,CAAuC;IACnE,WAAW,CAAe;IAC1B,MAAM,CAA4B;IAC1C;QACE,IAAI,CAAC,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,mCAAmC,IAAI,QAAQ,EAAE;YACpD,mCAAmC,GAAG,IAAI,2BAA2B,EAAE,CAAC;SACzE;QAED,OAAO,mCAAmC,CAAC;IAC7C,CAAC;IAEO,cAAc,CAAC,KAA+E;QACpG,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC;QAChC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAEhC,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;YAC1F,CAAC,eAAe,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;YAC1F,KAAK,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;SACvC;IACH,CAAC;IAEO,KAAK,CAAC,YAAY,CAAC,KAA6D;QACtF,MAAM,EAAC,YAAY,EAAE,WAAW,EAAC,GAAG,KAAK,CAAC,IAAI,CAAC;QAE/C,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACzB;QACD,MAAM,QAAQ,GACV,MAAM,eAAe,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,4BAA4B,CAAC,YAAY,CAAC,CAAC;QAChH,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;SACjD;IACH,CAAC;IAEO,YAAY,CAAC,YAAsD;QACzE,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC;QAC/D,IAAI,YAAY,EAAE;YAChB,0EAA0E;YAC1E,yEAAyE;YACzE,iEAAiE;YACjE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,EAAC,GAAG,EAAE,YAAY,CAAC,IAAI,EAAE,EAAC,CAAC,CAAC,CAAC;SACtF;IACH,CAAC;IAED,iBAAiB,CAAC,WAAwB;QACxC,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,IAAI,CAAC,MAAM,CAAC;SACpB;QAED,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,cAAc,EAAE,KAAK,CAAC,EAAE;YAC/D,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,EAAE;YAC7D,KAAK,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,wBAAwB,CAAC,CAAC;QACxG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;QAC5G,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAErD,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEO,mBAAmB,CAAC,YAAsD;QAChF,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,KAAK,CAAC;SACd;QACD,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC,iBAAiB,EAAE,EAAE;YAC9C,OAAO,KAAK,CAAC;SACd;QACD,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,KAAK,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,EAAE;YAChF,OAAO,KAAK,CAAC;SACd;QACD,IAAI,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YAC5E,OAAO,KAAK,CAAC;SACd;QACD,IAAI,YAAY,CAAC,QAAQ,EAAE,KAAK,kBAAkB,EAAE;YAClD,OAAO,KAAK,CAAC;SACd;QACD,OAAO,YAAY,CAAC,WAAW,EAAE,CAAC,UAAU,EAAE,CAAC;IACjD,CAAC;IAED,gCAAgC;QAC9B,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC;QAC5D,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAChD,CAAC;IAEO,2BAA2B;QACjC,IAAI,CAAC,wBAAwB,EAAE,CAAC;IAClC,CAAC;IAED,wBAAwB;QACtB,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC;QAC5D,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAE;YAC5D,OAAO;SACR;QACD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC;QACjD,KAAK,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACxC,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,YAAiD;QAC3E,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACzG,IAAI,YAAY,KAAK,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,EAAE;YAC3D,OAAO;SACR;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAC/D,IAAI,KAAK,GAAsB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACtC,IAAI,WAAW,YAAY,WAAW,CAAC,WAAW,CAAC,eAAe,EAAE;YAClE,MAAM,SAAS,GAAG,WAAW,CAAC,UAAU,CAAC,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxG,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,mBAAmB,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;SAC9F;QACD,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,UAAU,CAAC,mBAAmB,EAAE,EAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IACtH,CAAC;CACF;AAED,oBAAoB,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as FormatterModule from '../../models/formatter/formatter.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {EditorAction, EditorClosedEvent, SourcesView} from './SourcesView.js';\nimport {Events, registerEditorAction} from './SourcesView.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of the pretty print button in the Sources panel\n  *@example {file name} PH1\n  */\n  prettyPrintS: 'Pretty print {PH1}',\n  /**\n  *@description Text to pretty print a file\n  */\n  prettyPrint: 'Pretty print',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/ScriptFormatterEditorAction.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet scriptFormatterEditorActionInstance: ScriptFormatterEditorAction;\n\nexport class ScriptFormatterEditorAction implements EditorAction {\n  private readonly pathsToFormatOnLoad: Set<Platform.DevToolsPath.UrlString>;\n  private sourcesView!: SourcesView;\n  private button!: UI.Toolbar.ToolbarButton;\n  private constructor() {\n    this.pathsToFormatOnLoad = new Set();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ScriptFormatterEditorAction {\n    const {forceNew} = opts;\n    if (!scriptFormatterEditorActionInstance || forceNew) {\n      scriptFormatterEditorActionInstance = new ScriptFormatterEditorAction();\n    }\n\n    return scriptFormatterEditorActionInstance;\n  }\n\n  private editorSelected(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.updateButton(uiSourceCode);\n\n    if (this.isFormattableScript(uiSourceCode) && this.pathsToFormatOnLoad.has(uiSourceCode.url()) &&\n        !FormatterModule.SourceFormatter.SourceFormatter.instance().hasFormatted(uiSourceCode)) {\n      void this.showFormatted(uiSourceCode);\n    }\n  }\n\n  private async editorClosed(event: Common.EventTarget.EventTargetEvent<EditorClosedEvent>): Promise<void> {\n    const {uiSourceCode, wasSelected} = event.data;\n\n    if (wasSelected) {\n      this.updateButton(null);\n    }\n    const original =\n        await FormatterModule.SourceFormatter.SourceFormatter.instance().discardFormattedUISourceCode(uiSourceCode);\n    if (original) {\n      this.pathsToFormatOnLoad.delete(original.url());\n    }\n  }\n\n  private updateButton(uiSourceCode: Workspace.UISourceCode.UISourceCode|null): void {\n    const isFormattable = this.isFormattableScript(uiSourceCode);\n    this.button.element.classList.toggle('hidden', !isFormattable);\n    if (uiSourceCode) {\n      // We always update the title of the button, even if the {uiSourceCode} is\n      // not formattable, since we use the title (the aria-label actually) as a\n      // signal for the E2E tests that the source code loading is done.\n      this.button.setTitle(i18nString(UIStrings.prettyPrintS, {PH1: uiSourceCode.name()}));\n    }\n  }\n\n  getOrCreateButton(sourcesView: SourcesView): UI.Toolbar.ToolbarButton {\n    if (this.button) {\n      return this.button;\n    }\n\n    this.sourcesView = sourcesView;\n    this.sourcesView.addEventListener(Events.EditorSelected, event => {\n      this.editorSelected(event);\n    });\n    this.sourcesView.addEventListener(Events.EditorClosed, event => {\n      void this.editorClosed(event);\n    });\n\n    this.button = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.prettyPrint), 'largeicon-pretty-print');\n    this.button.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.onFormatScriptButtonClicked, this);\n    this.updateButton(sourcesView.currentUISourceCode());\n\n    return this.button;\n  }\n\n  private isFormattableScript(uiSourceCode: Workspace.UISourceCode.UISourceCode|null): boolean {\n    if (!uiSourceCode) {\n      return false;\n    }\n    if (uiSourceCode.project().canSetFileContent()) {\n      return false;\n    }\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Formatter) {\n      return false;\n    }\n    if (Persistence.Persistence.PersistenceImpl.instance().binding(uiSourceCode)) {\n      return false;\n    }\n    if (uiSourceCode.mimeType() === 'application/wasm') {\n      return false;\n    }\n    return uiSourceCode.contentType().hasScripts();\n  }\n\n  isCurrentUISourceCodeFormattable(): boolean {\n    const uiSourceCode = this.sourcesView.currentUISourceCode();\n    return this.isFormattableScript(uiSourceCode);\n  }\n\n  private onFormatScriptButtonClicked(): void {\n    this.toggleFormatScriptSource();\n  }\n\n  toggleFormatScriptSource(): void {\n    const uiSourceCode = this.sourcesView.currentUISourceCode();\n    if (!uiSourceCode || !this.isFormattableScript(uiSourceCode)) {\n      return;\n    }\n    this.pathsToFormatOnLoad.add(uiSourceCode.url());\n    void this.showFormatted(uiSourceCode);\n  }\n\n  private async showFormatted(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const formatData = await FormatterModule.SourceFormatter.SourceFormatter.instance().format(uiSourceCode);\n    if (uiSourceCode !== this.sourcesView.currentUISourceCode()) {\n      return;\n    }\n    const sourceFrame = this.sourcesView.viewForFile(uiSourceCode);\n    let start: number[]|number[] = [0, 0];\n    if (sourceFrame instanceof SourceFrame.SourceFrame.SourceFrameImpl) {\n      const selection = sourceFrame.textEditor.toLineColumn(sourceFrame.textEditor.state.selection.main.head);\n      start = formatData.mapping.originalToFormatted(selection.lineNumber, selection.columnNumber);\n    }\n    this.sourcesView.showSourceLocation(formatData.formattedSourceCode, {lineNumber: start[0], columnNumber: start[1]});\n  }\n}\n\nregisterEditorAction(ScriptFormatterEditorAction.instance);\n"]}