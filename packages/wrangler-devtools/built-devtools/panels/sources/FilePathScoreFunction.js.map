{"version":3,"file":"FilePathScoreFunction.js","sourceRoot":"","sources":["../../../../../../front_end/panels/sources/FilePathScoreFunction.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport class FilePathScoreFunction {\n  private query: string;\n  private readonly queryUpperCase: string;\n  private score: Int32Array;\n  private sequence: Int32Array;\n  private dataUpperCase: string;\n  private fileNameIndex: number;\n\n  constructor(query: string) {\n    this.query = query;\n    this.queryUpperCase = query.toUpperCase();\n    this.score = new Int32Array(20 * 100);\n    this.sequence = new Int32Array(20 * 100);\n    this.dataUpperCase = '';\n    this.fileNameIndex = 0;\n  }\n\n  calculateScore(data: string, matchIndexes: number[]|null): number {\n    if (!data || !this.query) {\n      return 0;\n    }\n    const n = this.query.length;\n    const m = data.length;\n    if (!this.score || this.score.length < n * m) {\n      this.score = new Int32Array(n * m * 2);\n      this.sequence = new Int32Array(n * m * 2);\n    }\n    const score = this.score;\n    const sequence = (this.sequence as Int32Array);\n    this.dataUpperCase = data.toUpperCase();\n    this.fileNameIndex = data.lastIndexOf('/');\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0; j < m; ++j) {\n        const skipCharScore = j === 0 ? 0 : score[i * m + j - 1];\n        const prevCharScore = i === 0 || j === 0 ? 0 : score[(i - 1) * m + j - 1];\n        const consecutiveMatch = i === 0 || j === 0 ? 0 : sequence[(i - 1) * m + j - 1];\n        const pickCharScore = this.match(this.query, data, i, j, consecutiveMatch);\n        if (pickCharScore && prevCharScore + pickCharScore >= skipCharScore) {\n          sequence[i * m + j] = consecutiveMatch + 1;\n          score[i * m + j] = (prevCharScore + pickCharScore);\n        } else {\n          sequence[i * m + j] = 0;\n          score[i * m + j] = skipCharScore;\n        }\n      }\n    }\n    if (matchIndexes) {\n      this.restoreMatchIndexes(sequence, n, m, matchIndexes);\n    }\n    const maxDataLength = 256;\n    return score[n * m - 1] * maxDataLength + (maxDataLength - data.length);\n  }\n\n  private testWordStart(data: string, j: number): boolean {\n    if (j === 0) {\n      return true;\n    }\n\n    const prevChar = data.charAt(j - 1);\n    return prevChar === '_' || prevChar === '-' || prevChar === '/' || prevChar === '.' || prevChar === ' ' ||\n        (data[j - 1] !== this.dataUpperCase[j - 1] && data[j] === this.dataUpperCase[j]);\n  }\n\n  private restoreMatchIndexes(sequence: Int32Array, n: number, m: number, out: number[]): void {\n    let i = n - 1, j = m - 1;\n    while (i >= 0 && j >= 0) {\n      switch (sequence[i * m + j]) {\n        case 0:\n          --j;\n          break;\n        default:\n          out.push(j);\n          --i;\n          --j;\n          break;\n      }\n    }\n    out.reverse();\n  }\n\n  private singleCharScore(query: string, data: string, i: number, j: number): number {\n    const isWordStart = this.testWordStart(data, j);\n    const isFileName = j > this.fileNameIndex;\n    const isPathTokenStart = j === 0 || data[j - 1] === '/';\n    const isCapsMatch = query[i] === data[j] && query[i] === this.queryUpperCase[i];\n    let score = 10;\n    if (isPathTokenStart) {\n      score += 4;\n    }\n    if (isWordStart) {\n      score += 2;\n    }\n    if (isCapsMatch) {\n      score += 6;\n    }\n    if (isFileName) {\n      score += 4;\n    }\n    // promote the case of making the whole match in the filename\n    if (j === this.fileNameIndex + 1 && i === 0) {\n      score += 5;\n    }\n    if (isFileName && isWordStart) {\n      score += 3;\n    }\n    return score;\n  }\n\n  private sequenceCharScore(query: string, data: string, i: number, j: number, sequenceLength: number): number {\n    const isFileName = j > this.fileNameIndex;\n    const isPathTokenStart = j === 0 || data[j - 1] === '/';\n    let score = 10;\n    if (isFileName) {\n      score += 4;\n    }\n    if (isPathTokenStart) {\n      score += 5;\n    }\n    score += sequenceLength * 4;\n    return score;\n  }\n\n  private match(query: string, data: string, i: number, j: number, consecutiveMatch: number): number {\n    if (this.queryUpperCase[i] !== this.dataUpperCase[j]) {\n      return 0;\n    }\n\n    if (!consecutiveMatch) {\n      return this.singleCharScore(query, data, i, j);\n    }\n    return this.sequenceCharScore(query, data, i, j - consecutiveMatch, consecutiveMatch);\n  }\n}\n"]}