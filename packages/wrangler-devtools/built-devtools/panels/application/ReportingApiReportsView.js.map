{"version":3,"file":"ReportingApiReportsView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/ReportingApiReportsView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as DataGrid from '../../ui/components/data_grid/data_grid.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as ApplicationComponents from './components/components.js';\n\nimport reportingApiReportsViewStyles from './reportingApiReportsView.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Placeholder text instructing the user how to display a Reporting API\n  *report body (https://developers.google.com/web/updates/2018/09/reportingapi#sending).\n  */\n  clickToDisplayBody: 'Click on any report to display its body',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/ReportingApiReportsView.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ReportingApiReportsView extends UI.SplitWidget.SplitWidget {\n  private readonly reportsGrid = new ApplicationComponents.ReportsGrid.ReportsGrid();\n  private reports: Protocol.Network.ReportingApiReport[] = [];\n\n  constructor(networkManager: SDK.NetworkManager.NetworkManager) {\n    super(/* isVertical: */ false, /* secondIsSidebar: */ true);\n    const topPanel = new UI.Widget.VBox();\n    const bottomPanel = new UI.Widget.VBox();\n    topPanel.setMinimumSize(0, 80);\n    this.setMainWidget(topPanel);\n    bottomPanel.setMinimumSize(0, 40);\n    this.setSidebarWidget(bottomPanel);\n\n    topPanel.contentElement.appendChild(this.reportsGrid);\n    this.reportsGrid.addEventListener('cellfocused', this.onFocus.bind(this));\n\n    bottomPanel.contentElement.classList.add('placeholder');\n    const centered = bottomPanel.contentElement.createChild('div');\n    centered.textContent = i18nString(UIStrings.clickToDisplayBody);\n\n    networkManager.addEventListener(\n        SDK.NetworkManager.Events.ReportingApiReportAdded, event => this.onReportAdded(event.data), this);\n    networkManager.addEventListener(\n        SDK.NetworkManager.Events.ReportingApiReportUpdated, event => this.onReportUpdated(event.data), this);\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    const sbw = this.sidebarWidget();\n    if (sbw) {\n      sbw.registerCSSFiles([reportingApiReportsViewStyles]);\n    }\n  }\n\n  private onReportAdded(report: Protocol.Network.ReportingApiReport): void {\n    this.reports.push(report);\n    this.reportsGrid.data = {reports: this.reports};\n  }\n\n  private onReportUpdated(report: Protocol.Network.ReportingApiReport): void {\n    const index = this.reports.findIndex(oldReport => oldReport.id === report.id);\n    this.reports[index] = report;\n    this.reportsGrid.data = {reports: this.reports};\n  }\n\n  private async onFocus(event: Event): Promise<void> {\n    const focusedEvent = event as DataGrid.DataGridEvents.BodyCellFocusedEvent;\n    const cell = focusedEvent.data.row.cells.find(cell => cell.columnId === 'id');\n    const report = cell && this.reports.find(report => report.id === cell.value);\n    if (report) {\n      const jsonView = await SourceFrame.JSONView.JSONView.createView(JSON.stringify(report.body));\n      jsonView?.setMinimumSize(0, 40);\n      if (jsonView) {\n        this.setSidebarWidget(jsonView);\n      }\n    }\n  }\n\n  getReports(): Protocol.Network.ReportingApiReport[] {\n    return this.reports;\n  }\n\n  getReportsGrid(): ApplicationComponents.ReportsGrid.ReportsGrid {\n    return this.reportsGrid;\n  }\n}\n"]}