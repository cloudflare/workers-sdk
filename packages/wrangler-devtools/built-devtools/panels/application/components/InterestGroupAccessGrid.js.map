{"version":3,"file":"InterestGroupAccessGrid.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/InterestGroupAccessGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as DataGrid from '../../../ui/components/data_grid/data_grid.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport type * as Protocol from '../../../generated/protocol.js';\n\nimport interestGroupAccessGridStyles from './interestGroupAccessGrid.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Hover text for an info icon in the Interest Group Event panel\n  * An interest group is an ad targeting group stored on the browser that can\n  * be used to show a certain set of advertisements in the future as the\n  * outcome of a FLEDGE auction.\n  */\n  allInterestGroupStorageEvents: 'All interest group storage events.',\n  /**\n    *@description Text in InterestGroupStorage Items View of the Application panel\n    * Date and time of an Interest Group storage event in a locale-\n    * dependent format.\n    */\n  eventTime: 'Event Time',\n  /**\n  *@description Text in InterestGroupStorage Items View of the Application panel\n  * Type of interest group event such as 'join', 'bid', 'win', or 'leave'.\n  */\n  eventType: 'Access Type',\n  /**\n   *@description Text in InterestGroupStorage Items View of the Application panel\n   * Owner of the interest group. The origin that controls the\n   * content of information associated with the interest group such as which\n   * ads get displayed.\n  */\n  groupOwner: 'Owner',\n  /**\n   *@description Text in InterestGroupStorage Items View of the Application panel\n   * Name of the interest group. The name is unique per-owner and identifies the\n   * interest group.\n  */\n  groupName: 'Name',\n  /**\n   *@description Text shown instead of a table when the table would be empty.\n  */\n  noEvents: 'No interest group events recorded.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/components/InterestGroupAccessGrid.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class InterestGroupAccessGrid extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-interest-group-access-grid`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #datastores: Array<Protocol.Storage.InterestGroupAccessedEvent> = [];\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [interestGroupAccessGridStyles];\n    this.#render();\n  }\n\n  set data(data: Array<Protocol.Storage.InterestGroupAccessedEvent>) {\n    this.#datastores = data;\n    this.#render();\n  }\n\n  #render(): void {\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <div>\n        <span class=\"heading\">Interest Groups</span>\n        <${IconButton.Icon.Icon.litTagName} class=\"info-icon\" title=${\n            i18nString(UIStrings.allInterestGroupStorageEvents)}\n          .data=${\n            {iconName: 'ic_info_black_18dp', color: 'var(--color-link)', width: '14px'} as\n            IconButton.Icon.IconWithName}>\n        </${IconButton.Icon.Icon.litTagName}>\n        ${this.#renderGridOrNoDataMessage()}\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #renderGridOrNoDataMessage(): LitHtml.TemplateResult {\n    if (this.#datastores.length === 0) {\n      return LitHtml.html`<div class=\"no-events-message\">${i18nString(UIStrings.noEvents)}</div>`;\n    }\n\n    const gridData: DataGrid.DataGridController.DataGridControllerData = {\n      columns: [\n        {\n          id: 'event-time',\n          title: i18nString(UIStrings.eventTime),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'event-type',\n          title: i18nString(UIStrings.eventType),\n          widthWeighting: 5,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'event-group-owner',\n          title: i18nString(UIStrings.groupOwner),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'event-group-name',\n          title: i18nString(UIStrings.groupName),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n      ],\n      rows: this.#buildRows(),\n      initialSort: {\n        columnId: 'event-time',\n        direction: DataGrid.DataGridUtils.SortDirection.ASC,\n      },\n    };\n\n    return LitHtml.html`\n      <${DataGrid.DataGridController.DataGridController.litTagName} .data=${\n        gridData as DataGrid.DataGridController.DataGridControllerData}></${\n        DataGrid.DataGridController.DataGridController.litTagName}>\n    `;\n  }\n\n  #buildRows(): DataGrid.DataGridUtils.Row[] {\n    return this.#datastores.map(event => ({\n                                  cells: [\n                                    {\n                                      columnId: 'event-time',\n                                      value: event.accessTime,\n                                      renderer: this.#renderDateForDataGridCell.bind(this),\n                                    },\n                                    {columnId: 'event-type', value: event.type},\n                                    {columnId: 'event-group-owner', value: event.ownerOrigin},\n                                    {columnId: 'event-group-name', value: event.name},\n                                  ],\n                                }));\n  }\n\n  #renderDateForDataGridCell(value: DataGrid.DataGridUtils.CellValue): LitHtml.TemplateResult {\n    const date = new Date(1e3 * (value as number));\n    return LitHtml.html`${date.toLocaleString()}`;\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-interest-group-access-grid', InterestGroupAccessGrid);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-interest-group-access-grid': InterestGroupAccessGrid;\n  }\n}\n"]}