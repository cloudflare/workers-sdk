{"version":3,"file":"DatabaseTableView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/DatabaseTableView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2008 Apple Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {Database} from './DatabaseModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Database Table View of the Application panel\n  */\n  database: 'Database',\n  /**\n  *@description Text to refresh the page\n  */\n  refresh: 'Refresh',\n  /**\n  *@description Text in Database Table View of the Application panel\n  */\n  visibleColumns: 'Visible columns',\n  /**\n  *@description Text in Database Table View of the Application panel\n  *@example {database} PH1\n  */\n  theStableIsEmpty: 'The \"{PH1}\" table is empty.',\n  /**\n  *@description Error msg element text content in Database Table View of the Application panel\n  *@example {database} PH1\n  */\n  anErrorOccurredTryingToreadTheS: 'An error occurred trying to read the \"{PH1}\" table.',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/DatabaseTableView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface VisibleColumnsSetting {\n  [tableName: string]: string;\n}\nexport class DatabaseTableView extends UI.View.SimpleView {\n  database: Database;\n  tableName: string;\n  private lastVisibleColumns: string;\n  private readonly columnsMap: Map<string, string>;\n  private readonly visibleColumnsSetting: Common.Settings.Setting<VisibleColumnsSetting>;\n  refreshButton: UI.Toolbar.ToolbarButton;\n  private readonly visibleColumnsInput: UI.Toolbar.ToolbarInput;\n  private dataGrid: DataGrid.SortableDataGrid.SortableDataGrid<DataGrid.SortableDataGrid.SortableDataGridNode<unknown>>|\n      null;\n  private emptyWidget?: UI.EmptyWidget.EmptyWidget;\n\n  constructor(database: Database, tableName: string) {\n    super(i18nString(UIStrings.database));\n\n    this.database = database;\n    this.tableName = tableName;\n    this.lastVisibleColumns = '';\n    this.columnsMap = new Map();\n\n    this.element.classList.add('storage-view', 'table');\n\n    this.visibleColumnsSetting =\n        Common.Settings.Settings.instance().createSetting('databaseTableViewVisibleColumns', {});\n\n    this.refreshButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.refresh), 'largeicon-refresh');\n    this.refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.refreshButtonClicked, this);\n    this.visibleColumnsInput = new UI.Toolbar.ToolbarInput(i18nString(UIStrings.visibleColumns), '', 1);\n    this.visibleColumnsInput.addEventListener(\n        UI.Toolbar.ToolbarInput.Event.TextChanged, this.onVisibleColumnsChanged, this);\n\n    this.dataGrid = null;\n  }\n\n  wasShown(): void {\n    this.update();\n  }\n\n  async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [this.refreshButton, this.visibleColumnsInput];\n  }\n\n  private escapeTableName(tableName: string): string {\n    return tableName.replace(/\\\"/g, '\"\"');\n  }\n\n  update(): void {\n    void this.database.executeSql(\n        'SELECT rowid, * FROM \"' + this.escapeTableName(this.tableName) + '\"', this.queryFinished.bind(this),\n        this.queryError.bind(this));\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private queryFinished(columnNames: string[], values: any[]): void {\n    this.detachChildWidgets();\n    this.element.removeChildren();\n\n    this.dataGrid =\n        DataGrid.SortableDataGrid.SortableDataGrid.create(columnNames, values, i18nString(UIStrings.database));\n    this.visibleColumnsInput.setVisible(Boolean(this.dataGrid));\n    if (!this.dataGrid) {\n      this.emptyWidget = new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.theStableIsEmpty, {PH1: this.tableName}));\n      this.emptyWidget.show(this.element);\n      return;\n    }\n    this.dataGrid.setStriped(true);\n    this.dataGrid.asWidget().show(this.element);\n    this.dataGrid.autoSizeColumns(5);\n\n    this.columnsMap.clear();\n    for (let i = 1; i < columnNames.length; ++i) {\n      this.columnsMap.set(columnNames[i], String(i));\n    }\n    this.lastVisibleColumns = '';\n    const visibleColumnsText = this.visibleColumnsSetting.get()[this.tableName] || '';\n    this.visibleColumnsInput.setValue(visibleColumnsText);\n    this.onVisibleColumnsChanged();\n  }\n\n  private onVisibleColumnsChanged(): void {\n    if (!this.dataGrid) {\n      return;\n    }\n    const text = this.visibleColumnsInput.value();\n    const parts = text.split(/[\\s,]+/);\n    const matches = new Set<string>();\n    const columnsVisibility = new Set<string>();\n    columnsVisibility.add('0');\n    for (const part of parts) {\n      const mappedColumn = this.columnsMap.get(part);\n      if (mappedColumn !== undefined) {\n        matches.add(part);\n        columnsVisibility.add(mappedColumn);\n      }\n    }\n    const newVisibleColumns = [...matches].sort().join(', ');\n    if (newVisibleColumns.length === 0) {\n      for (const v of this.columnsMap.values()) {\n        columnsVisibility.add(v);\n      }\n    }\n    if (newVisibleColumns === this.lastVisibleColumns) {\n      return;\n    }\n    const visibleColumnsRegistry = this.visibleColumnsSetting.get();\n    visibleColumnsRegistry[this.tableName] = text;\n    this.visibleColumnsSetting.set(visibleColumnsRegistry);\n    this.dataGrid.setColumnsVisiblity(columnsVisibility);\n    this.lastVisibleColumns = newVisibleColumns;\n  }\n\n  private queryError(): void {\n    this.detachChildWidgets();\n    this.element.removeChildren();\n\n    const errorMsgElement = document.createElement('div');\n    errorMsgElement.className = 'storage-table-error';\n    errorMsgElement.textContent = i18nString(UIStrings.anErrorOccurredTryingToreadTheS, {PH1: this.tableName});\n    this.element.appendChild(errorMsgElement);\n  }\n\n  private refreshButtonClicked(): void {\n    this.update();\n  }\n}\n"]}