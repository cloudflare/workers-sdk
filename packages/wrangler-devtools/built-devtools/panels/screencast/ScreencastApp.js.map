{"version":3,"file":"ScreencastApp.js","sourceRoot":"","sources":["../../../../../../front_end/panels/screencast/ScreencastApp.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ScreencastView} from './ScreencastView.js';\n\nconst UIStrings = {\n  /**\n  *@description Tooltip text that appears when hovering over largeicon phone button in Screencast App of the Remote Devices tab when toggling screencast\n  */\n  toggleScreencast: 'Toggle screencast',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/screencast/ScreencastApp.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet appInstance: ScreencastApp;\n\nexport class ScreencastApp implements Common.App.App,\n                                      SDK.TargetManager.SDKModelObserver<SDK.ScreenCaptureModel.ScreenCaptureModel> {\n  private readonly enabledSetting: Common.Settings.Setting<boolean>;\n  toggleButton: UI.Toolbar.ToolbarToggle;\n  private rootSplitWidget?: UI.SplitWidget.SplitWidget;\n  private screenCaptureModel?: SDK.ScreenCaptureModel.ScreenCaptureModel;\n  private screencastView?: ScreencastView;\n  constructor() {\n    this.enabledSetting = Common.Settings.Settings.instance().createSetting('screencastEnabled', true);\n    this.toggleButton = new UI.Toolbar.ToolbarToggle(i18nString(UIStrings.toggleScreencast), 'largeicon-phone');\n    this.toggleButton.setToggled(this.enabledSetting.get());\n    this.toggleButton.setEnabled(false);\n    this.toggleButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.toggleButtonClicked, this);\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.ScreenCaptureModel.ScreenCaptureModel, this);\n  }\n\n  static instance(): ScreencastApp {\n    if (!appInstance) {\n      appInstance = new ScreencastApp();\n    }\n    return appInstance;\n  }\n\n  presentUI(document: Document): void {\n    const rootView = new UI.RootView.RootView();\n\n    this.rootSplitWidget =\n        new UI.SplitWidget.SplitWidget(false, true, 'InspectorView.screencastSplitViewState', 300, 300);\n    this.rootSplitWidget.setVertical(true);\n    this.rootSplitWidget.setSecondIsSidebar(true);\n    this.rootSplitWidget.show(rootView.element);\n    this.rootSplitWidget.hideMain();\n\n    this.rootSplitWidget.setSidebarWidget(UI.InspectorView.InspectorView.instance());\n    UI.InspectorView.InspectorView.instance().setOwnerSplit(this.rootSplitWidget);\n    rootView.attachToDocument(document);\n    rootView.focus();\n  }\n\n  modelAdded(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel): void {\n    if (this.screenCaptureModel) {\n      return;\n    }\n    this.screenCaptureModel = screenCaptureModel;\n    this.toggleButton.setEnabled(true);\n    this.screencastView = new ScreencastView(screenCaptureModel);\n    if (this.rootSplitWidget) {\n      this.rootSplitWidget.setMainWidget(this.screencastView);\n    }\n    this.screencastView.initialize();\n    this.onScreencastEnabledChanged();\n  }\n\n  modelRemoved(screenCaptureModel: SDK.ScreenCaptureModel.ScreenCaptureModel): void {\n    if (this.screenCaptureModel !== screenCaptureModel) {\n      return;\n    }\n    delete this.screenCaptureModel;\n    this.toggleButton.setEnabled(false);\n    if (this.screencastView) {\n      this.screencastView.detach();\n      delete this.screencastView;\n    }\n    this.onScreencastEnabledChanged();\n  }\n\n  private toggleButtonClicked(): void {\n    const enabled = !this.toggleButton.toggled();\n    this.enabledSetting.set(enabled);\n    this.onScreencastEnabledChanged();\n  }\n\n  private onScreencastEnabledChanged(): void {\n    if (!this.rootSplitWidget) {\n      return;\n    }\n    const enabled = Boolean(this.enabledSetting.get() && this.screencastView);\n    this.toggleButton.setToggled(enabled);\n    if (enabled) {\n      this.rootSplitWidget.showBoth();\n    } else {\n      this.rootSplitWidget.hideMain();\n    }\n  }\n}\n\nlet toolbarButtonProviderInstance: ToolbarButtonProvider;\n\nexport class ToolbarButtonProvider implements UI.Toolbar.Provider {\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): ToolbarButtonProvider {\n    const {forceNew} = opts;\n    if (!toolbarButtonProviderInstance || forceNew) {\n      toolbarButtonProviderInstance = new ToolbarButtonProvider();\n    }\n\n    return toolbarButtonProviderInstance;\n  }\n\n  item(): UI.Toolbar.ToolbarItem|null {\n    return ScreencastApp.instance().toggleButton;\n  }\n}\n\nlet screencastAppProviderInstance: ScreencastAppProvider;\n\nexport class ScreencastAppProvider implements Common.AppProvider.AppProvider {\n  static instance(opts: {forceNew: boolean} = {forceNew: false}): ScreencastAppProvider {\n    const {forceNew} = opts;\n    if (!screencastAppProviderInstance || forceNew) {\n      screencastAppProviderInstance = new ScreencastAppProvider();\n    }\n\n    return screencastAppProviderInstance;\n  }\n\n  createApp(): Common.App.App {\n    return ScreencastApp.instance();\n  }\n}\n"]}