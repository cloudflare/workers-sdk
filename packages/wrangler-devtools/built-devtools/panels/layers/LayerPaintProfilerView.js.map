{"version":3,"file":"LayerPaintProfilerView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/layers/LayerPaintProfilerView.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,WAAW,MAAM,iCAAiC,CAAC;AAE/D,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAEhD,MAAM,OAAO,sBAAuB,SAAQ,EAAE,CAAC,WAAW,CAAC,WAAW;IACnD,WAAW,CAA4D;IACvE,iBAAiB,CAAkD;IACpF,YAAY,iBAAoD;QAC9D,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAEnB,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,iBAAiB,CAAC,2BAA2B,EAAE,CAAC;QACnF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxC,IAAI,CAAC,iBAAiB,GAAG,IAAI,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QAChG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAE3C,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CACnC,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QAEpF,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK;QACH,KAAK,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;IAChE,CAAC;IAED,OAAO,CAAC,QAAiD;QACvD,KAAK,QAAQ,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QAEpF,SAAS,iBAAiB,CACQ,QAAsD,EACpF,GAAkD;YACpD,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;YAC1C,KAAK,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,GAAG,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;YACzE,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,OAAO,EAAE,CAAC;aACpB;QACH,CAAC;IACH,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAEO,eAAe;QACrB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,CAAC,CAAC;IAC1E,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LayerViewer from '../layer_viewer/layer_viewer.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nexport class LayerPaintProfilerView extends UI.SplitWidget.SplitWidget {\n  private readonly logTreeView: LayerViewer.PaintProfilerView.PaintProfilerCommandLogView;\n  private readonly paintProfilerView: LayerViewer.PaintProfilerView.PaintProfilerView;\n  constructor(showImageCallback: (arg0?: string|undefined) => void) {\n    super(true, false);\n\n    this.logTreeView = new LayerViewer.PaintProfilerView.PaintProfilerCommandLogView();\n    this.setSidebarWidget(this.logTreeView);\n    this.paintProfilerView = new LayerViewer.PaintProfilerView.PaintProfilerView(showImageCallback);\n    this.setMainWidget(this.paintProfilerView);\n\n    this.paintProfilerView.addEventListener(\n        LayerViewer.PaintProfilerView.Events.WindowChanged, this.onWindowChanged, this);\n\n    this.logTreeView.focus();\n  }\n\n  reset(): void {\n    void this.paintProfilerView.setSnapshotAndLog(null, [], null);\n  }\n\n  profile(snapshot: SDK.PaintProfiler.PaintProfilerSnapshot): void {\n    void snapshot.commandLog().then(log => setSnapshotAndLog.call(this, snapshot, log));\n\n    function setSnapshotAndLog(\n        this: LayerPaintProfilerView, snapshot: SDK.PaintProfiler.PaintProfilerSnapshot|null,\n        log: SDK.PaintProfiler.PaintProfilerLogItem[]|null): void {\n      this.logTreeView.setCommandLog(log || []);\n      void this.paintProfilerView.setSnapshotAndLog(snapshot, log || [], null);\n      if (snapshot) {\n        snapshot.release();\n      }\n    }\n  }\n\n  setScale(scale: number): void {\n    this.paintProfilerView.setScale(scale);\n  }\n\n  private onWindowChanged(): void {\n    this.logTreeView.updateWindow(this.paintProfilerView.selectionWindow());\n  }\n}\n"]}