{"version":3,"file":"emulation-meta.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/settings/emulation/emulation-meta.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,4BAA4B,CAAC;AACnD,OAAO,KAAK,EAAE,MAAM,8BAA8B,CAAC;AAInD,MAAM,SAAS,GAAG;IAChB;;MAEE;IACF,OAAO,EAAE,SAAS;IAClB;;MAEE;IACF,WAAW,EAAE,cAAc;CAC5B,CAAC;AAEF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,6CAA6C,EAAE,SAAS,CAAC,CAAC;AACnG,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAExF,IAAI,qBAAmD,CAAC;AAExD,KAAK,UAAU,mBAAmB;IAChC,IAAI,CAAC,qBAAqB,EAAE;QAC1B,qBAAqB,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,CAAC;KACxD;IACD,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AAED,EAAE,CAAC,WAAW,CAAC,qBAAqB,CAAC;IACnC,QAAQ,qCAAiD;IACzD,aAAa,EAAE,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC;IACpD,KAAK,EAAE,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC;IACxC,KAAK,EAAE,EAAE;IACT,KAAK,CAAC,QAAQ;QACZ,MAAM,SAAS,GAAG,MAAM,mBAAmB,EAAE,CAAC;QAC9C,OAAO,SAAS,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;IACpE,CAAC;IACD,EAAE,EAAE,SAAS;IACb,QAAQ,EAAE;QACR,4BAA4B;QAC5B,0BAA0B;KAC3B;CACF,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as UI from '../../../ui/legacy/legacy.js';\n\nimport type * as Emulation from './emulation.js';\n\nconst UIStrings = {\n  /**\n  *@description Title of the Devices tab/tool. Devices refers to e.g. phones/tablets.\n  */\n  devices: 'Devices',\n  /**\n  *@description Command that opens the device emulation view.\n  */\n  showDevices: 'Show Devices',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/settings/emulation/emulation-meta.ts', UIStrings);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nlet loadedEmulationModule: (typeof Emulation|undefined);\n\nasync function loadEmulationModule(): Promise<typeof Emulation> {\n  if (!loadedEmulationModule) {\n    loadedEmulationModule = await import('./emulation.js');\n  }\n  return loadedEmulationModule;\n}\n\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.SETTINGS_VIEW,\n  commandPrompt: i18nLazyString(UIStrings.showDevices),\n  title: i18nLazyString(UIStrings.devices),\n  order: 30,\n  async loadView() {\n    const Emulation = await loadEmulationModule();\n    return Emulation.DevicesSettingsTab.DevicesSettingsTab.instance();\n  },\n  id: 'devices',\n  settings: [\n    'standardEmulatedDeviceList',\n    'customEmulatedDeviceList',\n  ],\n});\n"]}