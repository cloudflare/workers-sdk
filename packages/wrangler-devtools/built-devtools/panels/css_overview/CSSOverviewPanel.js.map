{"version":3,"file":"CSSOverviewPanel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/css_overview/CSSOverviewPanel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as CSSOverviewComponents from './components/components.js';\nimport cssOverviewStyles from './cssOverview.css.js';\nimport type * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {ContrastIssue} from './CSSOverviewCompletedView.js';\nimport {CSSOverviewCompletedView} from './CSSOverviewCompletedView.js';\nimport {Events, OverviewController} from './CSSOverviewController.js';\nimport type {GlobalStyleStats} from './CSSOverviewModel.js';\nimport {CSSOverviewModel} from './CSSOverviewModel.js';\nimport {CSSOverviewProcessingView} from './CSSOverviewProcessingView.js';\nimport type {UnusedDeclaration} from './CSSOverviewUnusedDeclarations.js';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet CSSOverviewPanelInstance: CSSOverviewPanel;\n\nexport class CSSOverviewPanel extends UI.Panel.Panel implements SDK.TargetManager.Observer {\n  readonly #controller: OverviewController;\n  readonly #startView: CSSOverviewComponents.CSSOverviewStartView.CSSOverviewStartView;\n  readonly #processingView: CSSOverviewProcessingView;\n  readonly #completedView: CSSOverviewCompletedView;\n  #model?: CSSOverviewModel;\n  #target?: SDK.Target.Target;\n  #backgroundColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #textColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #fillColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #borderColors!: Map<string, Set<Protocol.DOM.BackendNodeId>>;\n  #fontInfo!: Map<string, Map<string, Map<string, Protocol.DOM.BackendNodeId[]>>>;\n  #mediaQueries!: Map<string, Protocol.CSS.CSSMedia[]>;\n  #unusedDeclarations!: Map<string, UnusedDeclaration[]>;\n  #elementCount!: number;\n  #globalStyleStats!: GlobalStyleStats;\n  #textColorContrastIssues!: Map<string, ContrastIssue[]>;\n\n  private constructor() {\n    super('css_overview');\n\n    this.element.classList.add('css-overview-panel');\n\n    this.#controller = new OverviewController();\n    this.#startView = new CSSOverviewComponents.CSSOverviewStartView.CSSOverviewStartView();\n    this.#startView.addEventListener(\n        'overviewstartrequested', () => this.#controller.dispatchEventToListeners(Events.RequestOverviewStart));\n    this.#processingView = new CSSOverviewProcessingView(this.#controller);\n    this.#completedView = new CSSOverviewCompletedView(this.#controller);\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n\n    this.#controller.addEventListener(Events.RequestOverviewStart, _event => {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.CaptureCssOverviewClicked);\n      void this.#startOverview();\n    }, this);\n    this.#controller.addEventListener(Events.OverviewCompleted, this.#overviewCompleted, this);\n    this.#controller.addEventListener(Events.Reset, this.#reset, this);\n    this.#controller.addEventListener(Events.RequestNodeHighlight, this.#requestNodeHighlight, this);\n\n    this.#reset();\n  }\n\n  static instance(): CSSOverviewPanel {\n    if (!CSSOverviewPanelInstance) {\n      CSSOverviewPanelInstance = new CSSOverviewPanel();\n    }\n    return CSSOverviewPanelInstance;\n  }\n\n  targetAdded(target: SDK.Target.Target): void {\n    if (this.#target) {\n      return;\n    }\n    this.#target = target;\n    this.#completedView.initializeModels(target);\n    const [model] = SDK.TargetManager.TargetManager.instance().models(CSSOverviewModel);\n    this.#model = (model as CSSOverviewModel);\n  }\n\n  targetRemoved(): void {\n  }\n\n  #getModel(): CSSOverviewModel {\n    if (!this.#model) {\n      throw new Error('Did not retrieve model information yet.');\n    }\n    return this.#model;\n  }\n\n  #reset(): void {\n    this.#backgroundColors = new Map();\n    this.#textColors = new Map();\n    this.#fillColors = new Map();\n    this.#borderColors = new Map();\n    this.#fontInfo = new Map();\n    this.#mediaQueries = new Map();\n    this.#unusedDeclarations = new Map();\n    this.#elementCount = 0;\n    this.#globalStyleStats = {\n      styleRules: 0,\n      inlineStyles: 0,\n      externalSheets: 0,\n      stats: {\n        // Simple.\n        type: 0,\n        class: 0,\n        id: 0,\n        universal: 0,\n        attribute: 0,\n\n        // Non-simple.\n        nonSimple: 0,\n      },\n    };\n    this.#textColorContrastIssues = new Map();\n    this.#renderInitialView();\n  }\n\n  #requestNodeHighlight(evt: Common.EventTarget.EventTargetEvent<number>): void {\n    this.#getModel().highlightNode((evt.data as Protocol.DOM.BackendNodeId));\n  }\n\n  #renderInitialView(): void {\n    this.#processingView.hideWidget();\n    this.#completedView.hideWidget();\n\n    this.contentElement.append(this.#startView);\n    this.#startView.show();\n  }\n\n  #renderOverviewStartedView(): void {\n    this.#startView.hide();\n    this.#completedView.hideWidget();\n\n    this.#processingView.show(this.contentElement);\n  }\n\n  #renderOverviewCompletedView(): void {\n    this.#startView.hide();\n    this.#processingView.hideWidget();\n\n    this.#completedView.show(this.contentElement);\n    this.#completedView.setOverviewData({\n      backgroundColors: this.#backgroundColors,\n      textColors: this.#textColors,\n      textColorContrastIssues: this.#textColorContrastIssues,\n      fillColors: this.#fillColors,\n      borderColors: this.#borderColors,\n      globalStyleStats: this.#globalStyleStats,\n      fontInfo: this.#fontInfo,\n      elementCount: this.#elementCount,\n      mediaQueries: this.#mediaQueries,\n      unusedDeclarations: this.#unusedDeclarations,\n    });\n  }\n\n  async #startOverview(): Promise<void> {\n    this.#renderOverviewStartedView();\n\n    const model = this.#getModel();\n    const [globalStyleStats, { elementCount, backgroundColors, textColors, textColorContrastIssues, fillColors, borderColors, fontInfo, unusedDeclarations }, mediaQueries] = await Promise.all([\n      model.getGlobalStylesheetStats(),\n      model.getNodeStyleStats(),\n      model.getMediaQueries(),\n    ]);\n\n    if (elementCount) {\n      this.#elementCount = elementCount;\n    }\n\n    if (globalStyleStats) {\n      this.#globalStyleStats = globalStyleStats;\n    }\n\n    if (mediaQueries) {\n      this.#mediaQueries = mediaQueries;\n    }\n\n    if (backgroundColors) {\n      this.#backgroundColors = backgroundColors;\n    }\n\n    if (textColors) {\n      this.#textColors = textColors;\n    }\n\n    if (textColorContrastIssues) {\n      this.#textColorContrastIssues = textColorContrastIssues;\n    }\n\n    if (fillColors) {\n      this.#fillColors = fillColors;\n    }\n\n    if (borderColors) {\n      this.#borderColors = borderColors;\n    }\n\n    if (fontInfo) {\n      this.#fontInfo = fontInfo;\n    }\n\n    if (unusedDeclarations) {\n      this.#unusedDeclarations = unusedDeclarations;\n    }\n\n    this.#controller.dispatchEventToListeners(Events.OverviewCompleted);\n  }\n\n  #overviewCompleted(): void {\n    this.#renderOverviewCompletedView();\n  }\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([cssOverviewStyles]);\n  }\n}\n"]}