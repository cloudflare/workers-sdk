{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../front_end/panels/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport type * as Diff from '../../third_party/diff/diff.js';\nimport * as DiffView from '../../ui/components/diff_view/diff_view.js';\n\nexport function imageNameForResourceType(resourceType: Common.ResourceType.ResourceType): string {\n  if (resourceType.isDocument()) {\n    return 'ic_file_document';\n  }\n  if (resourceType.isImage()) {\n    return 'ic_file_image';\n  }\n  if (resourceType.isFont()) {\n    return 'ic_file_font';\n  }\n  if (resourceType.isScript()) {\n    return 'ic_file_script';\n  }\n  if (resourceType.isStyleSheet()) {\n    return 'ic_file_stylesheet';\n  }\n  if (resourceType.isWebbundle()) {\n    return 'ic_file_webbundle';\n  }\n  return 'ic_file_default';\n}\n\nexport async function formatCSSChangesFromDiff(diff: Diff.Diff.DiffArray): Promise<string> {\n  const indent = '  ';\n  const {originalLines, currentLines, rows} = DiffView.DiffView.buildDiffRows(diff);\n  const originalRuleMaps = await buildStyleRuleMaps(originalLines.join('\\n'));\n  const currentRuleMaps = await buildStyleRuleMaps(currentLines.join('\\n'));\n\n  let changes = '';\n  let recordedOriginalSelector, recordedCurrentSelector;\n  let hasOpenDeclarationBlock = false;\n  for (const {currentLineNumber, originalLineNumber, type} of rows) {\n    if (type !== DiffView.DiffView.RowType.Deletion && type !== DiffView.DiffView.RowType.Addition) {\n      continue;\n    }\n\n    const isDeletion = type === DiffView.DiffView.RowType.Deletion;\n    const lines = isDeletion ? originalLines : currentLines;\n    // Diff line arrays starts at 0, but line numbers start at 1.\n    const lineIndex = isDeletion ? originalLineNumber - 1 : currentLineNumber - 1;\n    const line = lines[lineIndex].trim();\n    const {declarationIDToStyleRule, styleRuleIDToStyleRule} = isDeletion ? originalRuleMaps : currentRuleMaps;\n    let styleRule;\n    let prefix = '';\n    if (declarationIDToStyleRule.has(lineIndex)) {\n      styleRule = declarationIDToStyleRule.get(lineIndex) as FormattableStyleRule;\n      const selector = styleRule.selector;\n      // Use the equality of selector strings as a best-effort check for the equality of style rules.\n      if (selector !== recordedOriginalSelector && selector !== recordedCurrentSelector) {\n        prefix += `${selector} {\\n`;\n      }\n      prefix += indent;\n      hasOpenDeclarationBlock = true;\n    } else {\n      if (hasOpenDeclarationBlock) {\n        prefix = '}\\n\\n';\n        hasOpenDeclarationBlock = false;\n      }\n      if (styleRuleIDToStyleRule.has(lineIndex)) {\n        styleRule = styleRuleIDToStyleRule.get(lineIndex);\n      }\n    }\n\n    const processedLine = isDeletion ? `/* ${line} */` : line;\n    changes += prefix + processedLine + '\\n';\n    if (isDeletion) {\n      recordedOriginalSelector = styleRule?.selector;\n    } else {\n      recordedCurrentSelector = styleRule?.selector;\n    }\n  }\n\n  if (changes.length > 0) {\n    changes += '}';\n  }\n  return changes;\n}\n\ninterface FormattableStyleRule {\n  rule: Formatter.FormatterWorkerPool.CSSRule;\n  selector: string;\n}\n\nasync function buildStyleRuleMaps(content: string): Promise<{\n  declarationIDToStyleRule: Map<number, FormattableStyleRule>,\n  styleRuleIDToStyleRule: Map<number, FormattableStyleRule>,\n}> {\n  const rules = await new Promise<Formatter.FormatterWorkerPool.CSSRule[]>(res => {\n    const rules: Formatter.FormatterWorkerPool.CSSRule[] = [];\n    Formatter.FormatterWorkerPool.formatterWorkerPool().parseCSS(content, (isLastChunk, currentRules) => {\n      rules.push(...currentRules);\n      if (isLastChunk) {\n        res(rules);\n      }\n    });\n  });\n\n  // We use line numbers as unique IDs for rules and declarations\n  const declarationIDToStyleRule = new Map<number, FormattableStyleRule>();\n  const styleRuleIDToStyleRule = new Map<number, FormattableStyleRule>();\n  for (const rule of rules) {\n    if ('styleRange' in rule) {\n      const selector = rule.selectorText.split('\\n').pop()?.trim();\n      if (!selector) {\n        continue;\n      }\n      const styleRule = {rule, selector};\n      styleRuleIDToStyleRule.set(rule.styleRange.startLine, styleRule);\n      for (const property of rule.properties) {\n        declarationIDToStyleRule.set(property.range.startLine, styleRule);\n      }\n    }\n  }\n  return {declarationIDToStyleRule, styleRuleIDToStyleRule};\n}\n"]}