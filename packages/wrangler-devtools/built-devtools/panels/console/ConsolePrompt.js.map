{"version":3,"file":"ConsolePrompt.js","sourceRoot":"","sources":["../../../../../../front_end/panels/console/ConsolePrompt.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport * as SourceMapScopes from '../../models/source_map_scopes/source_map_scopes.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ConsolePanel} from './ConsolePanel.js';\nimport consolePromptStyles from './consolePrompt.css.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Console Prompt of the Console panel\n  */\n  consolePrompt: 'Console prompt',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsolePrompt.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ConsolePrompt extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.Widget>(\n    UI.Widget.Widget) {\n  private addCompletionsFromHistory: boolean;\n  private historyInternal: ConsoleHistoryManager;\n  private initialText: string;\n  private editor: TextEditor.TextEditor.TextEditor;\n  private readonly eagerPreviewElement: HTMLDivElement;\n  private textChangeThrottler: Common.Throttler.Throttler;\n  private readonly formatter: ObjectUI.RemoteObjectPreviewFormatter.RemoteObjectPreviewFormatter;\n  private requestPreviewBound: () => Promise<void>;\n  private requestPreviewCurrent = 0;\n  private readonly innerPreviewElement: HTMLElement;\n  private readonly promptIcon: UI.Icon.Icon;\n  private readonly iconThrottler: Common.Throttler.Throttler;\n  private readonly eagerEvalSetting: Common.Settings.Setting<boolean>;\n  private previewRequestForTest: Promise<void>|null;\n  private highlightingNode: boolean;\n  // The CodeMirror state field that controls whether the argument hints are showing.\n  // If they are, the escape key will clear them. However, if they aren't, then the\n  // console drawer should be hidden as a whole.\n  #argumentHintsState: CodeMirror.StateField<CodeMirror.Tooltip|null>;\n\n  constructor() {\n    super();\n    this.addCompletionsFromHistory = true;\n    this.historyInternal = new ConsoleHistoryManager();\n\n    this.initialText = '';\n    this.eagerPreviewElement = document.createElement('div');\n    this.eagerPreviewElement.classList.add('console-eager-preview');\n    this.textChangeThrottler = new Common.Throttler.Throttler(150);\n    this.formatter = new ObjectUI.RemoteObjectPreviewFormatter.RemoteObjectPreviewFormatter();\n    this.requestPreviewBound = this.requestPreview.bind(this);\n    this.innerPreviewElement = this.eagerPreviewElement.createChild('div', 'console-eager-inner-preview');\n    this.eagerPreviewElement.appendChild(UI.Icon.Icon.create('smallicon-command-result', 'preview-result-icon'));\n\n    const editorContainerElement = this.element.createChild('div', 'console-prompt-editor-container');\n    this.element.appendChild(this.eagerPreviewElement);\n\n    this.promptIcon = UI.Icon.Icon.create('smallicon-text-prompt', 'console-prompt-icon');\n    this.element.appendChild(this.promptIcon);\n    this.iconThrottler = new Common.Throttler.Throttler(0);\n\n    this.eagerEvalSetting = Common.Settings.Settings.instance().moduleSetting('consoleEagerEval');\n    this.eagerEvalSetting.addChangeListener(this.eagerSettingChanged.bind(this));\n    this.eagerPreviewElement.classList.toggle('hidden', !this.eagerEvalSetting.get());\n\n    this.element.tabIndex = 0;\n    this.previewRequestForTest = null;\n    this.highlightingNode = false;\n    const argumentHints = TextEditor.JavaScript.argumentHints();\n    this.#argumentHintsState = argumentHints[0];\n\n    const editorState = CodeMirror.EditorState.create({\n      doc: this.initialText,\n      extensions: [\n        CodeMirror.keymap.of(this.editorKeymap()),\n        CodeMirror.EditorView.updateListener.of(update => this.editorUpdate(update)),\n        argumentHints,\n        TextEditor.JavaScript.completion(),\n        TextEditor.Config.showCompletionHint,\n        CodeMirror.javascript.javascript(),\n        TextEditor.Config.baseConfiguration(this.initialText),\n        TextEditor.Config.autocompletion,\n        CodeMirror.javascript.javascriptLanguage.data.of({\n          autocomplete: (context: CodeMirror.CompletionContext): CodeMirror.CompletionResult | null =>\n              this.historyCompletions(context),\n        }),\n        CodeMirror.EditorView.contentAttributes.of({'aria-label': i18nString(UIStrings.consolePrompt)}),\n        CodeMirror.EditorView.lineWrapping,\n        CodeMirror.autocompletion({aboveCursor: true}),\n      ],\n    });\n\n    this.editor = new TextEditor.TextEditor.TextEditor(editorState);\n    this.editor.addEventListener('keydown', (event): void => {\n      if (event.defaultPrevented) {\n        event.stopPropagation();\n      }\n    });\n    editorContainerElement.appendChild(this.editor);\n\n    if (this.hasFocus()) {\n      this.focus();\n    }\n    this.element.removeAttribute('tabindex');\n\n    this.editorSetForTest();\n\n    // Record the console tool load time after the console prompt constructor is complete.\n    Host.userMetrics.panelLoaded('console', 'DevTools.Launch.Console');\n  }\n\n  private eagerSettingChanged(): void {\n    const enabled = this.eagerEvalSetting.get();\n    this.eagerPreviewElement.classList.toggle('hidden', !enabled);\n    if (enabled) {\n      void this.requestPreview();\n    }\n  }\n\n  belowEditorElement(): Element {\n    return this.eagerPreviewElement;\n  }\n\n  private onTextChanged(): void {\n    // ConsoleView and prompt both use a throttler, so we clear the preview\n    // ASAP to avoid inconsistency between a fresh viewport and stale preview.\n    if (this.eagerEvalSetting.get()) {\n      const asSoonAsPossible = !TextEditor.Config.contentIncludingHint(this.editor.editor);\n      this.previewRequestForTest = this.textChangeThrottler.schedule(this.requestPreviewBound, asSoonAsPossible);\n    }\n    this.updatePromptIcon();\n    this.dispatchEventToListeners(Events.TextChanged);\n  }\n\n  private async requestPreview(): Promise<void> {\n    const id = ++this.requestPreviewCurrent;\n    const text = TextEditor.Config.contentIncludingHint(this.editor.editor).trim();\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    const {preview, result} = await ObjectUI.JavaScriptREPL.JavaScriptREPL.evaluateAndBuildPreview(\n        text, true /* throwOnSideEffect */, true /* replMode */, 500 /* timeout */);\n    if (this.requestPreviewCurrent !== id) {\n      return;\n    }\n    this.innerPreviewElement.removeChildren();\n    if (preview.deepTextContent() !== TextEditor.Config.contentIncludingHint(this.editor.editor).trim()) {\n      this.innerPreviewElement.appendChild(preview);\n    }\n    if (result && 'object' in result && result.object && result.object.subtype === 'node') {\n      this.highlightingNode = true;\n      SDK.OverlayModel.OverlayModel.highlightObjectAsDOMNode(result.object);\n    } else if (this.highlightingNode) {\n      this.highlightingNode = false;\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    }\n    if (result && executionContext) {\n      executionContext.runtimeModel.releaseEvaluationResult(result);\n    }\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([consolePromptStyles]);\n  }\n\n  willHide(): void {\n    if (this.highlightingNode) {\n      this.highlightingNode = false;\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    }\n  }\n\n  history(): ConsoleHistoryManager {\n    return this.historyInternal;\n  }\n\n  clearAutocomplete(): void {\n    CodeMirror.closeCompletion(this.editor.editor);\n  }\n\n  private isCaretAtEndOfPrompt(): boolean {\n    return this.editor.state.selection.main.head === this.editor.state.doc.length;\n  }\n\n  moveCaretToEndOfPrompt(): void {\n    this.editor.dispatch({\n      selection: CodeMirror.EditorSelection.cursor(this.editor.state.doc.length),\n    });\n  }\n\n  clear(): void {\n    this.editor.dispatch({\n      changes: {from: 0, to: this.editor.state.doc.length},\n    });\n  }\n\n  text(): string {\n    return this.editor.state.doc.toString();\n  }\n\n  setAddCompletionsFromHistory(value: boolean): void {\n    this.addCompletionsFromHistory = value;\n  }\n\n  private editorKeymap(): readonly CodeMirror.KeyBinding[] {\n    return [\n      {key: 'ArrowUp', run: (): boolean => this.moveHistory(-1)},\n      {key: 'ArrowDown', run: (): boolean => this.moveHistory(1)},\n      {mac: 'Ctrl-p', run: (): boolean => this.moveHistory(-1, true)},\n      {mac: 'Ctrl-n', run: (): boolean => this.moveHistory(1, true)},\n      {\n        key: 'Escape',\n        run: (): boolean => {\n          return TextEditor.JavaScript.closeArgumentsHintsTooltip(this.editor.editor, this.#argumentHintsState);\n        },\n      },\n      {\n        key: 'Enter',\n        run: (): boolean => {\n          void this.handleEnter();\n          return true;\n        },\n        shift: CodeMirror.insertNewlineAndIndent,\n      },\n    ];\n  }\n\n  private moveHistory(dir: -1|1, force = false): boolean {\n    const {editor} = this.editor, {main} = editor.state.selection;\n    if (!force) {\n      if (!main.empty) {\n        return false;\n      }\n      const cursorCoords = editor.coordsAtPos(main.head);\n      const endCoords = editor.coordsAtPos(dir < 0 ? 0 : editor.state.doc.length);\n      // Check if there are wrapped lines in this direction, and let\n      // the cursor move normally if there are.\n      if (cursorCoords && endCoords &&\n          (dir < 0 ? cursorCoords.top > endCoords.top + 5 : cursorCoords.bottom < endCoords.bottom - 5)) {\n        return false;\n      }\n    }\n\n    const history = this.historyInternal;\n    const newText = dir < 0 ? history.previous(this.text()) : history.next();\n    if (newText === undefined) {\n      return false;\n    }\n\n    // Change the prompt input to the history content, and scroll to the end to\n    // bring the full content (potentially multiple lines) into view.\n    const cursorPos = newText.length;\n    this.editor.dispatch({\n      changes: {from: 0, to: this.editor.state.doc.length, insert: newText},\n      selection: CodeMirror.EditorSelection.cursor(cursorPos),\n      scrollIntoView: true,\n    });\n    if (dir < 0) {\n      // If we are going back in history, put the cursor to the end of the first line\n      // so that the user can quickly go further back in history.\n      const firstLineBreak = newText.search(/\\n|$/);\n      this.editor.dispatch({\n        selection: CodeMirror.EditorSelection.cursor(firstLineBreak),\n      });\n    }\n    return true;\n  }\n\n  private async enterWillEvaluate(): Promise<boolean> {\n    const {state} = this.editor;\n    return state.doc.length > 0 && await TextEditor.JavaScript.isExpressionComplete(state.doc.toString());\n  }\n\n  private async handleEnter(): Promise<void> {\n    if (await this.enterWillEvaluate()) {\n      this.appendCommand(this.text(), true);\n      TextEditor.JavaScript.closeArgumentsHintsTooltip(this.editor.editor, this.#argumentHintsState);\n      this.editor.dispatch({\n        changes: {from: 0, to: this.editor.state.doc.length},\n        scrollIntoView: true,\n      });\n    } else if (this.editor.state.doc.length) {\n      CodeMirror.insertNewlineAndIndent(this.editor.editor);\n    } else {\n      this.editor.dispatch({scrollIntoView: true});\n    }\n  }\n\n  private updatePromptIcon(): void {\n    void this.iconThrottler.schedule(async () => {\n      this.promptIcon.classList.toggle('console-prompt-incomplete', !(await this.enterWillEvaluate()));\n    });\n  }\n\n  private appendCommand(text: string, useCommandLineAPI: boolean): void {\n    const currentExecutionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    if (currentExecutionContext) {\n      const executionContext = currentExecutionContext;\n      const message = SDK.ConsoleModel.ConsoleModel.instance().addCommandMessage(executionContext, text);\n      const expression = ObjectUI.JavaScriptREPL.JavaScriptREPL.preprocessExpression(text);\n      void this.evaluateCommandInConsole(executionContext, message, expression, useCommandLineAPI);\n      if (ConsolePanel.instance().isShowing()) {\n        Host.userMetrics.actionTaken(Host.UserMetrics.Action.CommandEvaluatedInConsolePanel);\n      }\n    }\n  }\n\n  private async evaluateCommandInConsole(\n      executionContext: SDK.RuntimeModel.ExecutionContext, message: SDK.ConsoleModel.ConsoleMessage, expression: string,\n      useCommandLineAPI: boolean): Promise<void> {\n    if (Root.Runtime.experiments.isEnabled('evaluateExpressionsWithSourceMaps')) {\n      const callFrame = executionContext.debuggerModel.selectedCallFrame();\n      if (callFrame) {\n        const nameMap = await SourceMapScopes.NamesResolver.allVariablesInCallFrame(callFrame);\n        expression = await this.substituteNames(expression, nameMap);\n      }\n    }\n\n    await SDK.ConsoleModel.ConsoleModel.instance().evaluateCommandInConsole(\n        executionContext, message, expression, useCommandLineAPI);\n  }\n\n  private async substituteNames(expression: string, mapping: Map<string, string>): Promise<string> {\n    try {\n      return await Formatter.FormatterWorkerPool.formatterWorkerPool().javaScriptSubstitute(expression, mapping);\n    } catch {\n      return expression;\n    }\n  }\n\n  private editorUpdate(update: CodeMirror.ViewUpdate): void {\n    if (update.docChanged ||\n        CodeMirror.selectedCompletion(update.state) !== CodeMirror.selectedCompletion(update.startState)) {\n      this.onTextChanged();\n    } else if (update.selectionSet) {\n      this.updatePromptIcon();\n    }\n  }\n\n  private historyCompletions(context: CodeMirror.CompletionContext): CodeMirror.CompletionResult|null {\n    const text = this.text();\n    if (!this.addCompletionsFromHistory || !this.isCaretAtEndOfPrompt() || (!text.length && !context.explicit)) {\n      return null;\n    }\n    const result = [];\n    const set = new Set<string>();\n    const data = this.historyInternal.historyData();\n    for (let i = data.length - 1; i >= 0 && result.length < 50; --i) {\n      const item = data[i];\n      if (!item.startsWith(text)) {\n        continue;\n      }\n      if (set.has(item)) {\n        continue;\n      }\n      set.add(item);\n      result.push({label: item, type: 'secondary', boost: -1e5});\n    }\n    return result.length ? {\n      from: 0,\n      to: text.length,\n      options: result,\n    } :\n                           null;\n  }\n\n  focus(): void {\n    this.editor.focus();\n  }\n\n  private editorSetForTest(): void {\n  }\n}\n\nexport class ConsoleHistoryManager {\n  private data: string[];\n  private historyOffset: number;\n  private uncommittedIsTop?: boolean;\n  constructor() {\n    this.data = [];\n\n    /**\n     * 1-based entry in the history stack.\n     */\n    this.historyOffset = 1;\n  }\n\n  historyData(): string[] {\n    return this.data;\n  }\n\n  setHistoryData(data: string[]): void {\n    this.data = data.slice();\n    this.historyOffset = 1;\n  }\n\n  /**\n   * Pushes a committed text into the history.\n   */\n  pushHistoryItem(text: string): void {\n    if (this.uncommittedIsTop) {\n      this.data.pop();\n      delete this.uncommittedIsTop;\n    }\n\n    this.historyOffset = 1;\n    if (text === this.currentHistoryItem()) {\n      return;\n    }\n    this.data.push(text);\n  }\n\n  /**\n   * Pushes the current (uncommitted) text into the history.\n   */\n  private pushCurrentText(currentText: string): void {\n    if (this.uncommittedIsTop) {\n      this.data.pop();\n    }  // Throw away obsolete uncommitted text.\n    this.uncommittedIsTop = true;\n    this.data.push(currentText);\n  }\n\n  previous(currentText: string): string|undefined {\n    if (this.historyOffset > this.data.length) {\n      return undefined;\n    }\n    if (this.historyOffset === 1) {\n      this.pushCurrentText(currentText);\n    }\n    ++this.historyOffset;\n    return this.currentHistoryItem();\n  }\n\n  next(): string|undefined {\n    if (this.historyOffset === 1) {\n      return undefined;\n    }\n    --this.historyOffset;\n    return this.currentHistoryItem();\n  }\n\n  private currentHistoryItem(): string|undefined {\n    return this.data[this.data.length - this.historyOffset];\n  }\n}\n\nexport const enum Events {\n  TextChanged = 'TextChanged',\n}\n\nexport type EventTypes = {\n  [Events.TextChanged]: void,\n};\n"]}