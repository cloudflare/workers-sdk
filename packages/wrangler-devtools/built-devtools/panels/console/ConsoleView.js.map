{"version":3,"file":"ConsoleView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/console/ConsoleView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as IssuesManager from '../../models/issues_manager/issues_manager.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as CodeHighlighter from '../../ui/components/code_highlighter/code_highlighter.js';\nimport * as IssueCounter from '../../ui/components/issue_counter/issue_counter.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport objectValueStyles from '../../ui/legacy/components/object_ui/objectValue.css.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {ConsoleContextSelector} from './ConsoleContextSelector.js';\nimport consoleViewStyles from './consoleView.css.js';\n\nimport type {LevelsMask} from './ConsoleFilter.js';\nimport {ConsoleFilter, FilterType} from './ConsoleFilter.js';\nimport {ConsolePinPane} from './ConsolePinPane.js';\nimport {ConsolePrompt, Events as ConsolePromptEvents} from './ConsolePrompt.js';\nimport {ConsoleSidebar, Events} from './ConsoleSidebar.js';\nimport {\n  ConsoleCommand,\n  ConsoleCommandResult,\n  ConsoleGroupViewMessage,\n  ConsoleTableMessageView,\n  ConsoleViewMessage,\n  getMessageForElement,\n  MaxLengthForLinks,\n} from './ConsoleViewMessage.js';\n\nimport type {ConsoleViewportElement, ConsoleViewportProvider} from './ConsoleViewport.js';\nimport {ConsoleViewport} from './ConsoleViewport.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for button which links to Issues tab, specifying how many issues there are.\n  */\n  issuesWithColon: '{n, plural, =0 {No Issues} =1 {# Issue:} other {# Issues:}}',\n  /**\n  *@description Text for the tooltip of the issue counter toolbar item\n  */\n  issueToolbarTooltipGeneral: 'Some problems no longer generate console messages, but are surfaced in the issues tab.',\n  /**\n  * @description Text for the tooltip of the issue counter toolbar item. The placeholder indicates how many issues\n  * there are in the Issues tab broken down by kind.\n  * @example {1 page error, 2 breaking changes} issueEnumeration\n  */\n  issueToolbarClickToView: 'Click to view {issueEnumeration}',\n  /**\n  * @description Text for the tooltip of the issue counter toolbar item. The placeholder indicates how many issues\n  * there are in the Issues tab broken down by kind.\n  */\n  issueToolbarClickToGoToTheIssuesTab: 'Click to go to the issues tab',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  findStringInLogs: 'Find string in logs',\n  /**\n  *@description Tooltip text that appears when hovering over the largeicon settings gear in show settings pane setting in console view of the console panel\n  */\n  consoleSettings: 'Console settings',\n  /**\n  *@description Title of a setting under the Console category that can be invoked through the Command Menu\n  */\n  groupSimilarMessagesInConsole: 'Group similar messages in console',\n  /**\n  *@description Title of a setting under the Console category that can be invoked through the Command Menu\n  */\n  showCorsErrorsInConsole: 'Show `CORS` errors in console',\n  /**\n  * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n  * open/show the sidebar.\n  */\n  showConsoleSidebar: 'Show console sidebar',\n  /**\n  * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n  * open/show the sidebar.\n  */\n  hideConsoleSidebar: 'Hide console sidebar',\n  /**\n   * @description Screen reader announcement when the sidebar is shown in the Console panel.\n   */\n  consoleSidebarShown: 'Console sidebar shown',\n  /**\n   * @description Screen reader announcement when the sidebar is hidden in the Console panel.\n   */\n  consoleSidebarHidden: 'Console sidebar hidden',\n  /**\n  *@description Tooltip text that appears on the setting to preserve log when hovering over the item\n  */\n  doNotClearLogOnPageReload: 'Do not clear log on page reload / navigation',\n  /**\n  *@description Text to preserve the log after refreshing\n  */\n  preserveLog: 'Preserve log',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  hideNetwork: 'Hide network',\n  /**\n  *@description Tooltip text that appears on the setting when hovering over it in Console View of the Console panel\n  */\n  onlyShowMessagesFromTheCurrentContext:\n      'Only show messages from the current context (`top`, `iframe`, `worker`, extension)',\n  /**\n  *@description Alternative title text of a setting in Console View of the Console panel\n  */\n  selectedContextOnly: 'Selected context only',\n  /**\n   *@description Description of a setting that controls whether XMLHttpRequests are logged in the console.\n   */\n  logXMLHttpRequests: 'Log XMLHttpRequests',\n  /**\n  *@description Tooltip text that appears on the setting when hovering over it in Console View of the Console panel\n  */\n  eagerlyEvaluateTextInThePrompt: 'Eagerly evaluate text in the prompt',\n  /**\n   *@description Description of a setting that controls whether text typed in the console should be autocompleted from commands executed in the local console history.\n   */\n  autocompleteFromHistory: 'Autocomplete from history',\n  /**\n   *@description Description of a setting that controls whether user activation is triggered by evaluation'.\n  */\n  treatEvaluationAsUserActivation: 'Treat evaluation as user activation',\n  /**\n  * @description Text in Console View of the Console panel, indicating that a number of console\n  * messages have been hidden.\n  */\n  sHidden: '{n, plural, =1 {# hidden} other {# hidden}}',\n  /**\n  *@description Alert message for screen readers when the console is cleared\n  */\n  consoleCleared: 'Console cleared',\n  /**\n  *@description Text in Console View of the Console panel\n  *@example {index.js} PH1\n  */\n  hideMessagesFromS: 'Hide messages from {PH1}',\n  /**\n  *@description Text to save content as a specific file type\n  */\n  saveAs: 'Save as...',\n  /**\n  *@description A context menu item in the Console View of the Console panel\n  */\n  copyVisibleStyledSelection: 'Copy visible styled selection',\n  /**\n  *@description Text to replay an XHR request\n  */\n  replayXhr: 'Replay XHR',\n  /**\n  *@description Text to indicate DevTools is writing to a file\n  */\n  writingFile: 'Writing file…',\n  /**\n  *@description Text to indicate the searching is in progress\n  */\n  searching: 'Searching…',\n  /**\n  *@description Text to filter result items\n  */\n  filter: 'Filter',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  egEventdCdnUrlacom: 'e.g. `/event\\d/ -cdn url:a.com`',\n  /**\n  *@description Sdk console message message level verbose of level Labels in Console View of the Console panel\n  */\n  verbose: 'Verbose',\n  /**\n  *@description Sdk console message message level info of level Labels in Console View of the Console panel\n  */\n  info: 'Info',\n  /**\n  *@description Sdk console message message level warning of level Labels in Console View of the Console panel\n  */\n  warnings: 'Warnings',\n  /**\n  *@description Text for errors\n  */\n  errors: 'Errors',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  logLevels: 'Log levels',\n  /**\n  *@description Title text of a setting in Console View of the Console panel\n  */\n  overriddenByFilterSidebar: 'Overridden by filter sidebar',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  customLevels: 'Custom levels',\n  /**\n  *@description Text in Console View of the Console panel\n  *@example {Warnings} PH1\n  */\n  sOnly: '{PH1} only',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  allLevels: 'All levels',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  defaultLevels: 'Default levels',\n  /**\n  *@description Text in Console View of the Console panel\n  */\n  hideAll: 'Hide all',\n  /**\n  *@description Title of level menu button in console view of the console panel\n  *@example {All levels} PH1\n  */\n  logLevelS: 'Log level: {PH1}',\n  /**\n  *@description A context menu item in the Console View of the Console panel\n  */\n  default: 'Default',\n  /**\n  *@description Text summary to indicate total number of messages in console for accessibility/screen readers.\n  *@example {5} PH1\n  */\n  filteredMessagesInConsole: '{PH1} messages in console',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsoleView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet consoleViewInstance: ConsoleView;\n\nexport class ConsoleView extends UI.Widget.VBox implements UI.SearchableView.Searchable, ConsoleViewportProvider {\n  private readonly searchableViewInternal: UI.SearchableView.SearchableView;\n  private readonly sidebar: ConsoleSidebar;\n  private isSidebarOpen: boolean;\n  private filter: ConsoleViewFilter;\n  private readonly consoleToolbarContainer: HTMLElement;\n  private readonly splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly contentsElement: UI.Widget.WidgetElement;\n  private visibleViewMessages: ConsoleViewMessage[];\n  private hiddenByFilterCount: number;\n  private shouldBeHiddenCache: Set<ConsoleViewMessage>;\n  private lastShownHiddenByFilterCount!: number;\n  private currentMatchRangeIndex!: number;\n  private searchRegex!: RegExp|null;\n  private groupableMessages: Map<string, ConsoleViewMessage[]>;\n  private readonly groupableMessageTitle: Map<string, ConsoleViewMessage>;\n  private readonly shortcuts: Map<number, () => void>;\n  private regexMatchRanges: RegexMatchRange[];\n  private readonly consoleContextSelector: ConsoleContextSelector;\n  private readonly filterStatusText: UI.Toolbar.ToolbarText;\n  private readonly showSettingsPaneSetting: Common.Settings.Setting<boolean>;\n  private readonly showSettingsPaneButton: UI.Toolbar.ToolbarSettingToggle;\n  private readonly progressToolbarItem: UI.Toolbar.ToolbarItem;\n  private readonly groupSimilarSetting: Common.Settings.Setting<boolean>;\n  private readonly showCorsErrorsSetting: Common.Settings.Setting<boolean>;\n  private readonly timestampsSetting: Common.Settings.Setting<unknown>;\n  private readonly consoleHistoryAutocompleteSetting: Common.Settings.Setting<boolean>;\n  readonly pinPane: ConsolePinPane;\n  private viewport: ConsoleViewport;\n  private messagesElement: HTMLElement;\n  private messagesCountElement: HTMLElement;\n  private viewportThrottler: Common.Throttler.Throttler;\n  private pendingBatchResize: boolean;\n  private readonly onMessageResizedBound: (e: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>) => void;\n  private readonly promptElement: HTMLElement;\n  private readonly linkifier: Components.Linkifier.Linkifier;\n  private consoleMessages: ConsoleViewMessage[];\n  private consoleGroupStarts: ConsoleGroupViewMessage[];\n  private readonly consoleHistorySetting: Common.Settings.Setting<string[]>;\n  private prompt: ConsolePrompt;\n  private immediatelyFilterMessagesForTest?: boolean;\n  private maybeDirtyWhileMuted?: boolean;\n  private scheduledRefreshPromiseForTest?: Promise<void>;\n  private needsFullUpdate?: boolean;\n  private buildHiddenCacheTimeout?: number;\n  private searchShouldJumpBackwards?: boolean;\n  private searchProgressIndicator?: UI.ProgressIndicator.ProgressIndicator;\n  private innerSearchTimeoutId?: number;\n  private muteViewportUpdates?: boolean;\n  private waitForScrollTimeout?: number;\n  private issueCounter: IssueCounter.IssueCounter.IssueCounter;\n  private pendingSidebarMessages: ConsoleViewMessage[] = [];\n  private userHasOpenedSidebarAtLeastOnce = false;\n  private issueToolbarThrottle: Common.Throttler.Throttler;\n  private requestResolver = new Logs.RequestResolver.RequestResolver();\n  private issueResolver = new IssuesManager.IssueResolver.IssueResolver();\n\n  constructor() {\n    super();\n    this.setMinimumSize(0, 35);\n\n    this.searchableViewInternal = new UI.SearchableView.SearchableView(this, null);\n    this.searchableViewInternal.element.classList.add('console-searchable-view');\n    this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.findStringInLogs));\n    this.searchableViewInternal.setMinimalSearchQuerySize(0);\n    this.sidebar = new ConsoleSidebar();\n    this.sidebar.addEventListener(Events.FilterSelected, this.onFilterChanged.bind(this));\n    this.isSidebarOpen = false;\n    this.filter = new ConsoleViewFilter(this.onFilterChanged.bind(this));\n\n    this.consoleToolbarContainer = this.element.createChild('div', 'console-toolbar-container');\n    this.splitWidget = new UI.SplitWidget.SplitWidget(\n        true /* isVertical */, false /* secondIsSidebar */, 'console.sidebar.width', 100);\n    this.splitWidget.setMainWidget(this.searchableViewInternal);\n    this.splitWidget.setSidebarWidget(this.sidebar);\n    this.splitWidget.show(this.element);\n    this.splitWidget.hideSidebar();\n    this.splitWidget.enableShowModeSaving();\n    this.isSidebarOpen = this.splitWidget.showMode() === UI.SplitWidget.ShowMode.Both;\n    this.filter.setLevelMenuOverridden(this.isSidebarOpen);\n    this.splitWidget.addEventListener(UI.SplitWidget.Events.ShowModeChanged, event => {\n      this.isSidebarOpen = event.data === UI.SplitWidget.ShowMode.Both;\n\n      if (this.isSidebarOpen) {\n        if (!this.userHasOpenedSidebarAtLeastOnce) {\n          /**\n           * We only want to know if the user opens the sidebar once, not how\n           * many times in a given session they might open and close it, hence\n           * the userHasOpenedSidebarAtLeastOnce variable to track this.\n           */\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.ConsoleSidebarOpened);\n          this.userHasOpenedSidebarAtLeastOnce = true;\n        }\n\n        // If the user has now opened the sidebar, we need to update it, so send\n        // through all the pending messages.\n        this.pendingSidebarMessages.forEach(message => {\n          this.sidebar.onMessageAdded(message);\n        });\n        this.pendingSidebarMessages = [];\n      }\n      this.filter.setLevelMenuOverridden(this.isSidebarOpen);\n      this.onFilterChanged();\n    });\n    this.contentsElement = this.searchableViewInternal.element;\n    this.element.classList.add('console-view');\n\n    this.visibleViewMessages = [];\n    this.hiddenByFilterCount = 0;\n    this.shouldBeHiddenCache = new Set();\n\n    this.groupableMessages = new Map();\n    this.groupableMessageTitle = new Map();\n    this.shortcuts = new Map();\n\n    this.regexMatchRanges = [];\n\n    this.consoleContextSelector = new ConsoleContextSelector();\n\n    this.filterStatusText = new UI.Toolbar.ToolbarText();\n    this.filterStatusText.element.classList.add('dimmed');\n    this.showSettingsPaneSetting =\n        Common.Settings.Settings.instance().createSetting('consoleShowSettingsToolbar', false);\n    this.showSettingsPaneButton = new UI.Toolbar.ToolbarSettingToggle(\n        this.showSettingsPaneSetting, 'largeicon-settings-gear', i18nString(UIStrings.consoleSettings));\n    this.progressToolbarItem = new UI.Toolbar.ToolbarItem(document.createElement('div'));\n    this.groupSimilarSetting = Common.Settings.Settings.instance().moduleSetting('consoleGroupSimilar');\n    this.groupSimilarSetting.addChangeListener(() => this.updateMessageList());\n\n    this.showCorsErrorsSetting = Common.Settings.Settings.instance().moduleSetting('consoleShowsCorsErrors');\n    this.showCorsErrorsSetting.addChangeListener(() => {\n      Host.userMetrics.showCorsErrorsSettingChanged(this.showCorsErrorsSetting.get());\n      this.updateMessageList();\n    });\n\n    const toolbar = new UI.Toolbar.Toolbar('console-main-toolbar', this.consoleToolbarContainer);\n    toolbar.makeWrappable(true);\n    const rightToolbar = new UI.Toolbar.Toolbar('', this.consoleToolbarContainer);\n    toolbar.appendToolbarItem(this.splitWidget.createShowHideSidebarButton(\n        i18nString(UIStrings.showConsoleSidebar), i18nString(UIStrings.hideConsoleSidebar),\n        i18nString(UIStrings.consoleSidebarShown), i18nString(UIStrings.consoleSidebarHidden)));\n    toolbar.appendToolbarItem(UI.Toolbar.Toolbar.createActionButton(\n        (UI.ActionRegistry.ActionRegistry.instance().action('console.clear') as UI.ActionRegistration.Action)));\n    toolbar.appendSeparator();\n    toolbar.appendToolbarItem(this.consoleContextSelector.toolbarItem());\n    toolbar.appendSeparator();\n    const liveExpressionButton = UI.Toolbar.Toolbar.createActionButton(\n        (UI.ActionRegistry.ActionRegistry.instance().action('console.create-pin') as UI.ActionRegistration.Action));\n    toolbar.appendToolbarItem(liveExpressionButton);\n    toolbar.appendSeparator();\n    toolbar.appendToolbarItem(this.filter.textFilterUI);\n    toolbar.appendToolbarItem(this.filter.levelMenuButton);\n    toolbar.appendToolbarItem(this.progressToolbarItem);\n    toolbar.appendSeparator();\n    this.issueCounter = new IssueCounter.IssueCounter.IssueCounter();\n    this.issueCounter.id = 'console-issues-counter';\n    const issuesToolbarItem = new UI.Toolbar.ToolbarItem(this.issueCounter);\n    this.issueCounter.data = {\n      clickHandler: (): void => {\n        Host.userMetrics.issuesPanelOpenedFrom(Host.UserMetrics.IssueOpener.StatusBarIssuesCounter);\n        void UI.ViewManager.ViewManager.instance().showView('issues-pane');\n      },\n      issuesManager: IssuesManager.IssuesManager.IssuesManager.instance(),\n      accessibleName: i18nString(UIStrings.issueToolbarTooltipGeneral),\n      displayMode: IssueCounter.IssueCounter.DisplayMode.OmitEmpty,\n    };\n    toolbar.appendToolbarItem(issuesToolbarItem);\n    rightToolbar.appendSeparator();\n    rightToolbar.appendToolbarItem(this.filterStatusText);\n    rightToolbar.appendToolbarItem(this.showSettingsPaneButton);\n\n    const monitoringXHREnabledSetting = Common.Settings.Settings.instance().moduleSetting('monitoringXHREnabled');\n    this.timestampsSetting = Common.Settings.Settings.instance().moduleSetting('consoleTimestampsEnabled');\n    this.consoleHistoryAutocompleteSetting =\n        Common.Settings.Settings.instance().moduleSetting('consoleHistoryAutocomplete');\n\n    const settingsPane = new UI.Widget.HBox();\n    settingsPane.show(this.contentsElement);\n    settingsPane.element.classList.add('console-settings-pane');\n\n    UI.ARIAUtils.setAccessibleName(settingsPane.element, i18nString(UIStrings.consoleSettings));\n    UI.ARIAUtils.markAsGroup(settingsPane.element);\n\n    const settingsToolbarLeft = new UI.Toolbar.Toolbar('', settingsPane.element);\n    settingsToolbarLeft.makeVertical();\n\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, this.filter.hideNetworkMessagesSetting, this.filter.hideNetworkMessagesSetting.title(),\n        i18nString(UIStrings.hideNetwork));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, 'preserveConsoleLog', i18nString(UIStrings.doNotClearLogOnPageReload),\n        i18nString(UIStrings.preserveLog));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, this.filter.filterByExecutionContextSetting,\n        i18nString(UIStrings.onlyShowMessagesFromTheCurrentContext), i18nString(UIStrings.selectedContextOnly));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, this.groupSimilarSetting, i18nString(UIStrings.groupSimilarMessagesInConsole));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarLeft, this.showCorsErrorsSetting, i18nString(UIStrings.showCorsErrorsInConsole));\n\n    const settingsToolbarRight = new UI.Toolbar.Toolbar('', settingsPane.element);\n    settingsToolbarRight.makeVertical();\n\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarRight, monitoringXHREnabledSetting, i18nString(UIStrings.logXMLHttpRequests));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarRight, 'consoleEagerEval', i18nString(UIStrings.eagerlyEvaluateTextInThePrompt));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarRight, this.consoleHistoryAutocompleteSetting, i18nString(UIStrings.autocompleteFromHistory));\n    ConsoleView.appendSettingsCheckboxToToolbar(\n        settingsToolbarRight, 'consoleUserActivationEval', i18nString(UIStrings.treatEvaluationAsUserActivation));\n\n    if (!this.showSettingsPaneSetting.get()) {\n      settingsPane.element.classList.add('hidden');\n    }\n    this.showSettingsPaneSetting.addChangeListener(\n        () => settingsPane.element.classList.toggle('hidden', !this.showSettingsPaneSetting.get()));\n\n    this.pinPane = new ConsolePinPane(liveExpressionButton, () => this.prompt.focus());\n    this.pinPane.element.classList.add('console-view-pinpane');\n    this.pinPane.show(this.contentsElement);\n\n    this.viewport = new ConsoleViewport(this);\n    this.viewport.setStickToBottom(true);\n    this.viewport.contentElement().classList.add('console-group', 'console-group-messages');\n    this.contentsElement.appendChild(this.viewport.element);\n    this.messagesElement = this.viewport.element;\n    this.messagesElement.id = 'console-messages';\n    this.messagesElement.classList.add('monospace');\n    this.messagesElement.addEventListener('click', this.messagesClicked.bind(this), false);\n    this.messagesElement.addEventListener('paste', this.messagesPasted.bind(this), true);\n    this.messagesElement.addEventListener('clipboard-paste', this.messagesPasted.bind(this), true);\n\n    this.messagesCountElement = this.consoleToolbarContainer.createChild('div', 'message-count');\n    UI.ARIAUtils.markAsPoliteLiveRegion(this.messagesCountElement, false);\n\n    this.viewportThrottler = new Common.Throttler.Throttler(50);\n    this.pendingBatchResize = false;\n    this.onMessageResizedBound = (e: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>): void => {\n      void this.onMessageResized(e);\n    };\n\n    this.promptElement = this.messagesElement.createChild('div', 'source-code');\n    this.promptElement.id = 'console-prompt';\n\n    // FIXME: This is a workaround for the selection machinery bug. See crbug.com/410899\n    const selectAllFixer = this.messagesElement.createChild('div', 'console-view-fix-select-all');\n    selectAllFixer.textContent = '.';\n    UI.ARIAUtils.markAsHidden(selectAllFixer);\n\n    this.registerShortcuts();\n\n    this.messagesElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), false);\n\n    // Filters need to be re-applied to a console message when the message's live location changes.\n    // All relevant live locations are created by the same linkifier, so it is enough to subscribe to\n    // the linkifiers live location change event.\n    const throttler = new Common.Throttler.Throttler(100);\n    const refilterMessages = (): Promise<void> => throttler.schedule(async () => this.onFilterChanged());\n    this.linkifier =\n        new Components.Linkifier.Linkifier(MaxLengthForLinks, /* useLinkDecorator */ undefined, refilterMessages);\n\n    this.consoleMessages = [];\n    this.consoleGroupStarts = [];\n\n    this.consoleHistorySetting = Common.Settings.Settings.instance().createLocalSetting('consoleHistory', []);\n\n    this.prompt = new ConsolePrompt();\n    this.prompt.show(this.promptElement);\n    this.prompt.element.addEventListener('keydown', this.promptKeyDown.bind(this), true);\n    this.prompt.addEventListener(ConsolePromptEvents.TextChanged, this.promptTextChanged, this);\n\n    this.messagesElement.addEventListener('keydown', this.messagesKeyDown.bind(this), false);\n    this.prompt.element.addEventListener('focusin', () => {\n      if (this.isScrolledToBottom()) {\n        this.viewport.setStickToBottom(true);\n      }\n    });\n\n    this.consoleHistoryAutocompleteSetting.addChangeListener(this.consoleHistoryAutocompleteChanged, this);\n\n    const historyData = this.consoleHistorySetting.get();\n    this.prompt.history().setHistoryData(historyData);\n    this.consoleHistoryAutocompleteChanged();\n\n    this.updateFilterStatus();\n    this.timestampsSetting.addChangeListener(this.consoleTimestampsSettingChanged, this);\n\n    this.registerWithMessageSink();\n\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.RuntimeModel.ExecutionContext, this.executionContextChanged, this);\n\n    this.messagesElement.addEventListener(\n        'mousedown', (event: Event) => this.updateStickToBottomOnPointerDown((event as MouseEvent).button === 2),\n        false);\n    this.messagesElement.addEventListener('mouseup', this.updateStickToBottomOnPointerUp.bind(this), false);\n    this.messagesElement.addEventListener('mouseleave', this.updateStickToBottomOnPointerUp.bind(this), false);\n    this.messagesElement.addEventListener('wheel', this.updateStickToBottomOnWheel.bind(this), false);\n    this.messagesElement.addEventListener('touchstart', this.updateStickToBottomOnPointerDown.bind(this, false), false);\n    this.messagesElement.addEventListener('touchend', this.updateStickToBottomOnPointerUp.bind(this), false);\n    this.messagesElement.addEventListener('touchcancel', this.updateStickToBottomOnPointerUp.bind(this), false);\n\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.ConsoleCleared, this.consoleCleared, this);\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.MessageAdded, this.onConsoleMessageAdded, this);\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.MessageUpdated, this.onConsoleMessageUpdated, this);\n    SDK.ConsoleModel.ConsoleModel.instance().addEventListener(\n        SDK.ConsoleModel.Events.CommandEvaluated, this.commandEvaluated, this);\n    SDK.ConsoleModel.ConsoleModel.instance().messages().forEach(this.addConsoleMessage, this);\n\n    const issuesManager = IssuesManager.IssuesManager.IssuesManager.instance();\n    this.issueToolbarThrottle = new Common.Throttler.Throttler(100);\n    issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.IssuesCountUpdated,\n        () => this.issueToolbarThrottle.schedule(async () => this.updateIssuesToolbarItem()), this);\n  }\n  static appendSettingsCheckboxToToolbar(\n      toolbar: UI.Toolbar.Toolbar, settingOrSetingName: Common.Settings.Setting<boolean>|string, title: string,\n      alternateTitle?: string): UI.Toolbar.ToolbarSettingCheckbox {\n    let setting: Common.Settings.Setting<boolean>;\n    if (typeof settingOrSetingName === 'string') {\n      setting = Common.Settings.Settings.instance().moduleSetting(settingOrSetingName);\n    } else {\n      setting = settingOrSetingName;\n    }\n\n    const checkbox = new UI.Toolbar.ToolbarSettingCheckbox(setting, title, alternateTitle);\n    toolbar.appendToolbarItem(checkbox);\n    return checkbox;\n  }\n\n  static instance(): ConsoleView {\n    if (!consoleViewInstance) {\n      consoleViewInstance = new ConsoleView();\n    }\n    return consoleViewInstance;\n  }\n\n  static clearConsole(): void {\n    SDK.ConsoleModel.ConsoleModel.instance().requestClearMessages();\n  }\n\n  private onFilterChanged(): void {\n    this.filter.currentFilter.levelsMask =\n        this.isSidebarOpen ? ConsoleFilter.allLevelsFilterValue() : this.filter.messageLevelFiltersSetting.get();\n    this.cancelBuildHiddenCache();\n    if (this.immediatelyFilterMessagesForTest) {\n      for (const viewMessage of this.consoleMessages) {\n        this.computeShouldMessageBeVisible(viewMessage);\n      }\n      this.updateMessageList();\n      return;\n    }\n    this.buildHiddenCache(0, this.consoleMessages.slice());\n  }\n\n  private setImmediatelyFilterMessagesForTest(): void {\n    this.immediatelyFilterMessagesForTest = true;\n  }\n\n  searchableView(): UI.SearchableView.SearchableView {\n    return this.searchableViewInternal;\n  }\n\n  clearHistory(): void {\n    this.consoleHistorySetting.set([]);\n    this.prompt.history().setHistoryData([]);\n  }\n\n  private consoleHistoryAutocompleteChanged(): void {\n    this.prompt.setAddCompletionsFromHistory(this.consoleHistoryAutocompleteSetting.get());\n  }\n\n  itemCount(): number {\n    return this.visibleViewMessages.length;\n  }\n\n  itemElement(index: number): ConsoleViewportElement|null {\n    return this.visibleViewMessages[index];\n  }\n\n  fastHeight(index: number): number {\n    return this.visibleViewMessages[index].fastHeight();\n  }\n\n  minimumRowHeight(): number {\n    return 16;\n  }\n\n  private registerWithMessageSink(): void {\n    Common.Console.Console.instance().messages().forEach(this.addSinkMessage, this);\n    Common.Console.Console.instance().addEventListener(Common.Console.Events.MessageAdded, ({data: message}) => {\n      this.addSinkMessage(message);\n    }, this);\n  }\n\n  private addSinkMessage(message: Common.Console.Message): void {\n    let level: Protocol.Log.LogEntryLevel = Protocol.Log.LogEntryLevel.Verbose;\n    switch (message.level) {\n      case Common.Console.MessageLevel.Info:\n        level = Protocol.Log.LogEntryLevel.Info;\n        break;\n      case Common.Console.MessageLevel.Error:\n        level = Protocol.Log.LogEntryLevel.Error;\n        break;\n      case Common.Console.MessageLevel.Warning:\n        level = Protocol.Log.LogEntryLevel.Warning;\n        break;\n    }\n\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        null, Protocol.Log.LogEntrySource.Other, level, message.text,\n        {type: SDK.ConsoleModel.FrontendMessageType.System, timestamp: message.timestamp});\n    this.addConsoleMessage(consoleMessage);\n  }\n\n  private consoleTimestampsSettingChanged(): void {\n    this.updateMessageList();\n    this.consoleMessages.forEach(viewMessage => viewMessage.updateTimestamp());\n    this.groupableMessageTitle.forEach(viewMessage => viewMessage.updateTimestamp());\n  }\n\n  private executionContextChanged(): void {\n    this.prompt.clearAutocomplete();\n  }\n\n  willHide(): void {\n    this.hidePromptSuggestBox();\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    this.updateIssuesToolbarItem();\n    this.viewport.refresh();\n    this.registerCSSFiles([consoleViewStyles, objectValueStyles, CodeHighlighter.Style.default]);\n  }\n\n  focus(): void {\n    if (this.viewport.hasVirtualSelection()) {\n      (this.viewport.contentElement() as HTMLElement).focus();\n    } else {\n      this.focusPrompt();\n    }\n  }\n\n  focusPrompt(): void {\n    if (!this.prompt.hasFocus()) {\n      const oldStickToBottom = this.viewport.stickToBottom();\n      const oldScrollTop = this.viewport.element.scrollTop;\n      this.prompt.focus();\n      this.viewport.setStickToBottom(oldStickToBottom);\n      this.viewport.element.scrollTop = oldScrollTop;\n    }\n  }\n\n  restoreScrollPositions(): void {\n    if (this.viewport.stickToBottom()) {\n      this.immediatelyScrollToBottom();\n    } else {\n      super.restoreScrollPositions();\n    }\n  }\n\n  onResize(): void {\n    this.scheduleViewportRefresh();\n    this.hidePromptSuggestBox();\n    if (this.viewport.stickToBottom()) {\n      this.immediatelyScrollToBottom();\n    }\n    for (let i = 0; i < this.visibleViewMessages.length; ++i) {\n      this.visibleViewMessages[i].onResize();\n    }\n  }\n\n  private hidePromptSuggestBox(): void {\n    this.prompt.clearAutocomplete();\n  }\n\n  private async invalidateViewport(): Promise<void> {\n    this.updateIssuesToolbarItem();\n    if (this.muteViewportUpdates) {\n      this.maybeDirtyWhileMuted = true;\n      return;\n    }\n    if (this.needsFullUpdate) {\n      this.updateMessageList();\n      delete this.needsFullUpdate;\n    } else {\n      this.viewport.invalidate();\n    }\n    return;\n  }\n\n  private updateIssuesToolbarItem(): void {\n    const manager = IssuesManager.IssuesManager.IssuesManager.instance();\n    const issueEnumeration = IssueCounter.IssueCounter.getIssueCountsEnumeration(manager);\n    const issuesTitleGotoIssues = manager.numberOfIssues() === 0 ?\n        i18nString(UIStrings.issueToolbarClickToGoToTheIssuesTab) :\n        i18nString(UIStrings.issueToolbarClickToView, {issueEnumeration});\n    const issuesTitleGeneral = i18nString(UIStrings.issueToolbarTooltipGeneral);\n    const issuesTitle = `${issuesTitleGeneral} ${issuesTitleGotoIssues}`;\n    UI.Tooltip.Tooltip.install(this.issueCounter, issuesTitle);\n    this.issueCounter.data = {\n      ...this.issueCounter.data,\n      leadingText: i18nString(UIStrings.issuesWithColon, {n: manager.numberOfIssues()}),\n      accessibleName: issuesTitle,\n    };\n  }\n\n  private scheduleViewportRefresh(): void {\n    if (this.muteViewportUpdates) {\n      this.maybeDirtyWhileMuted = true;\n      this.scheduleViewportRefreshForTest(true);\n      return;\n    }\n    this.scheduleViewportRefreshForTest(false);\n\n    this.scheduledRefreshPromiseForTest = this.viewportThrottler.schedule(this.invalidateViewport.bind(this));\n  }\n\n  getScheduledRefreshPromiseForTest(): Promise<void>|undefined {\n    return this.scheduledRefreshPromiseForTest;\n  }\n\n  private scheduleViewportRefreshForTest(_muted: boolean): void {\n    // This functions is sniffed in tests.\n  }\n\n  private immediatelyScrollToBottom(): void {\n    // This will scroll viewport and trigger its refresh.\n    this.viewport.setStickToBottom(true);\n    this.promptElement.scrollIntoView(true);\n  }\n\n  private updateFilterStatus(): void {\n    if (this.hiddenByFilterCount === this.lastShownHiddenByFilterCount) {\n      return;\n    }\n    this.filterStatusText.setText(i18nString(UIStrings.sHidden, {n: this.hiddenByFilterCount}));\n    this.filterStatusText.setVisible(Boolean(this.hiddenByFilterCount));\n    this.lastShownHiddenByFilterCount = this.hiddenByFilterCount;\n  }\n\n  private onConsoleMessageAdded(event: Common.EventTarget.EventTargetEvent<SDK.ConsoleModel.ConsoleMessage>): void {\n    const message = event.data;\n    this.addConsoleMessage(message);\n  }\n\n  private addConsoleMessage(message: SDK.ConsoleModel.ConsoleMessage): void {\n    const viewMessage = this.createViewMessage(message);\n    consoleMessageToViewMessage.set(message, viewMessage);\n    if (message.type === SDK.ConsoleModel.FrontendMessageType.Command ||\n        message.type === SDK.ConsoleModel.FrontendMessageType.Result) {\n      const lastMessage = this.consoleMessages[this.consoleMessages.length - 1];\n      const newTimestamp = lastMessage && messagesSortedBySymbol.get(lastMessage) || 0;\n      messagesSortedBySymbol.set(viewMessage, newTimestamp);\n    } else {\n      messagesSortedBySymbol.set(viewMessage, viewMessage.consoleMessage().timestamp);\n    }\n\n    let insertAt;\n    if (!this.consoleMessages.length ||\n        timeComparator(viewMessage, this.consoleMessages[this.consoleMessages.length - 1]) > 0) {\n      insertAt = this.consoleMessages.length;\n    } else {\n      insertAt = Platform.ArrayUtilities.upperBound(this.consoleMessages, viewMessage, timeComparator);\n    }\n    const insertedInMiddle = insertAt < this.consoleMessages.length;\n    this.consoleMessages.splice(insertAt, 0, viewMessage);\n\n    if (message.type !== SDK.ConsoleModel.FrontendMessageType.Command &&\n        message.type !== SDK.ConsoleModel.FrontendMessageType.Result) {\n      // Maintain group tree.\n      // Find parent group.\n      const consoleGroupStartIndex =\n          Platform.ArrayUtilities.upperBound(this.consoleGroupStarts, viewMessage, timeComparator) - 1;\n      if (consoleGroupStartIndex >= 0) {\n        const currentGroup = this.consoleGroupStarts[consoleGroupStartIndex];\n        addToGroup(viewMessage, currentGroup);\n      }\n      // Add new group.\n      if (message.isGroupStartMessage()) {\n        insertAt = Platform.ArrayUtilities.upperBound(this.consoleGroupStarts, viewMessage, timeComparator);\n        this.consoleGroupStarts.splice(insertAt, 0, viewMessage as ConsoleGroupViewMessage);\n      }\n    }\n\n    this.filter.onMessageAdded(message);\n    if (this.isSidebarOpen) {\n      this.sidebar.onMessageAdded(viewMessage);\n    } else {\n      this.pendingSidebarMessages.push(viewMessage);\n    }\n\n    // If we already have similar messages, go slow path.\n    let shouldGoIntoGroup = false;\n    const shouldGroupSimilar = this.groupSimilarSetting.get();\n    if (message.isGroupable()) {\n      const groupKey = viewMessage.groupKey();\n      shouldGoIntoGroup = shouldGroupSimilar && this.groupableMessages.has(groupKey);\n      let list = this.groupableMessages.get(groupKey);\n      if (!list) {\n        list = [];\n        this.groupableMessages.set(groupKey, list);\n      }\n      list.push(viewMessage);\n    }\n\n    this.computeShouldMessageBeVisible(viewMessage);\n    if (!shouldGoIntoGroup && !insertedInMiddle) {\n      this.appendMessageToEnd(\n          viewMessage,\n          !shouldGroupSimilar /* crbug.com/1082963: prevent collapse of same messages when \"Group similar\" is false */);\n      this.updateFilterStatus();\n      this.searchableViewInternal.updateSearchMatchesCount(this.regexMatchRanges.length);\n    } else {\n      this.needsFullUpdate = true;\n    }\n\n    this.scheduleViewportRefresh();\n    this.consoleMessageAddedForTest(viewMessage);\n\n    // Figure out whether the message should belong into this group or the parent group based on group end timestamp.\n    function addToGroup(viewMessage: ConsoleViewMessage, currentGroup: ConsoleGroupViewMessage): void {\n      const currentEnd = currentGroup.groupEnd();\n      if (currentEnd !== null) {\n        // Exceeds this group's end. It should belong into parent group.\n        if (timeComparator(viewMessage, currentEnd) > 0) {\n          const parent = currentGroup.consoleGroup();\n          // No parent group. We reached ungrouped messages. Don't establish group links.\n          if (parent === null) {\n            return;\n          }  // Add to parent group.\n          addToGroup(viewMessage, parent);\n          return;\n        }\n      }\n      // Add message to this group, and set group of the message.\n      if (viewMessage.consoleMessage().type === Protocol.Runtime.ConsoleAPICalledEventType.EndGroup) {\n        currentGroup.setGroupEnd(viewMessage);\n      } else {\n        viewMessage.setConsoleGroup(currentGroup);\n      }\n    }\n\n    function timeComparator(viewMessage1: ConsoleViewMessage, viewMessage2: ConsoleViewMessage): number {\n      return (messagesSortedBySymbol.get(viewMessage1) || 0) - (messagesSortedBySymbol.get(viewMessage2) || 0);\n    }\n  }\n\n  private onConsoleMessageUpdated(event: Common.EventTarget.EventTargetEvent<SDK.ConsoleModel.ConsoleMessage>): void {\n    const message = event.data;\n    const viewMessage = consoleMessageToViewMessage.get(message);\n    if (viewMessage) {\n      viewMessage.updateMessageElement();\n      this.computeShouldMessageBeVisible(viewMessage);\n      this.updateMessageList();\n    }\n  }\n\n  private consoleMessageAddedForTest(_viewMessage: ConsoleViewMessage): void {\n  }\n\n  private shouldMessageBeVisible(viewMessage: ConsoleViewMessage): boolean {\n    return !this.shouldBeHiddenCache.has(viewMessage);\n  }\n\n  private computeShouldMessageBeVisible(viewMessage: ConsoleViewMessage): void {\n    if (this.filter.shouldBeVisible(viewMessage) &&\n        (!this.isSidebarOpen || this.sidebar.shouldBeVisible(viewMessage))) {\n      this.shouldBeHiddenCache.delete(viewMessage);\n    } else {\n      this.shouldBeHiddenCache.add(viewMessage);\n    }\n  }\n\n  private appendMessageToEnd(viewMessage: ConsoleViewMessage, preventCollapse?: boolean): void {\n    if (viewMessage.consoleMessage().category === Protocol.Log.LogEntryCategory.Cors &&\n        !this.showCorsErrorsSetting.get()) {\n      return;\n    }\n\n    const lastMessage = this.visibleViewMessages[this.visibleViewMessages.length - 1];\n    if (viewMessage.consoleMessage().type === Protocol.Runtime.ConsoleAPICalledEventType.EndGroup) {\n      if (lastMessage) {\n        const group = lastMessage.consoleGroup();\n        if (group && !group.messagesHidden()) {\n          lastMessage.incrementCloseGroupDecorationCount();\n        }\n      }\n      return;\n    }\n\n    if (!this.shouldMessageBeVisible(viewMessage)) {\n      this.hiddenByFilterCount++;\n      return;\n    }\n\n    if (!preventCollapse &&\n        this.tryToCollapseMessages(viewMessage, this.visibleViewMessages[this.visibleViewMessages.length - 1])) {\n      return;\n    }\n\n    const currentGroup = viewMessage.consoleGroup();\n\n    if (!currentGroup || !currentGroup.messagesHidden()) {\n      const originatingMessage = viewMessage.consoleMessage().originatingMessage();\n      if (lastMessage && originatingMessage && lastMessage.consoleMessage() === originatingMessage) {\n        viewMessage.toMessageElement().classList.add('console-adjacent-user-command-result');\n      }\n      showGroup(currentGroup, this.visibleViewMessages);\n      this.visibleViewMessages.push(viewMessage);\n      this.searchMessage(this.visibleViewMessages.length - 1);\n    }\n\n    this.messageAppendedForTests();\n\n    // Show the group the message belongs to, and also show parent groups.\n    function showGroup(currentGroup: ConsoleGroupViewMessage|null, visibleViewMessages: ConsoleViewMessage[]): void {\n      if (currentGroup === null) {\n        return;\n      }\n      // Group is already being shown, no need to traverse to\n      // parent groups since they are also already being shown.\n      if (visibleViewMessages.includes(currentGroup)) {\n        return;\n      }\n      const parentGroup = currentGroup.consoleGroup();\n      if (parentGroup) {\n        showGroup(parentGroup, visibleViewMessages);\n      }\n      visibleViewMessages.push(currentGroup);\n    }\n  }\n\n  private messageAppendedForTests(): void {\n    // This method is sniffed in tests.\n  }\n\n  private createViewMessage(message: SDK.ConsoleModel.ConsoleMessage): ConsoleViewMessage {\n    switch (message.type) {\n      case SDK.ConsoleModel.FrontendMessageType.Command:\n        return new ConsoleCommand(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.onMessageResizedBound);\n      case SDK.ConsoleModel.FrontendMessageType.Result:\n        return new ConsoleCommandResult(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.onMessageResizedBound);\n      case Protocol.Runtime.ConsoleAPICalledEventType.StartGroupCollapsed:\n      case Protocol.Runtime.ConsoleAPICalledEventType.StartGroup:\n        return new ConsoleGroupViewMessage(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.updateMessageList.bind(this),\n            this.onMessageResizedBound);\n      case Protocol.Runtime.ConsoleAPICalledEventType.Table:\n        return new ConsoleTableMessageView(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.onMessageResizedBound);\n      default:\n        return new ConsoleViewMessage(\n            message, this.linkifier, this.requestResolver, this.issueResolver, this.onMessageResizedBound);\n    }\n  }\n\n  private async onMessageResized(event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>):\n      Promise<void> {\n    const treeElement = event.data;\n    if (this.pendingBatchResize || !treeElement.treeOutline) {\n      return;\n    }\n    this.pendingBatchResize = true;\n    await Promise.resolve();\n    const treeOutlineElement = treeElement.treeOutline.element;\n    this.viewport.setStickToBottom(this.isScrolledToBottom());\n    // Scroll, in case mutations moved the element below the visible area.\n    if (treeOutlineElement.offsetHeight <= this.messagesElement.offsetHeight) {\n      treeOutlineElement.scrollIntoViewIfNeeded();\n    }\n\n    this.pendingBatchResize = false;\n  }\n\n  private consoleCleared(): void {\n    const hadFocus = this.viewport.element.hasFocus();\n    this.cancelBuildHiddenCache();\n    this.currentMatchRangeIndex = -1;\n    this.consoleMessages = [];\n    this.groupableMessages.clear();\n    this.groupableMessageTitle.clear();\n    this.sidebar.clear();\n    this.updateMessageList();\n    this.hidePromptSuggestBox();\n    this.viewport.setStickToBottom(true);\n    this.linkifier.reset();\n    this.filter.clear();\n    this.requestResolver.clear();\n    this.consoleGroupStarts = [];\n    if (hadFocus) {\n      this.prompt.focus();\n    }\n    UI.ARIAUtils.alert(i18nString(UIStrings.consoleCleared));\n  }\n\n  private handleContextMenuEvent(event: Event): void {\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    const eventTarget = (event.target as Node);\n    if (eventTarget.isSelfOrDescendant(this.promptElement)) {\n      void contextMenu.show();\n      return;\n    }\n\n    const sourceElement = eventTarget.enclosingNodeOrSelfWithClass('console-message-wrapper');\n    const consoleViewMessage = sourceElement && getMessageForElement(sourceElement);\n    const consoleMessage = consoleViewMessage ? consoleViewMessage.consoleMessage() : null;\n\n    if (consoleMessage && consoleMessage.url) {\n      const menuTitle = i18nString(\n          UIStrings.hideMessagesFromS, {PH1: new Common.ParsedURL.ParsedURL(consoleMessage.url).displayName});\n      contextMenu.headerSection().appendItem(\n          menuTitle, this.filter.addMessageURLFilter.bind(this.filter, consoleMessage.url));\n    }\n\n    contextMenu.defaultSection().appendAction('console.clear');\n    contextMenu.defaultSection().appendAction('console.clear.history');\n    contextMenu.saveSection().appendItem(i18nString(UIStrings.saveAs), this.saveConsole.bind(this));\n    if (this.element.hasSelection()) {\n      contextMenu.clipboardSection().appendItem(\n          i18nString(UIStrings.copyVisibleStyledSelection), this.viewport.copyWithStyles.bind(this.viewport));\n    }\n\n    if (consoleMessage) {\n      const request = Logs.NetworkLog.NetworkLog.requestForConsoleMessage(consoleMessage);\n      if (request && SDK.NetworkManager.NetworkManager.canReplayRequest(request)) {\n        contextMenu.debugSection().appendItem(\n            i18nString(UIStrings.replayXhr), SDK.NetworkManager.NetworkManager.replayRequest.bind(null, request));\n      }\n    }\n\n    void contextMenu.show();\n  }\n\n  private async saveConsole(): Promise<void> {\n    const url = (SDK.TargetManager.TargetManager.instance().mainTarget() as SDK.Target.Target).inspectedURL();\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(url);\n    const filename =\n        Platform.StringUtilities.sprintf('%s-%d.log', parsedURL ? parsedURL.host : 'console', Date.now()) as\n        Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const progressIndicator = new UI.ProgressIndicator.ProgressIndicator();\n    progressIndicator.setTitle(i18nString(UIStrings.writingFile));\n    progressIndicator.setTotalWork(this.itemCount());\n\n    const chunkSize = 350;\n\n    if (!await stream.open(filename)) {\n      return;\n    }\n    this.progressToolbarItem.element.appendChild(progressIndicator.element);\n\n    let messageIndex = 0;\n    while (messageIndex < this.itemCount() && !progressIndicator.isCanceled()) {\n      const messageContents = [];\n      let i;\n      for (i = 0; i < chunkSize && i + messageIndex < this.itemCount(); ++i) {\n        const message = (this.itemElement(messageIndex + i) as ConsoleViewMessage);\n        messageContents.push(message.toExportString());\n      }\n      messageIndex += i;\n      await stream.write(messageContents.join('\\n') + '\\n');\n      progressIndicator.setWorked(messageIndex);\n    }\n\n    void stream.close();\n    progressIndicator.done();\n  }\n\n  private tryToCollapseMessages(viewMessage: ConsoleViewMessage, lastMessage?: ConsoleViewMessage): boolean {\n    const timestampsShown = this.timestampsSetting.get();\n    if (!timestampsShown && lastMessage && !viewMessage.consoleMessage().isGroupMessage() &&\n        viewMessage.consoleMessage().type !== SDK.ConsoleModel.FrontendMessageType.Command &&\n        viewMessage.consoleMessage().type !== SDK.ConsoleModel.FrontendMessageType.Result &&\n        viewMessage.consoleMessage().isEqual(lastMessage.consoleMessage())) {\n      lastMessage.incrementRepeatCount();\n      if (viewMessage.isLastInSimilarGroup()) {\n        lastMessage.setInSimilarGroup(true, true);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  private buildHiddenCache(startIndex: number, viewMessages: ConsoleViewMessage[]): void {\n    const startTime = Date.now();\n    let i;\n    for (i = startIndex; i < viewMessages.length; ++i) {\n      this.computeShouldMessageBeVisible(viewMessages[i]);\n      if (i % 10 === 0 && Date.now() - startTime > 12) {\n        break;\n      }\n    }\n\n    if (i === viewMessages.length) {\n      this.updateMessageList();\n      return;\n    }\n    this.buildHiddenCacheTimeout =\n        this.element.window().requestAnimationFrame(this.buildHiddenCache.bind(this, i + 1, viewMessages));\n  }\n\n  private cancelBuildHiddenCache(): void {\n    this.shouldBeHiddenCache.clear();\n    if (this.buildHiddenCacheTimeout) {\n      this.element.window().cancelAnimationFrame(this.buildHiddenCacheTimeout);\n      delete this.buildHiddenCacheTimeout;\n    }\n  }\n\n  private updateMessageList(): void {\n    this.regexMatchRanges = [];\n    this.hiddenByFilterCount = 0;\n    for (const visibleViewMessage of this.visibleViewMessages) {\n      visibleViewMessage.resetCloseGroupDecorationCount();\n      visibleViewMessage.resetIncrementRepeatCount();\n    }\n    this.visibleViewMessages = [];\n    if (this.groupSimilarSetting.get()) {\n      this.addGroupableMessagesToEnd();\n    } else {\n      for (const consoleMessage of this.consoleMessages) {\n        consoleMessage.setInSimilarGroup(false);\n        if (consoleMessage.consoleMessage().isGroupable()) {\n          // Since grouping similar messages is disabled, we need clear the\n          // reference to the artificial console group start.\n          consoleMessage.clearConsoleGroup();\n        }\n        this.appendMessageToEnd(\n            consoleMessage,\n            true /* crbug.com/1082963: prevent collaps`e of same messages when \"Group similar\" is false */);\n      }\n    }\n    this.updateFilterStatus();\n    this.searchableViewInternal.updateSearchMatchesCount(this.regexMatchRanges.length);\n    this.viewport.invalidate();\n    this.messagesCountElement.setAttribute(\n        'aria-label', i18nString(UIStrings.filteredMessagesInConsole, {PH1: this.visibleViewMessages.length}));\n  }\n\n  private addGroupableMessagesToEnd(): void {\n    const alreadyAdded = new Set<SDK.ConsoleModel.ConsoleMessage>();\n    const processedGroupKeys = new Set<string>();\n    for (const viewMessage of this.consoleMessages) {\n      const message = viewMessage.consoleMessage();\n      if (alreadyAdded.has(message)) {\n        continue;\n      }\n\n      if (!message.isGroupable()) {\n        this.appendMessageToEnd(viewMessage);\n        alreadyAdded.add(message);\n        continue;\n      }\n\n      const key = viewMessage.groupKey();\n      const viewMessagesInGroup = this.groupableMessages.get(key);\n      if (!viewMessagesInGroup || viewMessagesInGroup.length < 5) {\n        viewMessage.setInSimilarGroup(false);\n        this.appendMessageToEnd(viewMessage);\n        alreadyAdded.add(message);\n        continue;\n      }\n\n      if (processedGroupKeys.has(key)) {\n        continue;\n      }\n\n      if (!viewMessagesInGroup.find(x => this.shouldMessageBeVisible(x))) {\n        // Optimize for speed.\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n        // @ts-expect-error\n        Platform.SetUtilities.addAll(alreadyAdded, viewMessagesInGroup);\n        processedGroupKeys.add(key);\n        continue;\n      }\n\n      // Create artificial group start and end messages.\n      let startGroupViewMessage = this.groupableMessageTitle.get(key);\n      if (!startGroupViewMessage) {\n        const startGroupMessage = new SDK.ConsoleModel.ConsoleMessage(\n            null, message.source, message.level, viewMessage.groupTitle(),\n            {type: Protocol.Runtime.ConsoleAPICalledEventType.StartGroupCollapsed});\n        startGroupViewMessage = this.createViewMessage(startGroupMessage);\n        this.groupableMessageTitle.set(key, startGroupViewMessage);\n      }\n      startGroupViewMessage.setRepeatCount(viewMessagesInGroup.length);\n      this.appendMessageToEnd(startGroupViewMessage);\n\n      for (const viewMessageInGroup of viewMessagesInGroup) {\n        viewMessageInGroup.setInSimilarGroup(\n            true, viewMessagesInGroup[viewMessagesInGroup.length - 1] === viewMessageInGroup);\n        viewMessageInGroup.setConsoleGroup(startGroupViewMessage as ConsoleGroupViewMessage);\n        this.appendMessageToEnd(viewMessageInGroup, true);\n        alreadyAdded.add(viewMessageInGroup.consoleMessage());\n      }\n\n      const endGroupMessage = new SDK.ConsoleModel.ConsoleMessage(\n          null, message.source, message.level, message.messageText,\n          {type: Protocol.Runtime.ConsoleAPICalledEventType.EndGroup});\n      this.appendMessageToEnd(this.createViewMessage(endGroupMessage));\n    }\n  }\n\n  private messagesClicked(event: Event): void {\n    const target = (event.target as Node | null);\n    // Do not focus prompt if messages have selection.\n    if (!this.messagesElement.hasSelection()) {\n      const clickedOutsideMessageList =\n          target === this.messagesElement || this.prompt.belowEditorElement().isSelfOrAncestor(target);\n      if (clickedOutsideMessageList) {\n        this.prompt.moveCaretToEndOfPrompt();\n        this.focusPrompt();\n      }\n    }\n  }\n\n  private messagesKeyDown(event: Event): void {\n    const keyEvent = (event as KeyboardEvent);\n    const hasActionModifier = keyEvent.ctrlKey || keyEvent.altKey || keyEvent.metaKey;\n    if (hasActionModifier || keyEvent.key.length !== 1 || UI.UIUtils.isEditing() ||\n        this.messagesElement.hasSelection()) {\n      return;\n    }\n    this.prompt.moveCaretToEndOfPrompt();\n    this.focusPrompt();\n  }\n\n  private messagesPasted(_event: Event): void {\n    if (UI.UIUtils.isEditing()) {\n      return;\n    }\n    this.prompt.focus();\n  }\n\n  private registerShortcuts(): void {\n    this.shortcuts.set(\n        UI.KeyboardShortcut.KeyboardShortcut.makeKey('u', UI.KeyboardShortcut.Modifiers.Ctrl),\n        this.clearPromptBackwards.bind(this));\n  }\n\n  private clearPromptBackwards(): void {\n    this.prompt.clear();\n  }\n\n  private promptKeyDown(event: Event): void {\n    const keyboardEvent = (event as KeyboardEvent);\n    if (keyboardEvent.key === 'PageUp') {\n      this.updateStickToBottomOnWheel();\n      return;\n    }\n\n    const shortcut = UI.KeyboardShortcut.KeyboardShortcut.makeKeyFromEvent(keyboardEvent);\n    const handler = this.shortcuts.get(shortcut);\n    if (handler) {\n      handler();\n      keyboardEvent.preventDefault();\n    }\n  }\n\n  private printResult(\n      result: SDK.RemoteObject.RemoteObject|null, originatingConsoleMessage: SDK.ConsoleModel.ConsoleMessage,\n      exceptionDetails?: Protocol.Runtime.ExceptionDetails): void {\n    if (!result) {\n      return;\n    }\n\n    const level = Boolean(exceptionDetails) ? Protocol.Log.LogEntryLevel.Error : Protocol.Log.LogEntryLevel.Info;\n    let message;\n    if (!exceptionDetails) {\n      message = new SDK.ConsoleModel.ConsoleMessage(\n          result.runtimeModel(), Protocol.Log.LogEntrySource.Javascript, level, '',\n          {type: SDK.ConsoleModel.FrontendMessageType.Result, parameters: [result]});\n    } else {\n      message = SDK.ConsoleModel.ConsoleMessage.fromException(\n          result.runtimeModel(), exceptionDetails, SDK.ConsoleModel.FrontendMessageType.Result, undefined, undefined);\n    }\n    message.setOriginatingMessage(originatingConsoleMessage);\n    SDK.ConsoleModel.ConsoleModel.instance().addMessage(message);\n  }\n\n  private commandEvaluated(event: Common.EventTarget.EventTargetEvent<SDK.ConsoleModel.CommandEvaluatedEvent>): void {\n    const {data} = event;\n    this.prompt.history().pushHistoryItem(data.commandMessage.messageText);\n    this.consoleHistorySetting.set(this.prompt.history().historyData().slice(-persistedHistorySize));\n    this.printResult(data.result, data.commandMessage, data.exceptionDetails);\n  }\n\n  elementsToRestoreScrollPositionsFor(): Element[] {\n    return [this.messagesElement];\n  }\n\n  searchCanceled(): void {\n    this.cleanupAfterSearch();\n    for (const message of this.visibleViewMessages) {\n      message.setSearchRegex(null);\n    }\n    this.currentMatchRangeIndex = -1;\n    this.regexMatchRanges = [];\n    this.searchRegex = null;\n    this.viewport.refresh();\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    this.searchCanceled();\n    this.searchableViewInternal.updateSearchMatchesCount(0);\n\n    this.searchRegex = searchConfig.toSearchRegex(true).regex;\n\n    this.regexMatchRanges = [];\n    this.currentMatchRangeIndex = -1;\n\n    if (shouldJump) {\n      this.searchShouldJumpBackwards = Boolean(jumpBackwards);\n    }\n\n    this.searchProgressIndicator = new UI.ProgressIndicator.ProgressIndicator();\n    this.searchProgressIndicator.setTitle(i18nString(UIStrings.searching));\n    this.searchProgressIndicator.setTotalWork(this.visibleViewMessages.length);\n    this.progressToolbarItem.element.appendChild(this.searchProgressIndicator.element);\n\n    this.innerSearch(0);\n  }\n\n  private cleanupAfterSearch(): void {\n    delete this.searchShouldJumpBackwards;\n    if (this.innerSearchTimeoutId) {\n      clearTimeout(this.innerSearchTimeoutId);\n      delete this.innerSearchTimeoutId;\n    }\n    if (this.searchProgressIndicator) {\n      this.searchProgressIndicator.done();\n      delete this.searchProgressIndicator;\n    }\n  }\n\n  private searchFinishedForTests(): void {\n    // This method is sniffed in tests.\n  }\n\n  private innerSearch(index: number): void {\n    delete this.innerSearchTimeoutId;\n    if (this.searchProgressIndicator && this.searchProgressIndicator.isCanceled()) {\n      this.cleanupAfterSearch();\n      return;\n    }\n\n    const startTime = Date.now();\n    for (; index < this.visibleViewMessages.length && Date.now() - startTime < 100; ++index) {\n      this.searchMessage(index);\n    }\n\n    this.searchableViewInternal.updateSearchMatchesCount(this.regexMatchRanges.length);\n    if (typeof this.searchShouldJumpBackwards !== 'undefined' && this.regexMatchRanges.length) {\n      this.jumpToMatch(this.searchShouldJumpBackwards ? -1 : 0);\n      delete this.searchShouldJumpBackwards;\n    }\n\n    if (index === this.visibleViewMessages.length) {\n      this.cleanupAfterSearch();\n      window.setTimeout(this.searchFinishedForTests.bind(this), 0);\n      return;\n    }\n\n    this.innerSearchTimeoutId = window.setTimeout(this.innerSearch.bind(this, index), 100);\n    if (this.searchProgressIndicator) {\n      this.searchProgressIndicator.setWorked(index);\n    }\n  }\n\n  private searchMessage(index: number): void {\n    const message = this.visibleViewMessages[index];\n    message.setSearchRegex(this.searchRegex);\n    for (let i = 0; i < message.searchCount(); ++i) {\n      this.regexMatchRanges.push({messageIndex: index, matchIndex: i});\n    }\n  }\n\n  jumpToNextSearchResult(): void {\n    this.jumpToMatch(this.currentMatchRangeIndex + 1);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    this.jumpToMatch(this.currentMatchRangeIndex - 1);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return true;\n  }\n\n  private jumpToMatch(index: number): void {\n    if (!this.regexMatchRanges.length) {\n      return;\n    }\n\n    let matchRange;\n    if (this.currentMatchRangeIndex >= 0) {\n      matchRange = this.regexMatchRanges[this.currentMatchRangeIndex];\n      const message = this.visibleViewMessages[matchRange.messageIndex];\n      message.searchHighlightNode(matchRange.matchIndex)\n          .classList.remove(UI.UIUtils.highlightedCurrentSearchResultClassName);\n    }\n\n    index = Platform.NumberUtilities.mod(index, this.regexMatchRanges.length);\n    this.currentMatchRangeIndex = index;\n    this.searchableViewInternal.updateCurrentMatchIndex(index);\n    matchRange = this.regexMatchRanges[index];\n    const message = this.visibleViewMessages[matchRange.messageIndex];\n    const highlightNode = message.searchHighlightNode(matchRange.matchIndex);\n    highlightNode.classList.add(UI.UIUtils.highlightedCurrentSearchResultClassName);\n    this.viewport.scrollItemIntoView(matchRange.messageIndex);\n    highlightNode.scrollIntoViewIfNeeded();\n  }\n\n  private updateStickToBottomOnPointerDown(isRightClick?: boolean): void {\n    this.muteViewportUpdates = !isRightClick;\n    this.viewport.setStickToBottom(false);\n    if (this.waitForScrollTimeout) {\n      clearTimeout(this.waitForScrollTimeout);\n      delete this.waitForScrollTimeout;\n    }\n  }\n\n  private updateStickToBottomOnPointerUp(): void {\n    if (!this.muteViewportUpdates) {\n      return;\n    }\n\n    // Delay querying isScrolledToBottom to give time for smooth scroll\n    // events to arrive. The value for the longest timeout duration is\n    // retrieved from crbug.com/575409.\n    this.waitForScrollTimeout = window.setTimeout(updateViewportState.bind(this), 200);\n\n    function updateViewportState(this: ConsoleView): void {\n      this.muteViewportUpdates = false;\n      if (this.isShowing()) {\n        this.viewport.setStickToBottom(this.isScrolledToBottom());\n      }\n      if (this.maybeDirtyWhileMuted) {\n        this.scheduleViewportRefresh();\n        delete this.maybeDirtyWhileMuted;\n      }\n      delete this.waitForScrollTimeout;\n      this.updateViewportStickinessForTest();\n    }\n  }\n\n  private updateViewportStickinessForTest(): void {\n    // This method is sniffed in tests.\n  }\n\n  private updateStickToBottomOnWheel(): void {\n    this.updateStickToBottomOnPointerDown();\n    this.updateStickToBottomOnPointerUp();\n  }\n\n  private promptTextChanged(): void {\n    const oldStickToBottom = this.viewport.stickToBottom();\n    const willStickToBottom = this.isScrolledToBottom();\n    this.viewport.setStickToBottom(willStickToBottom);\n    if (willStickToBottom && !oldStickToBottom) {\n      this.scheduleViewportRefresh();\n    }\n    this.promptTextChangedForTest();\n  }\n\n  private promptTextChangedForTest(): void {\n    // This method is sniffed in tests.\n  }\n\n  private isScrolledToBottom(): boolean {\n    const distanceToPromptEditorBottom = this.messagesElement.scrollHeight - this.messagesElement.scrollTop -\n        this.messagesElement.clientHeight - (this.prompt.belowEditorElement() as HTMLElement).offsetHeight;\n    return distanceToPromptEditorBottom <= 2;\n  }\n}\n\n// @ts-ignore exported for Tests.js\nglobalThis.Console = globalThis.Console || {};\n// @ts-ignore exported for Tests.js\nglobalThis.Console.ConsoleView = ConsoleView;\n\nconst persistedHistorySize = 300;\n\nexport class ConsoleViewFilter {\n  private readonly filterChanged: () => void;\n  messageLevelFiltersSetting: Common.Settings.Setting<LevelsMask>;\n  hideNetworkMessagesSetting: Common.Settings.Setting<boolean>;\n  filterByExecutionContextSetting: Common.Settings.Setting<boolean>;\n  private readonly suggestionBuilder: UI.FilterSuggestionBuilder.FilterSuggestionBuilder;\n  readonly textFilterUI: UI.Toolbar.ToolbarInput;\n  private readonly textFilterSetting: Common.Settings.Setting<string>;\n  private readonly filterParser: TextUtils.TextUtils.FilterParser;\n  currentFilter: ConsoleFilter;\n  private levelLabels: Map<Protocol.Log.LogEntryLevel, string>;\n  readonly levelMenuButton: UI.Toolbar.ToolbarButton;\n\n  constructor(filterChangedCallback: () => void) {\n    this.filterChanged = filterChangedCallback;\n\n    this.messageLevelFiltersSetting = ConsoleViewFilter.levelFilterSetting();\n    this.hideNetworkMessagesSetting = Common.Settings.Settings.instance().moduleSetting('hideNetworkMessages');\n    this.filterByExecutionContextSetting =\n        Common.Settings.Settings.instance().moduleSetting('selectedContextFilterEnabled');\n\n    this.messageLevelFiltersSetting.addChangeListener(this.onFilterChanged.bind(this));\n    this.hideNetworkMessagesSetting.addChangeListener(this.onFilterChanged.bind(this));\n    this.filterByExecutionContextSetting.addChangeListener(this.onFilterChanged.bind(this));\n    UI.Context.Context.instance().addFlavorChangeListener(\n        SDK.RuntimeModel.ExecutionContext, this.onFilterChanged, this);\n\n    const filterKeys = Object.values(FilterType);\n    this.suggestionBuilder = new UI.FilterSuggestionBuilder.FilterSuggestionBuilder(filterKeys);\n    this.textFilterUI = new UI.Toolbar.ToolbarInput(\n        i18nString(UIStrings.filter), '', 1, 1, i18nString(UIStrings.egEventdCdnUrlacom),\n        this.suggestionBuilder.completions.bind(this.suggestionBuilder), true);\n    this.textFilterSetting = Common.Settings.Settings.instance().createSetting('console.textFilter', '');\n    if (this.textFilterSetting.get()) {\n      this.textFilterUI.setValue(this.textFilterSetting.get());\n    }\n    this.textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, () => {\n      this.textFilterSetting.set(this.textFilterUI.value());\n      this.onFilterChanged();\n    });\n    this.filterParser = new TextUtils.TextUtils.FilterParser(filterKeys);\n    this.currentFilter = new ConsoleFilter('', [], null, this.messageLevelFiltersSetting.get());\n    this.updateCurrentFilter();\n    this.levelLabels = new Map(([\n      [Protocol.Log.LogEntryLevel.Verbose, i18nString(UIStrings.verbose)],\n      [Protocol.Log.LogEntryLevel.Info, i18nString(UIStrings.info)],\n      [Protocol.Log.LogEntryLevel.Warning, i18nString(UIStrings.warnings)],\n      [Protocol.Log.LogEntryLevel.Error, i18nString(UIStrings.errors)],\n    ]));\n\n    this.levelMenuButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.logLevels));\n    this.levelMenuButton.turnIntoSelect();\n    this.levelMenuButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.showLevelContextMenu.bind(this));\n    UI.ARIAUtils.markAsMenuButton(this.levelMenuButton.element);\n\n    this.updateLevelMenuButtonText();\n    this.messageLevelFiltersSetting.addChangeListener(this.updateLevelMenuButtonText.bind(this));\n  }\n\n  onMessageAdded(message: SDK.ConsoleModel.ConsoleMessage): void {\n    if (message.type === SDK.ConsoleModel.FrontendMessageType.Command ||\n        message.type === SDK.ConsoleModel.FrontendMessageType.Result || message.isGroupMessage()) {\n      return;\n    }\n    if (message.context) {\n      this.suggestionBuilder.addItem(FilterType.Context, message.context);\n    }\n    if (message.source) {\n      this.suggestionBuilder.addItem(FilterType.Source, message.source);\n    }\n    if (message.url) {\n      this.suggestionBuilder.addItem(FilterType.Url, message.url);\n    }\n  }\n\n  setLevelMenuOverridden(overridden: boolean): void {\n    this.levelMenuButton.setEnabled(!overridden);\n    if (overridden) {\n      this.levelMenuButton.setTitle(i18nString(UIStrings.overriddenByFilterSidebar));\n    } else {\n      this.updateLevelMenuButtonText();\n    }\n  }\n\n  static levelFilterSetting(): Common.Settings.Setting<LevelsMask> {\n    return Common.Settings.Settings.instance().createSetting(\n        'messageLevelFilters', ConsoleFilter.defaultLevelsFilterValue());\n  }\n\n  private updateCurrentFilter(): void {\n    const parsedFilters = this.filterParser.parse(this.textFilterUI.value());\n    if (this.hideNetworkMessagesSetting.get()) {\n      parsedFilters.push(\n          {key: FilterType.Source, text: Protocol.Log.LogEntrySource.Network, negative: true, regex: undefined});\n    }\n\n    this.currentFilter.executionContext = this.filterByExecutionContextSetting.get() ?\n        UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext) :\n        null;\n    this.currentFilter.parsedFilters = parsedFilters;\n    this.currentFilter.levelsMask = this.messageLevelFiltersSetting.get();\n  }\n\n  private onFilterChanged(): void {\n    this.updateCurrentFilter();\n    this.filterChanged();\n  }\n\n  private updateLevelMenuButtonText(): void {\n    let isAll = true;\n    let isDefault = true;\n    const allValue = ConsoleFilter.allLevelsFilterValue();\n    const defaultValue = ConsoleFilter.defaultLevelsFilterValue();\n\n    let text: Common.UIString.LocalizedString|null = null;\n    const levels = this.messageLevelFiltersSetting.get();\n    const allLevels: Protocol.EnumerableEnum<typeof Protocol.Log.LogEntryLevel> = {\n      Verbose: Protocol.Log.LogEntryLevel.Verbose,\n      Info: Protocol.Log.LogEntryLevel.Info,\n      Warning: Protocol.Log.LogEntryLevel.Warning,\n      Error: Protocol.Log.LogEntryLevel.Error,\n    };\n    for (const name of Object.values(allLevels)) {\n      isAll = isAll && levels[name] === allValue[name];\n      isDefault = isDefault && levels[name] === defaultValue[name];\n      if (levels[name]) {\n        text = text ? i18nString(UIStrings.customLevels) :\n                      i18nString(UIStrings.sOnly, {PH1: String(this.levelLabels.get(name))});\n      }\n    }\n    if (isAll) {\n      text = i18nString(UIStrings.allLevels);\n    } else if (isDefault) {\n      text = i18nString(UIStrings.defaultLevels);\n    } else {\n      text = text || i18nString(UIStrings.hideAll);\n    }\n    this.levelMenuButton.element.classList.toggle('warning', !isAll && !isDefault);\n    this.levelMenuButton.setText(text);\n    this.levelMenuButton.setTitle(i18nString(UIStrings.logLevelS, {PH1: text}));\n  }\n\n  private showLevelContextMenu(event: Common.EventTarget.EventTargetEvent<Event>): void {\n    const mouseEvent = event.data;\n    const setting = this.messageLevelFiltersSetting;\n    const levels = setting.get();\n\n    const contextMenu = new UI.ContextMenu.ContextMenu(mouseEvent, {\n      useSoftMenu: true,\n      x: this.levelMenuButton.element.totalOffsetLeft(),\n      y: this.levelMenuButton.element.totalOffsetTop() + (this.levelMenuButton.element as HTMLElement).offsetHeight,\n    });\n    contextMenu.headerSection().appendItem(\n        i18nString(UIStrings.default), () => setting.set(ConsoleFilter.defaultLevelsFilterValue()));\n    for (const [level, levelText] of this.levelLabels.entries()) {\n      contextMenu.defaultSection().appendCheckboxItem(levelText, toggleShowLevel.bind(null, level), levels[level]);\n    }\n    void contextMenu.show();\n\n    function toggleShowLevel(level: string): void {\n      levels[level] = !levels[level];\n      setting.set(levels);\n    }\n  }\n\n  addMessageURLFilter(url: Platform.DevToolsPath.UrlString): void {\n    if (!url) {\n      return;\n    }\n    const suffix = this.textFilterUI.value() ? ` ${this.textFilterUI.value()}` : '';\n    this.textFilterUI.setValue(`-url:${url}${suffix}`);\n    this.textFilterSetting.set(this.textFilterUI.value());\n    this.onFilterChanged();\n  }\n\n  shouldBeVisible(viewMessage: ConsoleViewMessage): boolean {\n    return this.currentFilter.shouldBeVisible(viewMessage);\n  }\n\n  clear(): void {\n    this.suggestionBuilder.clear();\n  }\n\n  reset(): void {\n    this.messageLevelFiltersSetting.set(ConsoleFilter.defaultLevelsFilterValue());\n    this.filterByExecutionContextSetting.set(false);\n    this.hideNetworkMessagesSetting.set(false);\n    this.textFilterUI.setValue('');\n    this.onFilterChanged();\n  }\n}\n\nlet actionDelegateInstance: ActionDelegate;\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(_context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'console.show':\n        Host.InspectorFrontendHost.InspectorFrontendHostInstance.bringToFront();\n        Common.Console.Console.instance().show();\n        ConsoleView.instance().focusPrompt();\n        return true;\n      case 'console.clear':\n        ConsoleView.clearConsole();\n        return true;\n      case 'console.clear.history':\n        ConsoleView.instance().clearHistory();\n        return true;\n      case 'console.create-pin':\n        ConsoleView.instance().pinPane.addPin('', true /* userGesture */);\n        return true;\n    }\n    return false;\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): ActionDelegate {\n    const {forceNew} = opts;\n    if (!actionDelegateInstance || forceNew) {\n      actionDelegateInstance = new ActionDelegate();\n    }\n\n    return actionDelegateInstance;\n  }\n}\n\nconst messagesSortedBySymbol = new WeakMap<ConsoleViewMessage, number>();\nconst consoleMessageToViewMessage = new WeakMap<SDK.ConsoleModel.ConsoleMessage, ConsoleViewMessage>();\nexport interface RegexMatchRange {\n  messageIndex: number;\n  matchIndex: number;\n}\n"]}