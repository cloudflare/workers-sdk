{"version":3,"file":"ObjectEventListenersSidebarPane.js","sourceRoot":"","sources":["../../../../../../front_end/panels/browser_debugger/ObjectEventListenersSidebarPane.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as EventListeners from '../event_listeners/event_listeners.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  *@description Label for a button in the sources panel that refreshes the list of global event listeners.\n  */\n  refreshGlobalListeners: 'Refresh global listeners',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/browser_debugger/ObjectEventListenersSidebarPane.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nlet objectEventListenersSidebarPaneInstance: ObjectEventListenersSidebarPane;\n\nexport class ObjectEventListenersSidebarPane extends UI.Widget.VBox implements UI.Toolbar.ItemsProvider {\n  readonly #refreshButton: UI.Toolbar.ToolbarButton;\n  readonly #eventListenersView: EventListeners.EventListenersView.EventListenersView;\n  #lastRequestedContext?: SDK.RuntimeModel.ExecutionContext;\n  private constructor() {\n    super();\n    this.#refreshButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.refreshGlobalListeners), 'largeicon-refresh');\n    this.#refreshButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.refreshClick, this);\n    this.#refreshButton.setEnabled(false);\n\n    this.#eventListenersView = new EventListeners.EventListenersView.EventListenersView(\n        this.update.bind(this), /* enableDefaultTreeFocus */ true);\n    this.#eventListenersView.show(this.element);\n    this.setDefaultFocusedChild(this.#eventListenersView);\n  }\n\n  static instance(): ObjectEventListenersSidebarPane {\n    if (!objectEventListenersSidebarPaneInstance) {\n      objectEventListenersSidebarPaneInstance = new ObjectEventListenersSidebarPane();\n    }\n    return objectEventListenersSidebarPaneInstance;\n  }\n\n  get eventListenersView(): EventListeners.EventListenersView.EventListenersView {\n    return this.#eventListenersView;\n  }\n\n  toolbarItems(): UI.Toolbar.ToolbarItem[] {\n    return [this.#refreshButton];\n  }\n\n  update(): void {\n    if (this.#lastRequestedContext) {\n      this.#lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName);\n      this.#lastRequestedContext = undefined;\n    }\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    if (!executionContext) {\n      this.#eventListenersView.reset();\n      this.#eventListenersView.addEmptyHolderIfNeeded();\n      return;\n    }\n    this.#lastRequestedContext = executionContext;\n    void Promise.all([this.windowObjectInContext(executionContext)])\n        .then(this.#eventListenersView.addObjects.bind(this.#eventListenersView));\n  }\n\n  wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    this.#refreshButton.setEnabled(true);\n    this.update();\n  }\n\n  willHide(): void {\n    super.willHide();\n    UI.Context.Context.instance().removeFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    this.#refreshButton.setEnabled(false);\n  }\n\n  private windowObjectInContext(executionContext: SDK.RuntimeModel.ExecutionContext):\n      Promise<SDK.RemoteObject.RemoteObject|null> {\n    return executionContext\n        .evaluate(\n            {\n              expression: 'self',\n              objectGroup: objectGroupName,\n              includeCommandLineAPI: false,\n              silent: true,\n              returnByValue: false,\n              generatePreview: false,\n              timeout: undefined,\n              throwOnSideEffect: undefined,\n              disableBreaks: undefined,\n              replMode: undefined,\n              allowUnsafeEvalBlockedByCSP: undefined,\n            },\n            /* userGesture */ false,\n            /* awaitPromise */ false)\n        .then(result => {\n          if ('error' in result || result.exceptionDetails) {\n            return null;\n          }\n          return result.object;\n        });\n  }\n\n  private refreshClick(event: Common.EventTarget.EventTargetEvent<Event>): void {\n    event.data.consume();\n    this.update();\n  }\n}\n\nexport const objectGroupName = 'object-event-listeners-sidebar-pane';\n"]}