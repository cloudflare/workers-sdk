{"version":3,"file":"EventListenerBreakpointsSidebarPane.js","sourceRoot":"","sources":["../../../../../../front_end/panels/browser_debugger/EventListenerBreakpointsSidebarPane.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAG7C,OAAO,EAAC,iCAAiC,EAAC,MAAM,wCAAwC,CAAC;AAEzF,IAAI,2CAAgF,CAAC;AAErF,MAAM,OAAO,mCAAoC,SAAQ,iCAAiC;IACxF;QACE,IAAI,WAAW,GACX,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,wBAAwB,EAAE,CAAC;QAClF,MAAM,iBAAiB,GAAG,GAAG,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,wBAAwB,EAAE,CAAC;QAClH,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAEpD,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxE,UAAU,CAAC,IAAI,EAAE,CAAC;QAClB,KAAK,CACD,UAAU,EAAE,WAAW,EAAE,kCAAkC,sCAAoD,CAAC;IACtH,CAAC;IAED,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,2CAA2C,EAAE;YAChD,2CAA2C,GAAG,IAAI,mCAAmC,EAAE,CAAC;SACzF;QACD,OAAO,2CAA2C,CAAC;IACrD,CAAC;IAED,8BAA8B,CAAC,OAAgD;QAE7E,MAAM,OAAO,GAAG,OAAO,CAAC,OAGvB,CAAC;QACF,MAAM,aAAa,GAAG,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;QACjH,IAAI,aAAa,EAAE;YACjB,OAAO,aAAa,CAAC;SACtB;QACD,OAAO,GAAG,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;IAC9G,CAAC;CACF","sourcesContent":["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {CategorizedBreakpointsSidebarPane} from './CategorizedBreakpointsSidebarPane.js';\n\nlet eventListenerBreakpointsSidebarPaneInstance: EventListenerBreakpointsSidebarPane;\n\nexport class EventListenerBreakpointsSidebarPane extends CategorizedBreakpointsSidebarPane {\n  private constructor() {\n    let breakpoints: SDK.CategorizedBreakpoint.CategorizedBreakpoint[] =\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().eventListenerBreakpoints();\n    const nonDomBreakpoints = SDK.EventBreakpointsModel.EventBreakpointsManager.instance().eventListenerBreakpoints();\n    breakpoints = breakpoints.concat(nonDomBreakpoints);\n\n    const categories = breakpoints.map(breakpoint => breakpoint.category());\n    categories.sort();\n    super(\n        categories, breakpoints, 'sources.eventListenerBreakpoints', Protocol.Debugger.PausedEventReason.EventListener);\n  }\n\n  static instance(): EventListenerBreakpointsSidebarPane {\n    if (!eventListenerBreakpointsSidebarPaneInstance) {\n      eventListenerBreakpointsSidebarPaneInstance = new EventListenerBreakpointsSidebarPane();\n    }\n    return eventListenerBreakpointsSidebarPaneInstance;\n  }\n\n  getBreakpointFromPausedDetails(details: SDK.DebuggerModel.DebuggerPausedDetails):\n      SDK.CategorizedBreakpoint.CategorizedBreakpoint|null {\n    const auxData = details.auxData as {\n      eventName: string,\n      targetName: string,\n    };\n    const domBreakpoint = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().resolveEventListenerBreakpoint(auxData);\n    if (domBreakpoint) {\n      return domBreakpoint;\n    }\n    return SDK.EventBreakpointsModel.EventBreakpointsManager.instance().resolveEventListenerBreakpoint(auxData);\n  }\n}\n"]}