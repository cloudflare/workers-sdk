{"version":3,"file":"HeapSnapshotGridNodes.js","sourceRoot":"","sources":["../../../../../../front_end/panels/profiler/HeapSnapshotGridNodes.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {ChildrenProvider} from './ChildrenProvider.js';\nimport type {\n  AllocationDataGrid, HeapSnapshotConstructorsDataGrid, HeapSnapshotDiffDataGrid, HeapSnapshotSortableDataGrid} from\n  './HeapSnapshotDataGrids.js';\nimport {HeapSnapshotSortableDataGridEvents} from './HeapSnapshotDataGrids.js';\nimport type {HeapSnapshotProviderProxy, HeapSnapshotProxy} from './HeapSnapshotProxy.js';\nimport type {DataDisplayDelegate} from './ProfileHeader.js';\n\nconst UIStrings = {\n  /**\n  *@description Generic text with two placeholders separated by a comma\n  *@example {1 613 680} PH1\n  *@example {44 %} PH2\n  */\n  genericStringsTwoPlaceholders: '{PH1}, {PH2}',\n  /**\n  *@description Text in Heap Snapshot Grid Nodes of a profiler tool\n  */\n  internalArray: '(internal array)[]',\n  /**\n  *@description Text in Heap Snapshot Grid Nodes of a profiler tool\n  */\n  userObjectReachableFromWindow: 'User object reachable from window',\n  /**\n  *@description Text in Heap Snapshot Grid Nodes of a profiler tool\n  */\n  detachedFromDomTree: 'Detached from DOM tree',\n  /**\n  *@description Text in Heap Snapshot Grid Nodes of a profiler tool\n  */\n  previewIsNotAvailable: 'Preview is not available',\n  /**\n  *@description A context menu item in the Heap Profiler Panel of a profiler tool\n  */\n  revealInSummaryView: 'Reveal in Summary view',\n  /**\n  *@description Text for the summary view\n  */\n  summary: 'Summary',\n  /**\n  *@description A context menu item in the Heap Profiler Panel of a profiler tool\n  *@example {SomeClassConstructor} PH1\n  *@example {12345} PH2\n  */\n  revealObjectSWithIdSInSummary: 'Reveal object \\'\\'{PH1}\\'\\' with id @{PH2} in Summary view',\n  /**\n  *@description Text to store an HTML element or JavaScript variable or expression result as a global variable\n  */\n  storeAsGlobalVariable: 'Store as global variable',\n  /**\n  *@description Text in Heap Snapshot Grid Nodes of a profiler tool that indicates an element contained in another\n  * element.\n  */\n  inElement: 'in',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotGridNodes.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nclass HeapSnapshotGridNodeBase extends DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode> {}\n\nexport class HeapSnapshotGridNode extends\n    Common.ObjectWrapper.eventMixin<HeapSnapshotGridNode.EventTypes, typeof HeapSnapshotGridNodeBase>(\n        HeapSnapshotGridNodeBase) {\n  dataGridInternal: HeapSnapshotSortableDataGrid;\n  instanceCount: number;\n  readonly savedChildren: Map<number, HeapSnapshotGridNode>;\n  retrievedChildrenRanges: {\n    from: number,\n    to: number,\n  }[];\n  providerObject: ChildrenProvider|null;\n  reachableFromWindow: boolean;\n  populated?: boolean;\n\n  constructor(tree: HeapSnapshotSortableDataGrid, hasChildren: boolean) {\n    super(null, hasChildren);\n    this.dataGridInternal = tree;\n    this.instanceCount = 0;\n\n    this.savedChildren = new Map();\n\n    /**\n     * List of position ranges for all visible nodes: [startPos1, endPos1),...,[startPosN, endPosN)\n     * Position is an item position in the provider.\n     */\n    this.retrievedChildrenRanges = [];\n\n    this.providerObject = null;\n    this.reachableFromWindow = false;\n  }\n\n  get name(): string|undefined {\n    return undefined;\n  }\n\n  heapSnapshotDataGrid(): HeapSnapshotSortableDataGrid {\n    return this.dataGridInternal;\n  }\n\n  createProvider(): ChildrenProvider {\n    throw new Error('Not implemented.');\n  }\n\n  comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    throw new Error('Not implemented.');\n  }\n\n  getHash(): number {\n    throw new Error('Not implemented.');\n  }\n  createChildNode(_item: HeapSnapshotModel.HeapSnapshotModel.Node|\n                  HeapSnapshotModel.HeapSnapshotModel.Edge): HeapSnapshotGridNode {\n    throw new Error('Not implemented.');\n  }\n\n  retainersDataSource(): {\n    snapshot: HeapSnapshotProxy,\n    snapshotNodeIndex: number,\n  }|null {\n    return null;\n  }\n\n  provider(): ChildrenProvider {\n    if (!this.providerObject) {\n      this.providerObject = this.createProvider();\n    }\n    return this.providerObject;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    return super.createCell(columnId);\n  }\n\n  collapse(): void {\n    super.collapse();\n    this.dataGridInternal.updateVisibleNodes(true);\n  }\n\n  expand(): void {\n    super.expand();\n    this.dataGridInternal.updateVisibleNodes(true);\n  }\n\n  dispose(): void {\n    if (this.providerObject) {\n      this.providerObject.dispose();\n    }\n    for (let node: (HeapSnapshotGridNode|null) = (this.children[0] as HeapSnapshotGridNode | null); node;\n         node = (node.traverseNextNode(true, this, true) as HeapSnapshotGridNode | null)) {\n      node.dispose();\n    }\n  }\n\n  queryObjectContent(_heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel, _objectGroupName: string):\n      Promise<SDK.RemoteObject.RemoteObject> {\n    throw new Error('Not implemented.');\n  }\n\n  tryQueryObjectContent(_heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel, _objectGroupName: string):\n      Promise<SDK.RemoteObject.RemoteObject|null> {\n    throw new Error('Not implemented.');\n  }\n\n  populateContextMenu(\n      _contextMenu: UI.ContextMenu.ContextMenu, _dataDisplayDelegate: DataDisplayDelegate,\n      _heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null): void {\n  }\n\n  toPercentString(num: number): string {\n    return num.toFixed(0) + '\\xa0%';  // \\xa0 is a non-breaking space.\n  }\n\n  toUIDistance(distance: number): string {\n    const baseSystemDistance = HeapSnapshotModel.HeapSnapshotModel.baseSystemDistance;\n    return distance >= 0 && distance < baseSystemDistance ? distance.toString() : '\\u2212';\n  }\n\n  allChildren(): HeapSnapshotGridNode[] {\n    return this.dataGridInternal.allChildren(this) as HeapSnapshotGridNode[];\n  }\n\n  removeChildByIndex(index: number): void {\n    this.dataGridInternal.removeChildByIndex(this, index);\n  }\n\n  childForPosition(nodePosition: number): HeapSnapshotGridNode|null {\n    let indexOfFirstChildInRange = 0;\n    for (let i = 0; i < this.retrievedChildrenRanges.length; i++) {\n      const range = this.retrievedChildrenRanges[i];\n      if (range.from <= nodePosition && nodePosition < range.to) {\n        const childIndex = indexOfFirstChildInRange + nodePosition - range.from;\n        return this.allChildren()[childIndex];\n      }\n      indexOfFirstChildInRange += range.to - range.from + 1;\n    }\n    return null;\n  }\n\n  createValueCell(columnId: string): HTMLElement {\n    const cell = (UI.Fragment.html`<td class=\"numeric-column\" />` as HTMLElement);\n    const dataGrid = (this.dataGrid as HeapSnapshotSortableDataGrid);\n    if (dataGrid.snapshot && dataGrid.snapshot.totalSize !== 0) {\n      const div = document.createElement('div');\n      const valueSpan = UI.Fragment.html`<span>${this.data[columnId]}</span>`;\n      div.appendChild(valueSpan);\n      const percentColumn = columnId + '-percent';\n      if (percentColumn in this.data) {\n        const percentSpan = UI.Fragment.html`<span class=\"percent-column\">${this.data[percentColumn]}</span>`;\n        div.appendChild(percentSpan);\n        div.classList.add('profile-multiple-values');\n        UI.ARIAUtils.markAsHidden(valueSpan);\n        UI.ARIAUtils.markAsHidden(percentSpan);\n        this.setCellAccessibleName(\n            i18nString(\n                UIStrings.genericStringsTwoPlaceholders, {PH1: this.data[columnId], PH2: this.data[percentColumn]}),\n            cell, columnId);\n      }\n      cell.appendChild(div);\n    }\n    return cell;\n  }\n\n  populate(): void {\n    if (this.populated) {\n      return;\n    }\n    this.populated = true;\n    void this.provider().sortAndRewind(this.comparator()).then(() => this.populateChildren());\n  }\n\n  expandWithoutPopulate(): Promise<void> {\n    // Make sure default populate won't take action.\n    this.populated = true;\n    this.expand();\n    return this.provider().sortAndRewind(this.comparator());\n  }\n\n  childHashForEntity(entity: HeapSnapshotModel.HeapSnapshotModel.Node|\n                     HeapSnapshotModel.HeapSnapshotModel.Edge): number {\n    if ('edgeIndex' in entity) {\n      return entity.edgeIndex;\n    }\n    return entity.id;\n  }\n\n  populateChildren(fromPosition?: number|null, toPosition?: number|null): Promise<void> {\n    return new Promise(resolve => {\n      fromPosition = fromPosition || 0;\n      toPosition = toPosition || fromPosition + this.dataGridInternal.defaultPopulateCount();\n      let firstNotSerializedPosition: number = fromPosition;\n      serializeNextChunk.call(this, toPosition);\n\n      function serializeNextChunk(this: HeapSnapshotGridNode, toPosition: number): void {\n        if (firstNotSerializedPosition >= toPosition) {\n          return;\n        }\n        const end = Math.min(firstNotSerializedPosition + this.dataGridInternal.defaultPopulateCount(), toPosition);\n        void this.provider()\n            .serializeItemsRange(firstNotSerializedPosition, end)\n            .then(itemsRange => childrenRetrieved.call(this, itemsRange, toPosition));\n        firstNotSerializedPosition = end;\n      }\n\n      function insertRetrievedChild(\n          this: HeapSnapshotGridNode,\n          item: HeapSnapshotModel.HeapSnapshotModel.Node|HeapSnapshotModel.HeapSnapshotModel.Edge,\n          insertionIndex: number): void {\n        if (this.savedChildren) {\n          const hash = this.childHashForEntity(item);\n          const child = this.savedChildren.get(hash);\n          if (child) {\n            this.dataGridInternal.insertChild(this, child, insertionIndex);\n            return;\n          }\n        }\n        this.dataGridInternal.insertChild(this, this.createChildNode(item), insertionIndex);\n      }\n\n      function insertShowMoreButton(\n          this: HeapSnapshotGridNode, from: number, to: number, insertionIndex: number): void {\n        const button = (new DataGrid.ShowMoreDataGridNode.ShowMoreDataGridNode(\n            this.populateChildren.bind(this), from, to, this.dataGridInternal.defaultPopulateCount()));\n        this.dataGridInternal.insertChild(this, (button as unknown as HeapSnapshotGridNode), insertionIndex);\n      }\n\n      function childrenRetrieved(\n          this: HeapSnapshotGridNode, itemsRange: HeapSnapshotModel.HeapSnapshotModel.ItemsRange,\n          toPosition: number): void {\n        let itemIndex = 0;\n        let itemPosition: number = itemsRange.startPosition;\n        const items = itemsRange.items;\n        let insertionIndex = 0;\n\n        if (!this.retrievedChildrenRanges.length) {\n          if (itemsRange.startPosition > 0) {\n            this.retrievedChildrenRanges.push({from: 0, to: 0});\n            insertShowMoreButton.call(this, 0, itemsRange.startPosition, insertionIndex++);\n          }\n          this.retrievedChildrenRanges.push({from: itemsRange.startPosition, to: itemsRange.endPosition});\n          for (let i = 0, l = items.length; i < l; ++i) {\n            insertRetrievedChild.call(this, items[i], insertionIndex++);\n          }\n          if (itemsRange.endPosition < itemsRange.totalLength) {\n            insertShowMoreButton.call(this, itemsRange.endPosition, itemsRange.totalLength, insertionIndex++);\n          }\n        } else {\n          let rangeIndex = 0;\n          let found = false;\n          let range: {\n            from: number,\n            to: number,\n          } = {from: 0, to: 0};\n          while (rangeIndex < this.retrievedChildrenRanges.length) {\n            range = this.retrievedChildrenRanges[rangeIndex];\n            if (range.to >= itemPosition) {\n              found = true;\n              break;\n            }\n            insertionIndex += range.to - range.from;\n            // Skip the button if there is one.\n            if (range.to < itemsRange.totalLength) {\n              insertionIndex += 1;\n            }\n            ++rangeIndex;\n          }\n\n          if (!found || itemsRange.startPosition < range.from) {\n            // Update previous button.\n            const button =\n                this.allChildren()[insertionIndex - 1] as unknown as DataGrid.ShowMoreDataGridNode.ShowMoreDataGridNode;\n            button.setEndPosition(itemsRange.startPosition);\n            insertShowMoreButton.call(\n                this, itemsRange.startPosition, found ? range.from : itemsRange.totalLength, insertionIndex);\n            range = {from: itemsRange.startPosition, to: itemsRange.startPosition};\n            if (!found) {\n              rangeIndex = this.retrievedChildrenRanges.length;\n            }\n            this.retrievedChildrenRanges.splice(rangeIndex, 0, range);\n          } else {\n            insertionIndex += itemPosition - range.from;\n          }\n          // At this point insertionIndex is always an index before button or between nodes.\n          // Also it is always true here that range.from <= itemPosition <= range.to\n\n          // Stretch the range right bound to include all new items.\n          while (range.to < itemsRange.endPosition) {\n            // Skip already added nodes.\n            const skipCount = range.to - itemPosition;\n            insertionIndex += skipCount;\n            itemIndex += skipCount;\n            itemPosition = range.to;\n\n            // We're at the position before button: ...<?node>x<button>\n            const nextRange = this.retrievedChildrenRanges[rangeIndex + 1];\n            let newEndOfRange: number = nextRange ? nextRange.from : itemsRange.totalLength;\n            if (newEndOfRange > itemsRange.endPosition) {\n              newEndOfRange = itemsRange.endPosition;\n            }\n            while (itemPosition < newEndOfRange) {\n              insertRetrievedChild.call(this, items[itemIndex++], insertionIndex++);\n              ++itemPosition;\n            }\n\n            // Merge with the next range.\n            if (nextRange && newEndOfRange === nextRange.from) {\n              range.to = nextRange.to;\n              // Remove \"show next\" button if there is one.\n              this.removeChildByIndex(insertionIndex);\n              this.retrievedChildrenRanges.splice(rangeIndex + 1, 1);\n            } else {\n              range.to = newEndOfRange;\n              // Remove or update next button.\n              if (newEndOfRange === itemsRange.totalLength) {\n                this.removeChildByIndex(insertionIndex);\n              } else {\n                (this.allChildren()[insertionIndex] as unknown as DataGrid.ShowMoreDataGridNode.ShowMoreDataGridNode)\n                    .setStartPosition(itemsRange.endPosition);\n              }\n            }\n          }\n        }\n\n        // TODO: fix this.\n        this.instanceCount += items.length;\n        if (firstNotSerializedPosition < toPosition) {\n          serializeNextChunk.call(this, toPosition);\n          return;\n        }\n\n        if (this.expanded) {\n          this.dataGridInternal.updateVisibleNodes(true);\n        }\n        resolve();\n        this.dispatchEventToListeners(HeapSnapshotGridNode.Events.PopulateComplete);\n      }\n    });\n  }\n\n  saveChildren(): void {\n    this.savedChildren.clear();\n    const children = this.allChildren();\n    for (let i = 0, l = children.length; i < l; ++i) {\n      const child = children[i];\n      if (!child.expanded) {\n        continue;\n      }\n      this.savedChildren.set(child.getHash(), child);\n    }\n  }\n\n  async sort(): Promise<void> {\n    this.dataGridInternal.recursiveSortingEnter();\n\n    await this.provider().sortAndRewind(this.comparator());\n\n    this.saveChildren();\n    this.dataGridInternal.removeAllChildren(this);\n    this.retrievedChildrenRanges = [];\n    const instanceCount = this.instanceCount;\n    this.instanceCount = 0;\n\n    await this.populateChildren(0, instanceCount);\n\n    for (const child of this.allChildren()) {\n      if (child.expanded) {\n        void child.sort();\n      }\n    }\n    this.dataGridInternal.recursiveSortingLeave();\n  }\n}\n\nexport namespace HeapSnapshotGridNode {\n  // TODO(crbug.com/1167717): Make this a const enum again\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum Events {\n    PopulateComplete = 'PopulateComplete',\n  }\n\n  export type EventTypes = {\n    [Events.PopulateComplete]: void,\n  };\n}\n\nexport abstract class HeapSnapshotGenericObjectNode extends HeapSnapshotGridNode {\n  referenceName?: string|null;\n  readonly nameInternal: string|undefined;\n  readonly type: string|undefined;\n  readonly distance: number|undefined;\n  shallowSize: number|undefined;\n  readonly retainedSize: number|undefined;\n  snapshotNodeId: number|undefined;\n  snapshotNodeIndex: number|undefined;\n  detachedDOMTreeNode: boolean|undefined;\n  linkElement?: Element;\n\n  constructor(dataGrid: HeapSnapshotSortableDataGrid, node: HeapSnapshotModel.HeapSnapshotModel.Node) {\n    super(dataGrid, false);\n    // node is null for DataGrid root nodes.\n    if (!node) {\n      return;\n    }\n    this.referenceName = null;\n    this.nameInternal = node.name;\n    this.type = node.type;\n    this.distance = node.distance;\n    this.shallowSize = node.selfSize;\n    this.retainedSize = node.retainedSize;\n    this.snapshotNodeId = node.id;\n    this.snapshotNodeIndex = node.nodeIndex;\n    if (this.type === 'string') {\n      this.reachableFromWindow = true;\n    } else if (this.type === 'object' && this.nameInternal.startsWith('Window')) {\n      this.nameInternal = this.shortenWindowURL(this.nameInternal, false);\n      this.reachableFromWindow = true;\n    } else if (node.canBeQueried) {\n      this.reachableFromWindow = true;\n    }\n    if (node.detachedDOMTreeNode) {\n      this.detachedDOMTreeNode = true;\n    }\n\n    const snapshot = (dataGrid.snapshot as HeapSnapshotProxy);\n    const shallowSizePercent = this.shallowSize / snapshot.totalSize * 100.0;\n    const retainedSizePercent = this.retainedSize / snapshot.totalSize * 100.0;\n    this.data = {\n      'distance': this.toUIDistance(this.distance),\n      'shallowSize': Platform.NumberUtilities.withThousandsSeparator(this.shallowSize),\n      'retainedSize': Platform.NumberUtilities.withThousandsSeparator(this.retainedSize),\n      'shallowSize-percent': this.toPercentString(shallowSizePercent),\n      'retainedSize-percent': this.toPercentString(retainedSizePercent),\n    };\n  }\n\n  get name(): string|undefined {\n    return this.nameInternal;\n  }\n\n  retainersDataSource(): {\n    snapshot: HeapSnapshotProxy,\n    snapshotNodeIndex: number,\n  }|null {\n    return this.snapshotNodeIndex === undefined ? null : {\n      snapshot: (this.dataGridInternal.snapshot as HeapSnapshotProxy),\n      snapshotNodeIndex: this.snapshotNodeIndex,\n    };\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = columnId !== 'object' ? this.createValueCell(columnId) : this.createObjectCell();\n    return cell;\n  }\n\n  createObjectCell(): HTMLElement {\n    let value: string|(string | undefined) = this.nameInternal;\n    let valueStyle = 'object';\n    switch (this.type) {\n      case 'concatenated string':\n      case 'string':\n        value = `\"${value}\"`;\n        valueStyle = 'string';\n        break;\n      case 'regexp':\n        value = `/${value}/`;\n        valueStyle = 'string';\n        break;\n      case 'closure':\n        value = `${value}()`;\n        valueStyle = 'function';\n        break;\n      case 'bigint':\n        valueStyle = 'bigint';\n        break;\n      case 'number':\n        valueStyle = 'number';\n        break;\n      case 'hidden':\n      case 'object shape':\n        valueStyle = 'null';\n        break;\n      case 'array':\n        value = value ? `${value}[]` : i18nString(UIStrings.internalArray);\n        break;\n    }\n    return this.createObjectCellWithValue(valueStyle, value || '');\n  }\n\n  createObjectCellWithValue(valueStyle: string, value: string): HTMLElement {\n    const fragment = UI.Fragment.Fragment.build`\n  <td class=\"object-column disclosure\">\n  <div class=\"source-code event-properties\" style=\"overflow: visible;\" $=\"container\">\n  <span class=\"value object-value-${valueStyle}\">${value}</span>\n  <span class=\"object-value-id\">@${this.snapshotNodeId}</span>\n  </div>\n  </td>`;\n    const div = fragment.$('container');\n    this.prefixObjectCell(div);\n    if (this.reachableFromWindow) {\n      div.appendChild(UI.Fragment.html`<span class=\"heap-object-tag\" title=\"${\n          i18nString(UIStrings.userObjectReachableFromWindow)}\">🗖</span>`);\n    }\n    if (this.detachedDOMTreeNode) {\n      div.appendChild(UI.Fragment.html`<span class=\"heap-object-tag\" title=\"${\n          i18nString(UIStrings.detachedFromDomTree)}\">✀</span>`);\n    }\n    void this.appendSourceLocation(div);\n    const cell = (fragment.element() as HTMLElement);\n    if (this.depth) {\n      cell.style.setProperty(\n          'padding-left', (this.depth * (this.dataGrid as HeapSnapshotSortableDataGrid).indentWidth) + 'px');\n    }\n    return cell;\n  }\n\n  prefixObjectCell(_div: Element): void {\n  }\n\n  async appendSourceLocation(div: Element): Promise<void> {\n    const linkContainer = UI.Fragment.html`<span class=\"heap-object-source-link\" />`;\n    div.appendChild(linkContainer);\n    const link = await this.dataGridInternal.dataDisplayDelegate().linkifyObject((this.snapshotNodeIndex as number));\n    if (link) {\n      linkContainer.appendChild(link);\n      this.linkElement = link;\n    } else {\n      linkContainer.remove();\n    }\n  }\n\n  async queryObjectContent(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel, objectGroupName: string):\n      Promise<SDK.RemoteObject.RemoteObject> {\n    const remoteObject = await this.tryQueryObjectContent(heapProfilerModel, objectGroupName);\n    return remoteObject ||\n        heapProfilerModel.runtimeModel().createRemoteObjectFromPrimitiveValue(\n            i18nString(UIStrings.previewIsNotAvailable));\n  }\n\n  async tryQueryObjectContent(heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel, objectGroupName: string):\n      Promise<SDK.RemoteObject.RemoteObject|null> {\n    if (this.type === 'string') {\n      return heapProfilerModel.runtimeModel().createRemoteObjectFromPrimitiveValue(this.nameInternal);\n    }\n    return await heapProfilerModel.objectForSnapshotObjectId(\n        String(this.snapshotNodeId) as Protocol.HeapProfiler.HeapSnapshotObjectId, objectGroupName);\n  }\n\n  async updateHasChildren(): Promise<void> {\n    const isEmpty = await this.provider().isEmpty();\n    this.setHasChildren(!isEmpty);\n  }\n\n  shortenWindowURL(fullName: string, hasObjectId: boolean): string {\n    const startPos = fullName.indexOf('/');\n    const endPos = hasObjectId ? fullName.indexOf('@') : fullName.length;\n    if (startPos === -1 || endPos === -1) {\n      return fullName;\n    }\n    const fullURL = fullName.substring(startPos + 1, endPos).trimLeft();\n    let url = Platform.StringUtilities.trimURL(fullURL);\n    if (url.length > 40) {\n      url = Platform.StringUtilities.trimMiddle(url, 40);\n    }\n    return fullName.substr(0, startPos + 2) + url + fullName.substr(endPos);\n  }\n\n  populateContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu, dataDisplayDelegate: DataDisplayDelegate,\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null): void {\n    contextMenu.revealSection().appendItem(i18nString(UIStrings.revealInSummaryView), () => {\n      dataDisplayDelegate.showObject(String(this.snapshotNodeId), i18nString(UIStrings.summary));\n    });\n\n    if (this.referenceName) {\n      for (const match of this.referenceName.matchAll(/\\((?<objectName>[^@)]*) @(?<snapshotNodeId>\\d+)\\)/g)) {\n        const {objectName, snapshotNodeId} = (match.groups as {\n          objectName: string,\n          snapshotNodeId: string,\n        });\n        contextMenu.revealSection().appendItem(\n            i18nString(UIStrings.revealObjectSWithIdSInSummary, {PH1: objectName, PH2: snapshotNodeId}), () => {\n              dataDisplayDelegate.showObject(snapshotNodeId, i18nString(UIStrings.summary));\n            });\n      }\n    }\n\n    if (heapProfilerModel) {\n      contextMenu.revealSection().appendItem(i18nString(UIStrings.storeAsGlobalVariable), async () => {\n        const remoteObject =\n            await this.tryQueryObjectContent((heapProfilerModel as SDK.HeapProfilerModel.HeapProfilerModel), '');\n        if (!remoteObject) {\n          Common.Console.Console.instance().error(i18nString(UIStrings.previewIsNotAvailable));\n        } else {\n          await SDK.ConsoleModel.ConsoleModel.instance().saveToTempVariable(\n              UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext), remoteObject);\n        }\n      });\n    }\n  }\n}\n\nexport class HeapSnapshotObjectNode extends HeapSnapshotGenericObjectNode {\n  referenceName: string;\n  readonly referenceType: string;\n  readonly edgeIndex: number;\n  readonly snapshot: HeapSnapshotProxy;\n  parentObjectNode: HeapSnapshotObjectNode|null;\n  readonly cycledWithAncestorGridNode: HeapSnapshotObjectNode|null;\n\n  constructor(\n      dataGrid: HeapSnapshotSortableDataGrid, snapshot: HeapSnapshotProxy,\n      edge: HeapSnapshotModel.HeapSnapshotModel.Edge, parentObjectNode: HeapSnapshotObjectNode|null) {\n    super(dataGrid, edge.node);\n    this.referenceName = edge.name;\n    this.referenceType = edge.type;\n    this.edgeIndex = edge.edgeIndex;\n    this.snapshot = snapshot;\n\n    this.parentObjectNode = parentObjectNode;\n    this.cycledWithAncestorGridNode = this.findAncestorWithSameSnapshotNodeId();\n    if (!this.cycledWithAncestorGridNode) {\n      void this.updateHasChildren();\n    }\n\n    const data = this.data;\n    data['count'] = '';\n    data['addedCount'] = '';\n    data['removedCount'] = '';\n    data['countDelta'] = '';\n    data['addedSize'] = '';\n    data['removedSize'] = '';\n    data['sizeDelta'] = '';\n  }\n\n  retainersDataSource(): {\n    snapshot: HeapSnapshotProxy,\n    snapshotNodeIndex: number,\n  }|null {\n    return this.snapshotNodeIndex === undefined ? null :\n                                                  {snapshot: this.snapshot, snapshotNodeIndex: this.snapshotNodeIndex};\n  }\n\n  createProvider(): HeapSnapshotProviderProxy {\n    if (this.snapshotNodeIndex === undefined) {\n      throw new Error('Cannot create a provider on a root node');\n    }\n    return this.snapshot.createEdgesProvider(this.snapshotNodeIndex);\n  }\n\n  findAncestorWithSameSnapshotNodeId(): HeapSnapshotObjectNode|null {\n    let ancestor: (HeapSnapshotObjectNode|null) = this.parentObjectNode;\n    while (ancestor) {\n      if (ancestor.snapshotNodeId === this.snapshotNodeId) {\n        return ancestor;\n      }\n      ancestor = ancestor.parentObjectNode;\n    }\n    return null;\n  }\n\n  createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|\n                  HeapSnapshotModel.HeapSnapshotModel.Edge): HeapSnapshotObjectNode {\n    return new HeapSnapshotObjectNode(\n        this.dataGridInternal, this.snapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Edge), this);\n  }\n\n  getHash(): number {\n    return this.edgeIndex;\n  }\n\n  comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    const sortAscending = this.dataGridInternal.isSortOrderAscending();\n    const sortColumnId = this.dataGridInternal.sortColumnId();\n    switch (sortColumnId) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            '!edgeName', sortAscending, 'retainedSize', false);\n      case 'count':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'retainedSize', sortAscending, '!edgeName', true);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('distance', sortAscending, 'name', true);\n      default:\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n    }\n  }\n\n  prefixObjectCell(div: Element): void {\n    let name: string = this.referenceName || '(empty)';\n    let nameClass = 'name';\n    switch (this.referenceType) {\n      case 'context':\n        nameClass = 'object-value-number';\n        break;\n      case 'internal':\n      case 'hidden':\n      case 'weak':\n        nameClass = 'object-value-null';\n        break;\n      case 'element':\n        name = `[${name}]`;\n        break;\n    }\n    if (this.cycledWithAncestorGridNode) {\n      div.classList.add('cycled-ancessor-node');\n    }\n    div.prepend(UI.Fragment.html`<span class=\"property-name ${nameClass}\">${name}</span>\n  <span class=\"grayed\">${this.edgeNodeSeparator()}</span>`);\n  }\n\n  edgeNodeSeparator(): string {\n    return '::';\n  }\n}\n\nexport class HeapSnapshotRetainingObjectNode extends HeapSnapshotObjectNode {\n  constructor(\n      dataGrid: HeapSnapshotSortableDataGrid, snapshot: HeapSnapshotProxy,\n      edge: HeapSnapshotModel.HeapSnapshotModel.Edge, parentRetainingObjectNode: HeapSnapshotRetainingObjectNode|null) {\n    super(dataGrid, snapshot, edge, parentRetainingObjectNode);\n  }\n\n  createProvider(): HeapSnapshotProviderProxy {\n    if (this.snapshotNodeIndex === undefined) {\n      throw new Error('Cannot create providers on root nodes');\n    }\n    return this.snapshot.createRetainingEdgesProvider(this.snapshotNodeIndex);\n  }\n\n  createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|\n                  HeapSnapshotModel.HeapSnapshotModel.Edge): HeapSnapshotRetainingObjectNode {\n    return new HeapSnapshotRetainingObjectNode(\n        this.dataGridInternal, this.snapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Edge), this);\n  }\n\n  edgeNodeSeparator(): string {\n    // TODO(l10n): improve description or clarify intention.\n    return i18nString(UIStrings.inElement);\n  }\n\n  expand(): void {\n    this.expandRetainersChain(20);\n  }\n\n  expandRetainersChain(maxExpandLevels: number): void {\n    if (!this.populated) {\n      void this.once(HeapSnapshotGridNode.Events.PopulateComplete)\n          .then(() => this.expandRetainersChain(maxExpandLevels));\n      this.populate();\n      return;\n    }\n    super.expand();\n    if (--maxExpandLevels > 0 && this.children.length > 0) {\n      const retainer = (this.children[0] as HeapSnapshotRetainingObjectNode);\n      if ((retainer.distance || 0) > 1) {\n        retainer.expandRetainersChain(maxExpandLevels);\n        return;\n      }\n    }\n    this.dataGridInternal.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ExpandRetainersComplete);\n  }\n}\n\nexport class HeapSnapshotInstanceNode extends HeapSnapshotGenericObjectNode {\n  readonly baseSnapshotOrSnapshot: HeapSnapshotProxy;\n  readonly isDeletedNode: boolean;\n  constructor(\n      dataGrid: HeapSnapshotSortableDataGrid, snapshot: HeapSnapshotProxy,\n      node: HeapSnapshotModel.HeapSnapshotModel.Node, isDeletedNode: boolean) {\n    super(dataGrid, node);\n    this.baseSnapshotOrSnapshot = snapshot;\n    this.isDeletedNode = isDeletedNode;\n    void this.updateHasChildren();\n\n    const data = this.data;\n    data['count'] = '';\n    data['countDelta'] = '';\n    data['sizeDelta'] = '';\n    if (this.isDeletedNode) {\n      data['addedCount'] = '';\n      data['addedSize'] = '';\n      data['removedCount'] = '\\u2022';\n      data['removedSize'] = Platform.NumberUtilities.withThousandsSeparator(this.shallowSize || 0);\n    } else {\n      data['addedCount'] = '\\u2022';\n      data['addedSize'] = Platform.NumberUtilities.withThousandsSeparator(this.shallowSize || 0);\n      data['removedCount'] = '';\n      data['removedSize'] = '';\n    }\n  }\n\n  retainersDataSource(): {\n    snapshot: HeapSnapshotProxy,\n    snapshotNodeIndex: number,\n  }|null {\n    return this.snapshotNodeIndex === undefined ?\n        null :\n        {snapshot: this.baseSnapshotOrSnapshot, snapshotNodeIndex: this.snapshotNodeIndex};\n  }\n\n  createProvider(): HeapSnapshotProviderProxy {\n    if (this.snapshotNodeIndex === undefined) {\n      throw new Error('Cannot create providers on root nodes');\n    }\n    return this.baseSnapshotOrSnapshot.createEdgesProvider(this.snapshotNodeIndex);\n  }\n\n  createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|\n                  HeapSnapshotModel.HeapSnapshotModel.Edge): HeapSnapshotObjectNode {\n    return new HeapSnapshotObjectNode(\n        this.dataGridInternal, this.baseSnapshotOrSnapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Edge), null);\n  }\n\n  getHash(): number {\n    if (this.snapshotNodeId === undefined) {\n      throw new Error('Cannot hash root nodes');\n    }\n    return this.snapshotNodeId;\n  }\n\n  comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    const sortAscending = this.dataGridInternal.isSortOrderAscending();\n    const sortColumnId = this.dataGridInternal.sortColumnId();\n    switch (sortColumnId) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            '!edgeName', sortAscending, 'retainedSize', false);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'distance', sortAscending, 'retainedSize', false);\n      case 'count':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n      case 'addedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n      case 'removedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, '!edgeName', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'retainedSize', sortAscending, '!edgeName', true);\n      default:\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('!edgeName', true, 'retainedSize', false);\n    }\n  }\n}\n\nexport class HeapSnapshotConstructorNode extends HeapSnapshotGridNode {\n  readonly nameInternal: string;\n  readonly nodeFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter;\n  readonly distance: number;\n  readonly count: number;\n  readonly shallowSize: number;\n  readonly retainedSize: number;\n\n  constructor(\n      dataGrid: HeapSnapshotConstructorsDataGrid, className: string,\n      aggregate: HeapSnapshotModel.HeapSnapshotModel.Aggregate,\n      nodeFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter) {\n    super(dataGrid, aggregate.count > 0);\n    this.nameInternal = className;\n    this.nodeFilter = nodeFilter;\n    this.distance = aggregate.distance;\n    this.count = aggregate.count;\n    this.shallowSize = aggregate.self;\n    this.retainedSize = aggregate.maxRet;\n\n    const snapshot = (dataGrid.snapshot as HeapSnapshotProxy);\n    const retainedSizePercent = this.retainedSize / snapshot.totalSize * 100.0;\n    const shallowSizePercent = this.shallowSize / snapshot.totalSize * 100.0;\n    this.data = {\n      'object': className,\n      'count': Platform.NumberUtilities.withThousandsSeparator(this.count),\n      'distance': this.toUIDistance(this.distance),\n      'shallowSize': Platform.NumberUtilities.withThousandsSeparator(this.shallowSize),\n      'retainedSize': Platform.NumberUtilities.withThousandsSeparator(this.retainedSize),\n      'shallowSize-percent': this.toPercentString(shallowSizePercent),\n      'retainedSize-percent': this.toPercentString(retainedSizePercent),\n    };\n  }\n\n  get name(): string|undefined {\n    return this.nameInternal;\n  }\n\n  createProvider(): HeapSnapshotProviderProxy {\n    return (this.dataGridInternal.snapshot as HeapSnapshotProxy)\n               .createNodesProviderForClass(this.nameInternal, this.nodeFilter) as HeapSnapshotProviderProxy;\n  }\n\n  async populateNodeBySnapshotObjectId(snapshotObjectId: number): Promise<HeapSnapshotGridNode[]> {\n    this.dataGridInternal.resetNameFilter();\n    await this.expandWithoutPopulate();\n\n    const nodePosition = await this.provider().nodePosition(snapshotObjectId);\n    if (nodePosition === -1) {\n      this.collapse();\n      return [];\n    }\n\n    await this.populateChildren(nodePosition, null);\n\n    const node = (this.childForPosition(nodePosition) as HeapSnapshotGridNode | null);\n    return node ? [this, node] : [];\n  }\n\n  filteredOut(filterValue: string): boolean {\n    return this.nameInternal.toLowerCase().indexOf(filterValue) === -1;\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = columnId === 'object' ? super.createCell(columnId) : this.createValueCell(columnId);\n    if (columnId === 'object' && this.count > 1) {\n      cell.appendChild(UI.Fragment.html`<span class=\"objects-count\">×${this.count}</span>`);\n    }\n    return cell;\n  }\n\n  createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|\n                  HeapSnapshotModel.HeapSnapshotModel.Edge): HeapSnapshotInstanceNode {\n    return new HeapSnapshotInstanceNode(\n        this.dataGridInternal, (this.dataGridInternal.snapshot as HeapSnapshotProxy),\n        (item as HeapSnapshotModel.HeapSnapshotModel.Node), false);\n  }\n\n  comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    const sortAscending = this.dataGridInternal.isSortOrderAscending();\n    const sortColumnId = this.dataGridInternal.sortColumnId();\n    switch (sortColumnId) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'id', true);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'distance', sortAscending, 'retainedSize', false);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, 'id', true);\n      default:\n        throw new Error(`Invalid sort column id ${sortColumnId}`);\n    }\n  }\n}\n\nexport class HeapSnapshotDiffNodesProvider implements ChildrenProvider {\n  addedNodesProvider: HeapSnapshotProviderProxy;\n  deletedNodesProvider: HeapSnapshotProviderProxy;\n  addedCount: number;\n  removedCount: number;\n  constructor(\n      addedNodesProvider: HeapSnapshotProviderProxy, deletedNodesProvider: HeapSnapshotProviderProxy,\n      addedCount: number, removedCount: number) {\n    this.addedNodesProvider = addedNodesProvider;\n    this.deletedNodesProvider = deletedNodesProvider;\n    this.addedCount = addedCount;\n    this.removedCount = removedCount;\n  }\n\n  dispose(): void {\n    this.addedNodesProvider.dispose();\n    this.deletedNodesProvider.dispose();\n  }\n\n  nodePosition(_snapshotObjectId: number): Promise<number> {\n    throw new Error('Unreachable');\n  }\n\n  isEmpty(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  async serializeItemsRange(beginPosition: number, endPosition: number):\n      Promise<HeapSnapshotModel.HeapSnapshotModel.ItemsRange> {\n    let itemsRange;\n    let addedItems;\n    if (beginPosition < this.addedCount) {\n      itemsRange = await this.addedNodesProvider.serializeItemsRange(beginPosition, endPosition);\n\n      for (const item of itemsRange.items) {\n        item.isAddedNotRemoved = true;\n      }\n\n      if (itemsRange.endPosition >= endPosition) {\n        itemsRange.totalLength = this.addedCount + this.removedCount;\n        return itemsRange;\n      }\n\n      addedItems = itemsRange;\n      itemsRange = await this.deletedNodesProvider.serializeItemsRange(0, endPosition - itemsRange.endPosition);\n    } else {\n      addedItems = new HeapSnapshotModel.HeapSnapshotModel.ItemsRange(0, 0, 0, []);\n      itemsRange = await this.deletedNodesProvider.serializeItemsRange(\n          beginPosition - this.addedCount, endPosition - this.addedCount);\n    }\n\n    if (!addedItems.items.length) {\n      addedItems.startPosition = this.addedCount + itemsRange.startPosition;\n    }\n    for (const item of itemsRange.items) {\n      item.isAddedNotRemoved = false;\n    }\n    addedItems.items.push(...itemsRange.items);\n    addedItems.endPosition = this.addedCount + itemsRange.endPosition;\n    addedItems.totalLength = this.addedCount + this.removedCount;\n    return addedItems;\n  }\n\n  async sortAndRewind(comparator: HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig): Promise<void> {\n    await this.addedNodesProvider.sortAndRewind(comparator);\n    await this.deletedNodesProvider.sortAndRewind(comparator);\n  }\n}\n\nexport class HeapSnapshotDiffNode extends HeapSnapshotGridNode {\n  readonly nameInternal: string;\n  readonly addedCount: number;\n  readonly removedCount: number;\n  readonly countDelta: number;\n  readonly addedSize: number;\n  readonly removedSize: number;\n  readonly sizeDelta: number;\n  readonly deletedIndexes: number[];\n\n  constructor(\n      dataGrid: HeapSnapshotDiffDataGrid, className: string,\n      diffForClass: HeapSnapshotModel.HeapSnapshotModel.DiffForClass) {\n    super(dataGrid, true);\n    this.nameInternal = className;\n    this.addedCount = diffForClass.addedCount;\n    this.removedCount = diffForClass.removedCount;\n    this.countDelta = diffForClass.countDelta;\n    this.addedSize = diffForClass.addedSize;\n    this.removedSize = diffForClass.removedSize;\n    this.sizeDelta = diffForClass.sizeDelta;\n    this.deletedIndexes = diffForClass.deletedIndexes;\n    this.data = {\n      'object': className,\n      'addedCount': Platform.NumberUtilities.withThousandsSeparator(this.addedCount),\n      'removedCount': Platform.NumberUtilities.withThousandsSeparator(this.removedCount),\n      'countDelta': this.signForDelta(this.countDelta) +\n          Platform.NumberUtilities.withThousandsSeparator(Math.abs(this.countDelta)),\n      'addedSize': Platform.NumberUtilities.withThousandsSeparator(this.addedSize),\n      'removedSize': Platform.NumberUtilities.withThousandsSeparator(this.removedSize),\n      'sizeDelta':\n          this.signForDelta(this.sizeDelta) + Platform.NumberUtilities.withThousandsSeparator(Math.abs(this.sizeDelta)),\n    };\n  }\n\n  get name(): string|undefined {\n    return this.nameInternal;\n  }\n\n  createProvider(): HeapSnapshotDiffNodesProvider {\n    const tree = this.dataGridInternal as HeapSnapshotDiffDataGrid;\n    if (tree.snapshot === null || tree.baseSnapshot === undefined || tree.baseSnapshot.uid === undefined) {\n      throw new Error('Data sources have not been set correctly');\n    }\n    const addedNodesProvider = tree.snapshot.createAddedNodesProvider(tree.baseSnapshot.uid, this.nameInternal);\n    const deletedNodesProvider = tree.baseSnapshot.createDeletedNodesProvider(this.deletedIndexes);\n    if (!addedNodesProvider || !deletedNodesProvider) {\n      throw new Error('Failed to create node providers');\n    }\n    return new HeapSnapshotDiffNodesProvider(\n        addedNodesProvider, deletedNodesProvider, this.addedCount, this.removedCount);\n  }\n\n  createCell(columnId: string): HTMLElement {\n    const cell = super.createCell(columnId);\n    if (columnId !== 'object') {\n      cell.classList.add('numeric-column');\n    }\n    return cell;\n  }\n\n  createChildNode(item: HeapSnapshotModel.HeapSnapshotModel.Node|\n                  HeapSnapshotModel.HeapSnapshotModel.Edge): HeapSnapshotInstanceNode {\n    const dataGrid = (this.dataGridInternal as HeapSnapshotDiffDataGrid);\n    if (item.isAddedNotRemoved) {\n      if (dataGrid.snapshot === null) {\n        throw new Error('Data sources have not been set correctly');\n      }\n      return new HeapSnapshotInstanceNode(\n          this.dataGridInternal, dataGrid.snapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Node), false);\n    }\n    if (dataGrid.baseSnapshot === undefined) {\n      throw new Error('Data sources have not been set correctly');\n    }\n    return new HeapSnapshotInstanceNode(\n        this.dataGridInternal, dataGrid.baseSnapshot, (item as HeapSnapshotModel.HeapSnapshotModel.Node), true);\n  }\n\n  comparator(): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    const sortAscending = this.dataGridInternal.isSortOrderAscending();\n    const sortColumnId = this.dataGridInternal.sortColumnId();\n    switch (sortColumnId) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'id', true);\n      case 'addedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', true, 'id', true);\n      case 'removedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', true, 'id', true);\n      case 'countDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', true, 'id', true);\n      case 'addedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n      case 'removedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n      case 'sizeDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('selfSize', sortAscending, 'id', true);\n      default:\n        throw new Error(`Invalid sort column ${sortColumnId}`);\n    }\n  }\n\n  filteredOut(filterValue: string): boolean {\n    return this.nameInternal.toLowerCase().indexOf(filterValue) === -1;\n  }\n\n  signForDelta(delta: number): ''|'+'|'−' {\n    if (delta === 0) {\n      return '';\n    }\n    if (delta > 0) {\n      return '+';\n    }\n    return '\\u2212';  // Math minus sign, same width as plus.\n  }\n}\n\nexport class AllocationGridNode extends HeapSnapshotGridNode {\n  populated: boolean;\n  readonly allocationNode: HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode;\n\n  constructor(dataGrid: AllocationDataGrid, data: HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode) {\n    super(dataGrid, data.hasChildren);\n    this.populated = false;\n    this.allocationNode = data;\n    this.data = {\n      'liveCount': Platform.NumberUtilities.withThousandsSeparator(data.liveCount),\n      'count': Platform.NumberUtilities.withThousandsSeparator(data.count),\n      'liveSize': Platform.NumberUtilities.withThousandsSeparator(data.liveSize),\n      'size': Platform.NumberUtilities.withThousandsSeparator(data.size),\n      'name': data.name,\n    };\n  }\n\n  populate(): void {\n    if (this.populated) {\n      return;\n    }\n    void this.doPopulate();\n  }\n\n  async doPopulate(): Promise<void> {\n    this.populated = true;\n\n    const callers =\n        await (this.dataGridInternal.snapshot as HeapSnapshotProxy).allocationNodeCallers(this.allocationNode.id);\n\n    const callersChain = callers.nodesWithSingleCaller;\n    let parentNode: AllocationGridNode = (this as AllocationGridNode);\n    const dataGrid = (this.dataGridInternal as AllocationDataGrid);\n    for (const caller of callersChain) {\n      const child = new AllocationGridNode(dataGrid, caller);\n      dataGrid.appendNode(parentNode, child);\n      parentNode = child;\n      parentNode.populated = true;\n      if (this.expanded) {\n        parentNode.expand();\n      }\n    }\n\n    const callersBranch = callers.branchingCallers;\n    callersBranch.sort((this.dataGridInternal as AllocationDataGrid).createComparator());\n    for (const caller of callersBranch) {\n      dataGrid.appendNode(parentNode, new AllocationGridNode(dataGrid, caller));\n    }\n    dataGrid.updateVisibleNodes(true);\n  }\n\n  expand(): void {\n    super.expand();\n    if (this.children.length === 1) {\n      this.children[0].expand();\n    }\n  }\n\n  createCell(columnId: string): HTMLElement {\n    if (columnId !== 'name') {\n      return this.createValueCell(columnId);\n    }\n\n    const cell = super.createCell(columnId);\n    const allocationNode = this.allocationNode;\n    const heapProfilerModel = this.dataGridInternal.heapProfilerModel();\n    if (allocationNode.scriptId) {\n      const linkifier = (this.dataGridInternal as AllocationDataGrid).linkifier;\n      const urlElement = linkifier.linkifyScriptLocation(\n          heapProfilerModel ? heapProfilerModel.target() : null,\n          String(allocationNode.scriptId) as Protocol.Runtime.ScriptId,\n          allocationNode.scriptName as Platform.DevToolsPath.UrlString, allocationNode.line - 1, {\n            columnNumber: allocationNode.column - 1,\n            inlineFrameIndex: 0,\n            className: 'profile-node-file',\n          });\n      urlElement.style.maxWidth = '75%';\n      cell.insertBefore(urlElement, cell.firstChild);\n    }\n    return cell;\n  }\n\n  allocationNodeId(): number {\n    return this.allocationNode.id;\n  }\n}\n"]}