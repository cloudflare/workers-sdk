{"version":3,"file":"HeapProfileView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/profiler/HeapProfileView.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,QAAQ,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,KAAK,MAAM,MAAM,+CAA+C,CAAC;AACxE,OAAO,KAAK,UAAU,MAAM,2CAA2C,CAAC;AACxE,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAGhD,OAAO,EAAC,6BAA6B,EAAC,MAAM,2BAA2B,CAAC;AAGxE,OAAO,EAAS,oBAAoB,EAAC,MAAM,2BAA2B,CAAC;AAGvE,OAAO,EAAC,WAAW,EAAE,aAAa,EAAC,MAAM,oBAAoB,CAAC;AAC9D,OAAO,EAAC,WAAW,EAAE,qBAAqB,EAAC,MAAM,kBAAkB,CAAC;AAEpE,MAAM,SAAS,GAAG;IAChB;;;MAGE;IACF,aAAa,EAAE,sBAAsB;IACrC;;MAEE;IACF,aAAa,EAAE,mBAAmB;IAClC;;MAEE;IACF,cAAc,EAAE,oBAAoB;IACpC;;MAEE;IACF,iBAAiB,EAAE,qBAAqB;IACxC;;MAEE;IACF,kBAAkB,EAAE,sBAAsB;IAC1C;;MAEE;IACF,SAAS,EAAE,YAAY;IACvB;;MAEE;IACF,uBAAuB,EAAE,4BAA4B;IACrD;;MAEE;IACF,QAAQ,EAAE,WAAW;IACrB;;MAEE;IACF,kBAAkB,EAAE,qBAAqB;IACzC;;MAEE;IACF,gBAAgB,EAAE,mBAAmB;IACrC;;MAEE;IACF,uBAAuB,EAAE,kDAAkD;IAC3E;;MAEE;IACF,yBAAyB,EACrB,iGAAiG;IACrG;;MAEE;IACF,2BAA2B,EACvB,4FAA4F;IAChG;;;MAGE;IACF,QAAQ,EAAE,eAAe;IACzB;;;MAGE;IACF,MAAM,EAAE,aAAa;IACrB;;;MAGE;IACF,aAAa,EAAE,SAAS;IACxB;;;MAGE;IACF,GAAG,EAAE,UAAU;IACf;;MAEE;IACF,IAAI,EAAE,MAAM;IACZ;;MAEE;IACF,QAAQ,EAAE,WAAW;IACrB;;MAEE;IACF,SAAS,EAAE,YAAY;IACvB;;MAEE;IACF,GAAG,EAAE,KAAK;CACX,CAAC;AACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,oCAAoC,EAAE,SAAS,CAAC,CAAC;AAC1F,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtE,SAAS,4BAA4B,CAAC,aAAwC;IAE5E,OAAO,CAAC,aAAa,CAAC,OAAO,IAAI,aAAa,CAAC,eAAe,EAAE,CAA8C,CAAC;AACjH,CAAC;AAED,MAAM,OAAO,eAAgB,SAAQ,WAAW;IAC9C,aAAa,CAA4B;IAChC,WAAW,CAA8B;IAClD,aAAa,CAAS;IACb,gBAAgB,CAAyB;IAClD,UAAU,CAAW;IACrB,KAAK,CAAW;IAChB,GAAG,CAAW;IACd,QAAQ,CAAW;IACnB,SAAS,CAAS;IAClB,WAAW,CAAS;IACX,gBAAgB,CAAuB;IAChD,YAAY,aAAwC;QAClD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QAC/C,IAAI,CAAC,UAAU,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,IAAI,wBAAwB,CAAC,4BAA4B,CAAC,aAAa,CAAC,CAAC,CAAC;QAC1F,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;QACnC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAEzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAErD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QAErB,IAAI,CAAC,gBAAgB,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAEnD,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,8BAA8B,CAAC,EAAE;YACtE,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,0CAAyB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAClG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAClE,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;YAE9B,IAAI,CAAC,WAAW,CAAC,gBAAgB,kCAA6C,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YACxG,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBAClE,IAAI,CAAC,WAAW,CAAC,mBAAmB,kCAA6C,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;gBAC3G,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;gBAC7B,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC;YACrC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,OAAO,CAAC,GAAG,MAAM,KAAK,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAChE,CAAC;IAED,iBAAiB,CAAC,KAAgE;QAChF,MAAM,EAAC,KAAK,EAAE,KAAK,EAAC,GAAG,KAAK,CAAC,IAAI,CAAC;QAClC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACzB,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,EAAC,GAAG,EAAE,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,CAAC;QACzG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,iBAAiB,CAAC,KAAa,EAAE,KAAa;QAC5C,MAAM,WAAW,GAAG,4BAA4B,CAAE,IAAI,CAAC,aAA2C,CAAC,CAAC;QACpG,MAAM,OAAO,GAAG,IAAI,wBAAwB,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACxE,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;QACnC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAED,aAAa,CAAC,KAA0F;QACtG,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;QAE3B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAChB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;SACtB;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QACzC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,OAAO,IAAI,EAAE,EAAE;YAC3C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YAC9D,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAC9B,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC;gBACzF,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC;SACnC;QACD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAEjD,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAClE,IAAI,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE;YACvD,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC;SACrB;QAED,MAAM,OAAO,GAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,GAAG,EAAE,IAAI,CAAC,QAAQ;YAClB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;SACd,CAAC;QAEd,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,YAAY,CAAC,QAAgB;QAC3B,QAAQ,QAAQ,EAAE;YAChB,KAAK,MAAM;gBACT,OAAO,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAC7C,KAAK,OAAO;gBACV,OAAO,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;SAC/C;QACD,OAAO,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC;IAC9C,CAAC;IAED,4BAA4B;QAC1B,OAAO,IAAI,0BAA0B,CAChC,IAAI,CAAC,OAAO,EAA+B,EAAE,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,CAAC;IAC5F,CAAC;CACF;AAED,MAAM,OAAO,2BAA4B,SACrC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAyD,WAAW,CAAC;IACtG,SAAS,CAAU;IACnB,sBAAsB,CAAU;IAEhC,YAAY,MAAc,EAAE,WAAmB;QAC7C,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;IACtC,CAAC;IAED,oBAAoB;QAClB,OAAO,KAAK,CAAC,oBAAoB,EAAsC,CAAC;IAC1E,CAAC;IAED,QAAQ;QACN,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,aAAa;QACX,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;IAC7G,CAAC;IAED,aAAa;QACX,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,KAAK,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAClC;aAAM;YACL,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,qBAAqB;QACnB,MAAM,iBAAiB,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QACxG,IAAI,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,EAAE;YACrD,OAAO;SACR;QACD,MAAM,aAAa,GAAG,IAAI,yBAAyB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAC7E,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAC/B,aAAa,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;QAE5D,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACtD,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC;QAChF,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QAE9E,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,oBAAoB;QACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,MAAM,eAAe,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACpD,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,EAAE;YAC5D,OAAO;SACR;QAED,eAAe,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC1C,IAAI,eAAe,EAAE;YACnB,OAAO,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC;YACtC,oEAAoE;YACpE,8DAA8D;YAC9D,eAAe,CAAC,kBAAkB,CAAE,OAAe,CAAC,CAAC;YACrD,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;SACpC;QACD,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QAE9E,mEAAmE;QACnE,mEAAmE;QACnE,wCAAwC;QACxC,MAAM,yBAAyB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QAC9D,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;QACpC,IAAI,yBAAyB,EAAE;YAC7B,OAAO;SACR;QACD,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IAChF,CAAC;IAED,2BAA2B,CAAC,KAAa;QACvC,OAAO,IAAI,yBAAyB,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED,2BAA2B;QACzB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QACnC,KAAK,IAAI,CAAC,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,aAAa;QACX,MAAM,iBAAiB,CAAC;IAC1B,CAAC;IAED,YAAY;QACV,MAAM,iBAAiB,CAAC;IAC1B,CAAC;CACF;AAED,IAAI,+BAAwD,CAAC;AAE7D,MAAM,OAAO,uBAAwB,SAAQ,2BAA2B;IACtE,WAAW,CAAS;IACpB,gBAAgB,CAAS;IACzB;QACE,KAAK,CAAC,uBAAuB,CAAC,MAAM,EAAE,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,+BAA+B,EAAE;YACpC,+BAA+B,GAAG,IAAI,CAAC;SACxC;QAED,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;IAC9B,CAAC;IAED,MAAM,KAAK,QAAQ;QACjB,OAAO,+BAA+B,CAAC;IACzC,CAAC;IAED,IAAI,aAAa;QACf,OAAO,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,WAAW;QACb,oDAAoD;QACpD,MAAM,oBAAoB,GAAG;YAC3B,UAAU,CAAC,SAAS,CAAC,uBAAuB,CAAC;YAC7C,UAAU,CAAC,SAAS,CAAC,yBAAyB,CAAC;YAC/C,UAAU,CAAC,SAAS,CAAC,2BAA2B,CAAC;SAClD,CAAC;QACF,OAAO,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;IAC5E,CAAC;IAED,aAAa;QACX,MAAM,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACxD,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO;SACR;QAED,KAAK,iBAAiB,CAAC,aAAa,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,8BAA8B,CAAC,EAAE;YACtE,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;gBACxC,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC;YAC1B,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC3B;IACH,CAAC;IAED,sBAAsB;QACpB,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACrD,IAAI,gBAAgB,EAAE;YACpB,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,CAAC;YAC/D,OAAO,iBAAiB,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,wBAAwB,2CAAiD,CAAC;QAC/E,MAAM,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACxD,IAAI,CAAC,iBAAiB,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;QAED,MAAM,eAAe,GAAG,MAAM,iBAAiB,CAAC,YAAY,EAAE,CAAC;QAC/D,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,WAAW;QACf,MAAM,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACxD,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO;SACR;QAED,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC,kBAAkB,EAAE,CAAC;QAC7D,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO;SACR;QACD,IAAI,CAAC,wBAAwB,kCAA6C,OAAO,CAAC,CAAC;QACnF,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;YACxC,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC5B,CAAC;IAED,gEAAgE;IAChE,MAAM,CAAU,MAAM,GAAG,cAAc,CAAC;;AAe1C,MAAM,OAAO,yBAA0B,SAAQ,qBAAqB;IACzD,yBAAyB,CAA+C;IACjF,uBAAuB,CAiBrB;IACF,YACI,iBAA+D,EAAE,IAAiC,EAClG,KAAc;QAChB,KAAK,CACD,iBAAiB,IAAI,iBAAiB,CAAC,aAAa,EAAE,EAAE,IAAI,EAC5D,KAAK,IAAI,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,cAAc,EAAE,EAAC,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,yBAAyB,GAAG,iBAAiB,CAAC;QACnD,IAAI,CAAC,uBAAuB,GAAG;YAC7B,IAAI,EAAE;gBACJ,SAAS,EAAE;oBACT,YAAY,EAAE,EAAE;oBAChB,QAAQ,EAAE,EAA+B;oBACzC,GAAG,EAAE,EAAE;oBACP,UAAU,EAAE,CAAC;oBACb,YAAY,EAAE,CAAC;iBAChB;gBACD,QAAQ,EAAE,EAAE;gBACZ,QAAQ,EAAE,CAAC;gBACX,EAAE,EAAE,CAAC;aACN;YACD,OAAO,EAAE,EAAE;YACX,SAAS,EAAE,CAAC;YACZ,OAAO,EAAE,CAAC;YACV,KAAK,EAAE,EAAE;SACV,CAAC;IACJ,CAAC;IAED,UAAU;QACR,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACtC,CAAC;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,yBAAyB,CAAC;IACxC,CAAC;IAEQ,WAAW;QAClB,OAAO,KAAK,CAAC,WAAW,EAAiC,CAAC;IAC5D,CAAC;CACF;AAED,MAAM,OAAO,uBAAwB,SAAQ,GAAG,CAAC,gBAAgB,CAAC,WAAW;IAC3E,IAAI,CAAS;IACb,YAAY,IAAmD;QAC7D,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,IAAK;YACjB,oEAAoE;YACpE,mBAAmB;YACnB,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC;YAClC,oEAAoE;YACpE,mBAAmB;YACnB,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1B,oEAAoE;YACpE,mBAAmB;YACnB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC;YAChB,oEAAoE;YACpE,mBAAmB;YACnB,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;YAClC,oEAAoE;YACpE,mBAAmB;YACnB,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;SACR,CAAC;QACnD,KAAK,CAAC,SAAS,CAAC,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC5B,CAAC;CACF;AAED,MAAM,OAAO,wBAAyB,SAAQ,GAAG,CAAC,gBAAgB,CAAC,gBAAgB;IACjF,oEAAoE;IACpE,8DAA8D;IAC9D,OAAO,CAAM;IAEb,YAAY,OAAkD,EAAE,UAAmB,EAAE,UAAmB;QACtG,KAAK,EAAE,CAAC;QACR,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,CAAC,OAAO,GAAI,OAAe,CAAC,OAAO,IAAI,EAAE,CAAC;QAE9C,IAAI,eAAe,GAA6B,IAAI,CAAC;QACrD,IAAI,UAAU,IAAI,UAAU,EAAE;YAC5B,eAAe,GAAG,IAAI,GAAG,EAAkB,CAAC;YAC5C,UAAU,GAAG,UAAU,IAAI,CAAC,CAAC;YAC7B,UAAU,GAAG,UAAU,IAAI,QAAQ,CAAC;YACpC,KAAK,MAAM,MAAM,IAAI,OAAO,CAAC,OAAO,EAAE;gBACpC,IAAI,MAAM,CAAC,OAAO,GAAG,UAAU,IAAI,MAAM,CAAC,OAAO,GAAG,UAAU,EAAE;oBAC9D,SAAS;iBACV;gBACD,MAAM,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACrD,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;aACxD;SACF;QAED,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAEpD,SAAS,oBAAoB,CAAC,IAAmD;YAC/E,MAAM,UAAU,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,CAAC;YACrD,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,CAAC;YAC/B,MAAM,eAAe,GAAG,CAAC,UAAU,CAAC,CAAC;YACrC,OAAO,eAAe,CAAC,MAAM,EAAE;gBAC7B,MAAM,UAAU,GAAI,eAAe,CAAC,GAAG,EAAoD,CAAC;gBAC5F,MAAM,UAAU,GAAI,eAAe,CAAC,GAAG,EAA8B,CAAC;gBACtE,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACpD,MAAM,WAAW,GAAG,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC;oBACvD,IAAI,eAAe,EAAE;wBACnB,WAAW,CAAC,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;qBACvD;oBACD,OAAO,WAAW,CAAC;gBACrB,CAAC,CAAC,CAAC;gBACH,eAAe,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC7C,eAAe,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;aAC9C;YACD,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC/B,OAAO,UAAU,CAAC;QACpB,CAAC;QAED,SAAS,kBAAkB,CAAC,IAAsC;YAChE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;YACzD,OAAO,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;CACF;AAED,MAAM,OAAO,aAAa;IACf,WAAW,CAAkB;IACtC,YAAY,WAA4B;QACtC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAED,WAAW,CAAC,KAAa;QACvB,OAAO,QAAQ,CAAC,eAAe,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;IAChE,CAAC;IAED,yBAAyB,CAAC,KAAa;QACrC,OAAO,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAC;IACpD,CAAC;IAED,aAAa,CAAC,KAAa,EAAE,KAA0B;QACrD,OAAO,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,EAAC,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;IACtE,CAAC;IAED,WAAW,CAAC,IAAyB;QACnC,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;QAC7E,MAAM,MAAM,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QACrE,MAAM,OAAO,GAAG;YACd,SAAS,EAAE,mBAAmB;YAC9B,gBAAgB,EAAE,CAAC;SACpB,CAAC;QACF,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,4BAA4B,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChH,CAAC;CACF;AAED,MAAM,OAAO,0BAA2B,SAAQ,6BAA6B;IAClE,OAAO,CAAwC;IAC/C,iBAAiB,CAA+C;IACzE,oBAAoB,CAAkC;IAEtD,YACI,OAA8C,EAAE,iBAA+D;QACjH,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAED,eAAe;QACb,OAAO,CAAC,CAAC;IACX,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;IACjC,CAAC;IAED,mBAAmB,CAAC,WAAmB;QACrC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,WAAW,CAAC,KAAa,EAAE,UAAmB;QAC5C,OAAO,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,GAAG,EAAE,QAAQ,CAAC,eAAe,CAAC,sBAAsB,CAAC,KAAK,GAAG,GAAG,CAAC,EAAC,CAAC,CAAC;IACxG,CAAC;IAED,qBAAqB;QACnB,SAAS,UAAU,CAAC,IAAsC;YACxD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5E,CAAC;QACD,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,UAAU,GAAuC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;QACxE,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,eAAe,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,eAAe,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,SAAS,OAAO,CAAC,IAAsC;YACrD,MAAM,KAAK,GAAG,QAAQ,CAAC;YACvB,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACzB,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;YAC3B,eAAe,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YACpC,eAAe,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;YAClC,EAAE,KAAK,CAAC;YACR,EAAE,KAAK,CAAC;YACR,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC/B,EAAE,KAAK,CAAC;YACR,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACrC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE3B,IAAI,CAAC,qBAAqB,GAAG,QAAQ,GAAG,CAAC,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,oBAAoB,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;QAEpH,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAED,2BAA2B,CAAC,UAAkB;QAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QACD,MAAM,SAAS,GAGT,EAAE,CAAC;QACT,SAAS,gBAAgB,CAAC,KAAa,EAAE,KAAa;YACpD,SAAS,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QAC/C,CAAC;QACD,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QACjG,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACpG,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACtG,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;QACvD,MAAM,IAAI,GAAG,SAAS,CAAC,4BAA4B,CAC/C,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACrF,IAAI,IAAI,EAAE;YACR,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,EAAG,IAAI,CAAC,WAAsB,CAAC,CAAC;SAC3E;QACD,SAAS,CAAC,OAAO,EAAE,CAAC;QACpB,OAAO,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;CACF","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {ProfileFlameChartDataProvider} from './CPUProfileFlameChart.js';\n\nimport type {Samples, IdsRangeChangedEvent} from './HeapTimelineOverview.js';\nimport {Events, HeapTimelineOverview} from './HeapTimelineOverview.js';\nimport type {Formatter, ProfileDataGridNode} from './ProfileDataGrid.js';\nimport type {ProfileHeader} from './ProfileHeader.js';\nimport {ProfileType, ProfileEvents} from './ProfileHeader.js';\nimport {ProfileView, WritableProfileHeader} from './ProfileView.js';\n\nconst UIStrings = {\n  /**\n  *@description The reported total size used in the selected time frame of the allocation sampling profile\n  *@example {3 MB} PH1\n  */\n  selectedSizeS: 'Selected size: {PH1}',\n  /**\n  *@description Name of column header that reports the size (in terms of bytes) used for a particular part of the heap, excluding the size of the children nodes of this part of the heap\n  */\n  selfSizeBytes: 'Self Size (bytes)',\n  /**\n  *@description Name of column header that reports the total size (in terms of bytes) used for a particular part of the heap\n  */\n  totalSizeBytes: 'Total Size (bytes)',\n  /**\n  *@description Button text to stop profiling the heap\n  */\n  stopHeapProfiling: 'Stop heap profiling',\n  /**\n  *@description Button text to start profiling the heap\n  */\n  startHeapProfiling: 'Start heap profiling',\n  /**\n  *@description Progress update that the profiler is recording the contents of the heap\n  */\n  recording: 'Recording…',\n  /**\n  *@description Icon title in Heap Profile View of a profiler tool\n  */\n  heapProfilerIsRecording: 'Heap profiler is recording',\n  /**\n  *@description Progress update that the profiler is in the process of stopping its recording of the heap\n  */\n  stopping: 'Stopping…',\n  /**\n  *@description Sampling category to only profile allocations happening on the heap\n  */\n  allocationSampling: 'Allocation sampling',\n  /**\n  *@description The title for the collection of profiles that are gathered from various snapshots of the heap, using a sampling (e.g. every 1/100) technique.\n  */\n  samplingProfiles: 'SAMPLING PROFILES',\n  /**\n  *@description Description (part 1) in Heap Profile View of a profiler tool\n  */\n  recordMemoryAllocations: 'Record memory allocations using sampling method.',\n  /**\n  *@description Description (part 2) in Heap Profile View of a profiler tool\n  */\n  thisProfileTypeHasMinimal:\n      'This profile type has minimal performance overhead and can be used for long running operations.',\n  /**\n  *@description Description (part 3) in Heap Profile View of a profiler tool\n  */\n  itProvidesGoodApproximation:\n      'It provides good approximation of allocations broken down by `JavaScript` execution stack.',\n  /**\n  *@description Name of a profile\n  *@example {2} PH1\n  */\n  profileD: 'Profile {PH1}',\n  /**\n  *@description Accessible text for the value in bytes in memory allocation or coverage view.\n  *@example {12345} PH1\n  */\n  sBytes: '{PH1} bytes',\n  /**\n  *@description Text in CPUProfile View of a profiler tool\n  *@example {21.33} PH1\n  */\n  formatPercent: '{PH1} %',\n  /**\n  *@description The formatted size in kilobytes, abbreviated to kB\n  *@example {1,021} PH1\n  */\n  skb: '{PH1} kB',\n  /**\n  *@description Text for the name of something\n  */\n  name: 'Name',\n  /**\n  *@description Tooltip of a cell that reports the size used for a particular part of the heap, excluding the size of the children nodes of this part of the heap\n  */\n  selfSize: 'Self size',\n  /**\n  *@description Tooltip of a cell that reports the total size used for a particular part of the heap\n  */\n  totalSize: 'Total size',\n  /**\n  *@description Text for web URLs\n  */\n  url: 'URL',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapProfileView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nfunction convertToSamplingHeapProfile(profileHeader: SamplingHeapProfileHeader):\n    Protocol.HeapProfiler.SamplingHeapProfile {\n  return (profileHeader.profile || profileHeader.protocolProfile()) as Protocol.HeapProfiler.SamplingHeapProfile;\n}\n\nexport class HeapProfileView extends ProfileView implements UI.SearchableView.Searchable {\n  profileHeader: SamplingHeapProfileHeader;\n  readonly profileType: SamplingHeapProfileTypeBase;\n  adjustedTotal: number;\n  readonly selectedSizeText: UI.Toolbar.ToolbarText;\n  timestamps: number[];\n  sizes: number[];\n  max: number[];\n  ordinals: number[];\n  totalTime: number;\n  lastOrdinal: number;\n  readonly timelineOverview: HeapTimelineOverview;\n  constructor(profileHeader: SamplingHeapProfileHeader) {\n    super();\n\n    this.profileHeader = profileHeader;\n    this.profileType = profileHeader.profileType();\n    this.initialize(new NodeFormatter(this));\n    const profile = new SamplingHeapProfileModel(convertToSamplingHeapProfile(profileHeader));\n    this.adjustedTotal = profile.total;\n    this.setProfile(profile);\n\n    this.selectedSizeText = new UI.Toolbar.ToolbarText();\n\n    this.timestamps = [];\n    this.sizes = [];\n    this.max = [];\n    this.ordinals = [];\n    this.totalTime = 0;\n    this.lastOrdinal = 0;\n\n    this.timelineOverview = new HeapTimelineOverview();\n\n    if (Root.Runtime.experiments.isEnabled('samplingHeapProfilerTimeline')) {\n      this.timelineOverview.addEventListener(Events.IdsRangeChanged, this.onIdsRangeChanged.bind(this));\n      this.timelineOverview.show(this.element, this.element.firstChild);\n      this.timelineOverview.start();\n\n      this.profileType.addEventListener(SamplingHeapProfileType.Events.StatsUpdate, this.onStatsUpdate, this);\n      void this.profileType.once(ProfileEvents.ProfileComplete).then(() => {\n        this.profileType.removeEventListener(SamplingHeapProfileType.Events.StatsUpdate, this.onStatsUpdate, this);\n        this.timelineOverview.stop();\n        this.timelineOverview.updateGrid();\n      });\n    }\n  }\n\n  async toolbarItems(): Promise<UI.Toolbar.ToolbarItem[]> {\n    return [...await super.toolbarItems(), this.selectedSizeText];\n  }\n\n  onIdsRangeChanged(event: Common.EventTarget.EventTargetEvent<IdsRangeChangedEvent>): void {\n    const {minId, maxId} = event.data;\n    this.selectedSizeText.setText(\n        i18nString(UIStrings.selectedSizeS, {PH1: Platform.NumberUtilities.bytesToString(event.data.size)}));\n    this.setSelectionRange(minId, maxId);\n  }\n\n  setSelectionRange(minId: number, maxId: number): void {\n    const profileData = convertToSamplingHeapProfile((this.profileHeader as SamplingHeapProfileHeader));\n    const profile = new SamplingHeapProfileModel(profileData, minId, maxId);\n    this.adjustedTotal = profile.total;\n    this.setProfile(profile);\n  }\n\n  onStatsUpdate(event: Common.EventTarget.EventTargetEvent<Protocol.HeapProfiler.SamplingHeapProfile|null>): void {\n    const profile = event.data;\n\n    if (!this.totalTime) {\n      this.timestamps = [];\n      this.sizes = [];\n      this.max = [];\n      this.ordinals = [];\n      this.totalTime = 30000;\n      this.lastOrdinal = 0;\n    }\n\n    this.sizes.fill(0);\n    this.sizes.push(0);\n    this.timestamps.push(Date.now());\n    this.ordinals.push(this.lastOrdinal + 1);\n    for (const sample of profile?.samples ?? []) {\n      this.lastOrdinal = Math.max(this.lastOrdinal, sample.ordinal);\n      const bucket = Platform.ArrayUtilities.upperBound(\n                         this.ordinals, sample.ordinal, Platform.ArrayUtilities.DEFAULT_COMPARATOR) -\n          1;\n      this.sizes[bucket] += sample.size;\n    }\n    this.max.push(this.sizes[this.sizes.length - 1]);\n\n    const lastTimestamp = this.timestamps[this.timestamps.length - 1];\n    if (lastTimestamp - this.timestamps[0] > this.totalTime) {\n      this.totalTime *= 2;\n    }\n\n    const samples = ({\n      sizes: this.sizes,\n      max: this.max,\n      ids: this.ordinals,\n      timestamps: this.timestamps,\n      totalTime: this.totalTime,\n    } as Samples);\n\n    this.timelineOverview.setSamples(samples);\n  }\n\n  columnHeader(columnId: string): Common.UIString.LocalizedString {\n    switch (columnId) {\n      case 'self':\n        return i18nString(UIStrings.selfSizeBytes);\n      case 'total':\n        return i18nString(UIStrings.totalSizeBytes);\n    }\n    return Common.UIString.LocalizedEmptyString;\n  }\n\n  createFlameChartDataProvider(): ProfileFlameChartDataProvider {\n    return new HeapFlameChartDataProvider(\n        (this.profile() as SamplingHeapProfileModel), this.profileHeader.heapProfilerModel());\n  }\n}\n\nexport class SamplingHeapProfileTypeBase extends\n    Common.ObjectWrapper.eventMixin<SamplingHeapProfileType.EventTypes, typeof ProfileType>(ProfileType) {\n  recording: boolean;\n  clearedDuringRecording: boolean;\n\n  constructor(typeId: string, description: string) {\n    super(typeId, description);\n    this.recording = false;\n    this.clearedDuringRecording = false;\n  }\n\n  profileBeingRecorded(): SamplingHeapProfileHeader|null {\n    return super.profileBeingRecorded() as SamplingHeapProfileHeader | null;\n  }\n\n  typeName(): string {\n    return 'Heap';\n  }\n\n  fileExtension(): string {\n    return '.heapprofile';\n  }\n\n  get buttonTooltip(): Common.UIString.LocalizedString {\n    return this.recording ? i18nString(UIStrings.stopHeapProfiling) : i18nString(UIStrings.startHeapProfiling);\n  }\n\n  buttonClicked(): boolean {\n    if (this.recording) {\n      void this.stopRecordingProfile();\n    } else {\n      this.startRecordingProfile();\n    }\n    return this.recording;\n  }\n\n  startRecordingProfile(): void {\n    const heapProfilerModel = UI.Context.Context.instance().flavor(SDK.HeapProfilerModel.HeapProfilerModel);\n    if (this.profileBeingRecorded() || !heapProfilerModel) {\n      return;\n    }\n    const profileHeader = new SamplingHeapProfileHeader(heapProfilerModel, this);\n    this.setProfileBeingRecorded(profileHeader);\n    this.addProfile(profileHeader);\n    profileHeader.updateStatus(i18nString(UIStrings.recording));\n\n    const icon = UI.Icon.Icon.create('smallicon-warning');\n    UI.Tooltip.Tooltip.install(icon, i18nString(UIStrings.heapProfilerIsRecording));\n    UI.InspectorView.InspectorView.instance().setPanelIcon('heap_profiler', icon);\n\n    this.recording = true;\n    this.startSampling();\n  }\n\n  async stopRecordingProfile(): Promise<void> {\n    this.recording = false;\n    const recordedProfile = this.profileBeingRecorded();\n    if (!recordedProfile || !recordedProfile.heapProfilerModel()) {\n      return;\n    }\n\n    recordedProfile.updateStatus(i18nString(UIStrings.stopping));\n    const profile = await this.stopSampling();\n    if (recordedProfile) {\n      console.assert(profile !== undefined);\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      recordedProfile.setProtocolProfile((profile as any));\n      recordedProfile.updateStatus('');\n      this.setProfileBeingRecorded(null);\n    }\n    UI.InspectorView.InspectorView.instance().setPanelIcon('heap_profiler', null);\n\n    // If the data was cleared during the middle of the recording we no\n    // longer treat the profile as being completed. This means we avoid\n    // a change of view to the profile list.\n    const wasClearedDuringRecording = this.clearedDuringRecording;\n    this.clearedDuringRecording = false;\n    if (wasClearedDuringRecording) {\n      return;\n    }\n    this.dispatchEventToListeners(ProfileEvents.ProfileComplete, recordedProfile);\n  }\n\n  createProfileLoadedFromFile(title: string): ProfileHeader {\n    return new SamplingHeapProfileHeader(null, this, title);\n  }\n\n  profileBeingRecordedRemoved(): void {\n    this.clearedDuringRecording = true;\n    void this.stopRecordingProfile();\n  }\n\n  startSampling(): void {\n    throw 'Not implemented';\n  }\n\n  stopSampling(): Promise<Protocol.HeapProfiler.SamplingHeapProfile> {\n    throw 'Not implemented';\n  }\n}\n\nlet samplingHeapProfileTypeInstance: SamplingHeapProfileType;\n\nexport class SamplingHeapProfileType extends SamplingHeapProfileTypeBase {\n  updateTimer: number;\n  updateIntervalMs: number;\n  constructor() {\n    super(SamplingHeapProfileType.TypeId, i18nString(UIStrings.allocationSampling));\n    if (!samplingHeapProfileTypeInstance) {\n      samplingHeapProfileTypeInstance = this;\n    }\n\n    this.updateTimer = 0;\n    this.updateIntervalMs = 200;\n  }\n\n  static get instance(): SamplingHeapProfileType {\n    return samplingHeapProfileTypeInstance;\n  }\n\n  get treeItemTitle(): Common.UIString.LocalizedString {\n    return i18nString(UIStrings.samplingProfiles);\n  }\n\n  get description(): string {\n    // TODO(l10n): Do not concatenate localized strings.\n    const formattedDescription = [\n      i18nString(UIStrings.recordMemoryAllocations),\n      i18nString(UIStrings.thisProfileTypeHasMinimal),\n      i18nString(UIStrings.itProvidesGoodApproximation),\n    ];\n    return formattedDescription.join('\\n');\n  }\n\n  hasTemporaryView(): boolean {\n    return Root.Runtime.experiments.isEnabled('samplingHeapProfilerTimeline');\n  }\n\n  startSampling(): void {\n    const heapProfilerModel = this.obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    void heapProfilerModel.startSampling();\n    if (Root.Runtime.experiments.isEnabled('samplingHeapProfilerTimeline')) {\n      this.updateTimer = window.setTimeout(() => {\n        void this.updateStats();\n      }, this.updateIntervalMs);\n    }\n  }\n\n  obtainRecordingProfile(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    const recordingProfile = this.profileBeingRecorded();\n    if (recordingProfile) {\n      const heapProfilerModel = recordingProfile.heapProfilerModel();\n      return heapProfilerModel;\n    }\n    return null;\n  }\n\n  async stopSampling(): Promise<Protocol.HeapProfiler.SamplingHeapProfile> {\n    window.clearTimeout(this.updateTimer);\n    this.updateTimer = 0;\n    this.dispatchEventToListeners(SamplingHeapProfileType.Events.RecordingStopped);\n    const heapProfilerModel = this.obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      throw new Error('No heap profiler model');\n    }\n\n    const samplingProfile = await heapProfilerModel.stopSampling();\n    if (!samplingProfile) {\n      throw new Error('No sampling profile found');\n    }\n    return samplingProfile;\n  }\n\n  async updateStats(): Promise<void> {\n    const heapProfilerModel = this.obtainRecordingProfile();\n    if (!heapProfilerModel) {\n      return;\n    }\n\n    const profile = await heapProfilerModel.getSamplingProfile();\n    if (!this.updateTimer) {\n      return;\n    }\n    this.dispatchEventToListeners(SamplingHeapProfileType.Events.StatsUpdate, profile);\n    this.updateTimer = window.setTimeout(() => {\n      void this.updateStats();\n    }, this.updateIntervalMs);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly TypeId = 'SamplingHeap';\n}\n\nexport namespace SamplingHeapProfileType {\n  export const enum Events {\n    RecordingStopped = 'RecordingStopped',\n    StatsUpdate = 'StatsUpdate',\n  }\n\n  export type EventTypes = {\n    [Events.RecordingStopped]: void,\n    [Events.StatsUpdate]: Protocol.HeapProfiler.SamplingHeapProfile|null,\n  };\n}\n\nexport class SamplingHeapProfileHeader extends WritableProfileHeader {\n  readonly heapProfilerModelInternal: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  protocolProfileInternal: {\n    head: {\n      callFrame: {\n        functionName: string,\n        scriptId: Protocol.Runtime.ScriptId,\n        url: string,\n        lineNumber: number,\n        columnNumber: number,\n      },\n      children: never[],\n      selfSize: number,\n      id: number,\n    },\n    samples: never[],\n    startTime: number,\n    endTime: number,\n    nodes: never[],\n  };\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, type: SamplingHeapProfileTypeBase,\n      title?: string) {\n    super(\n        heapProfilerModel && heapProfilerModel.debuggerModel(), type,\n        title || i18nString(UIStrings.profileD, {PH1: type.nextProfileUid()}));\n    this.heapProfilerModelInternal = heapProfilerModel;\n    this.protocolProfileInternal = {\n      head: {\n        callFrame: {\n          functionName: '',\n          scriptId: '' as Protocol.Runtime.ScriptId,\n          url: '',\n          lineNumber: 0,\n          columnNumber: 0,\n        },\n        children: [],\n        selfSize: 0,\n        id: 0,\n      },\n      samples: [],\n      startTime: 0,\n      endTime: 0,\n      nodes: [],\n    };\n  }\n\n  createView(): HeapProfileView {\n    return new HeapProfileView(this);\n  }\n\n  protocolProfile(): Protocol.HeapProfiler.SamplingHeapProfile {\n    return this.protocolProfileInternal;\n  }\n\n  heapProfilerModel(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    return this.heapProfilerModelInternal;\n  }\n\n  override profileType(): SamplingHeapProfileTypeBase {\n    return super.profileType() as SamplingHeapProfileTypeBase;\n  }\n}\n\nexport class SamplingHeapProfileNode extends SDK.ProfileTreeModel.ProfileNode {\n  self: number;\n  constructor(node: Protocol.HeapProfiler.SamplingHeapProfileNode) {\n    const callFrame = node.callFrame || ({\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        functionName: node['functionName'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        scriptId: node['scriptId'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        url: node['url'],\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        lineNumber: node['lineNumber'] - 1,\n                        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n                        // @ts-expect-error\n                        columnNumber: node['columnNumber'] - 1,\n                      } as Protocol.Runtime.CallFrame);\n    super(callFrame);\n    this.self = node.selfSize;\n  }\n}\n\nexport class SamplingHeapProfileModel extends SDK.ProfileTreeModel.ProfileTreeModel {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  modules: any;\n\n  constructor(profile: Protocol.HeapProfiler.SamplingHeapProfile, minOrdinal?: number, maxOrdinal?: number) {\n    super();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.modules = (profile as any).modules || [];\n\n    let nodeIdToSizeMap: Map<number, number>|null = null;\n    if (minOrdinal || maxOrdinal) {\n      nodeIdToSizeMap = new Map<number, number>();\n      minOrdinal = minOrdinal || 0;\n      maxOrdinal = maxOrdinal || Infinity;\n      for (const sample of profile.samples) {\n        if (sample.ordinal < minOrdinal || sample.ordinal > maxOrdinal) {\n          continue;\n        }\n        const size = nodeIdToSizeMap.get(sample.nodeId) || 0;\n        nodeIdToSizeMap.set(sample.nodeId, size + sample.size);\n      }\n    }\n\n    this.initialize(translateProfileTree(profile.head));\n\n    function translateProfileTree(root: Protocol.HeapProfiler.SamplingHeapProfileNode): SamplingHeapProfileNode {\n      const resultRoot = new SamplingHeapProfileNode(root);\n      const sourceNodeStack = [root];\n      const targetNodeStack = [resultRoot];\n      while (sourceNodeStack.length) {\n        const sourceNode = (sourceNodeStack.pop() as Protocol.HeapProfiler.SamplingHeapProfileNode);\n        const targetNode = (targetNodeStack.pop() as SamplingHeapProfileNode);\n        targetNode.children = sourceNode.children.map(child => {\n          const targetChild = new SamplingHeapProfileNode(child);\n          if (nodeIdToSizeMap) {\n            targetChild.self = nodeIdToSizeMap.get(child.id) || 0;\n          }\n          return targetChild;\n        });\n        sourceNodeStack.push(...sourceNode.children);\n        targetNodeStack.push(...targetNode.children);\n      }\n      pruneEmptyBranches(resultRoot);\n      return resultRoot;\n    }\n\n    function pruneEmptyBranches(node: SDK.ProfileTreeModel.ProfileNode): boolean {\n      node.children = node.children.filter(pruneEmptyBranches);\n      return Boolean(node.children.length || node.self);\n    }\n  }\n}\n\nexport class NodeFormatter implements Formatter {\n  readonly profileView: HeapProfileView;\n  constructor(profileView: HeapProfileView) {\n    this.profileView = profileView;\n  }\n\n  formatValue(value: number): string {\n    return Platform.NumberUtilities.withThousandsSeparator(value);\n  }\n\n  formatValueAccessibleText(value: number): string {\n    return i18nString(UIStrings.sBytes, {PH1: value});\n  }\n\n  formatPercent(value: number, _node: ProfileDataGridNode): string {\n    return i18nString(UIStrings.formatPercent, {PH1: value.toFixed(2)});\n  }\n\n  linkifyNode(node: ProfileDataGridNode): Element|null {\n    const heapProfilerModel = this.profileView.profileHeader.heapProfilerModel();\n    const target = heapProfilerModel ? heapProfilerModel.target() : null;\n    const options = {\n      className: 'profile-node-file',\n      inlineFrameIndex: 0,\n    };\n    return this.profileView.linkifier().maybeLinkifyConsoleCallFrame(target, node.profileNode.callFrame, options);\n  }\n}\n\nexport class HeapFlameChartDataProvider extends ProfileFlameChartDataProvider {\n  readonly profile: SDK.ProfileTreeModel.ProfileTreeModel;\n  readonly heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  timelineDataInternal?: PerfUI.FlameChart.TimelineData;\n\n  constructor(\n      profile: SDK.ProfileTreeModel.ProfileTreeModel, heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null) {\n    super();\n    this.profile = profile;\n    this.heapProfilerModel = heapProfilerModel;\n  }\n\n  minimumBoundary(): number {\n    return 0;\n  }\n\n  totalTime(): number {\n    return this.profile.root.total;\n  }\n\n  entryHasDeoptReason(_entryIndex: number): boolean {\n    return false;\n  }\n\n  formatValue(value: number, _precision?: number): string {\n    return i18nString(UIStrings.skb, {PH1: Platform.NumberUtilities.withThousandsSeparator(value / 1e3)});\n  }\n\n  calculateTimelineData(): PerfUI.FlameChart.TimelineData {\n    function nodesCount(node: SDK.ProfileTreeModel.ProfileNode): number {\n      return node.children.reduce((count, node) => count + nodesCount(node), 1);\n    }\n    const count = nodesCount(this.profile.root);\n    const entryNodes: SDK.ProfileTreeModel.ProfileNode[] = new Array(count);\n    const entryLevels = new Uint16Array(count);\n    const entryTotalTimes = new Float32Array(count);\n    const entryStartTimes = new Float64Array(count);\n    let depth = 0;\n    let maxDepth = 0;\n    let position = 0;\n    let index = 0;\n\n    function addNode(node: SDK.ProfileTreeModel.ProfileNode): void {\n      const start = position;\n      entryNodes[index] = node;\n      entryLevels[index] = depth;\n      entryTotalTimes[index] = node.total;\n      entryStartTimes[index] = position;\n      ++index;\n      ++depth;\n      node.children.forEach(addNode);\n      --depth;\n      maxDepth = Math.max(maxDepth, depth);\n      position = start + node.total;\n    }\n    addNode(this.profile.root);\n\n    this.maxStackDepthInternal = maxDepth + 1;\n    this.entryNodes = entryNodes;\n    this.timelineDataInternal = new PerfUI.FlameChart.TimelineData(entryLevels, entryTotalTimes, entryStartTimes, null);\n\n    return this.timelineDataInternal;\n  }\n\n  prepareHighlightedEntryInfo(entryIndex: number): Element|null {\n    const node = this.entryNodes[entryIndex];\n    if (!node) {\n      return null;\n    }\n    const entryInfo: {\n      title: string,\n      value: string,\n    }[] = [];\n    function pushEntryInfoRow(title: string, value: string): void {\n      entryInfo.push({title: title, value: value});\n    }\n    pushEntryInfoRow(i18nString(UIStrings.name), UI.UIUtils.beautifyFunctionName(node.functionName));\n    pushEntryInfoRow(i18nString(UIStrings.selfSize), Platform.NumberUtilities.bytesToString(node.self));\n    pushEntryInfoRow(i18nString(UIStrings.totalSize), Platform.NumberUtilities.bytesToString(node.total));\n    const linkifier = new Components.Linkifier.Linkifier();\n    const link = linkifier.maybeLinkifyConsoleCallFrame(\n        this.heapProfilerModel ? this.heapProfilerModel.target() : null, node.callFrame);\n    if (link) {\n      pushEntryInfoRow(i18nString(UIStrings.url), (link.textContent as string));\n    }\n    linkifier.dispose();\n    return ProfileView.buildPopoverTable(entryInfo);\n  }\n}\n"]}