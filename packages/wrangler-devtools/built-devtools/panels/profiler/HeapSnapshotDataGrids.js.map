{"version":3,"file":"HeapSnapshotDataGrids.js","sourceRoot":"","sources":["../../../../../../front_end/panels/profiler/HeapSnapshotDataGrids.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport type {HeapSnapshotGridNode} from './HeapSnapshotGridNodes.js';\nimport {\n  AllocationGridNode,\n  HeapSnapshotConstructorNode,\n  HeapSnapshotGenericObjectNode,\n  HeapSnapshotRetainingObjectNode,\n  HeapSnapshotObjectNode,\n  HeapSnapshotDiffNode,\n} from './HeapSnapshotGridNodes.js';\nimport type {HeapSnapshotProxy} from './HeapSnapshotProxy.js';\nimport type {HeapProfileHeader} from './HeapSnapshotView.js';\nimport type {DataDisplayDelegate} from './ProfileHeader.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  distanceFromWindowObject: 'Distance from window object',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  sizeOfTheObjectItselfInBytes: 'Size of the object itself in bytes',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  sizeOfTheObjectPlusTheGraphIt: 'Size of the object plus the graph it retains in bytes',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  object: 'Object',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  distance: 'Distance',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool. Shallow size is the size of just this node, not including children/retained size.\n  */\n  shallowSize: 'Shallow Size',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  retainedSize: 'Retained Size',\n  /**\n  * @description Title for a section in the Heap Snapshot view. This title is for a table which\n  * shows retaining relationships between JavaScript objects. One object retains another if it holds\n  * a reference to it, keeping it alive.\n  */\n  heapSnapshotRetainment: 'Heap Snapshot Retainment',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  constructorString: 'Constructor',\n  /**\n  *@description Data grid name for Heap Snapshot Constructors data grids\n  */\n  heapSnapshotConstructors: 'Heap Snapshot Constructors',\n  /**\n  *@description Column header in a table displaying the diff between two Heap Snapshots. This\n  * column is number of new objects in snapshot #2 compared to snapshot #1.\n  */\n  New: '# New',\n  /**\n  *@description Column header in a table displaying the diff between two Heap Snapshots. This\n  * column is number of deleted objects in snapshot #2 compared to snapshot #1.\n  */\n  Deleted: '# Deleted',\n  /**\n  * @description Column header in a table displaying the diff between two Heap Snapshots. This\n  * column is the difference (delta) between the # New and # Deleted objects in the snapshot.\n  */\n  Delta: '# Delta',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  allocSize: 'Alloc. Size',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  freedSize: 'Freed Size',\n  /**\n  * @description Title of a column in a table in the Heap Snapshot tool. 'Delta' here means\n  * difference, so the whole string means 'difference in size'.\n  */\n  sizeDelta: 'Size Delta',\n  /**\n  *@description Data grid name for Heap Snapshot Diff data grids\n  */\n  heapSnapshotDiff: 'Heap Snapshot Diff',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  liveCount: 'Live Count',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  count: 'Count',\n  /**\n  *@description Text in Heap Snapshot Data Grids of a profiler tool\n  */\n  liveSize: 'Live Size',\n  /**\n  *@description Text for the size of something\n  */\n  size: 'Size',\n  /**\n  *@description Text for a programming function\n  */\n  function: 'Function',\n  /**\n  *@description Text in Heap Snapshot View of a profiler tool\n  */\n  allocation: 'Allocation',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotDataGrids.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst adjacencyMap = new WeakMap<DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>, HeapSnapshotGridNode[]>();\n\nclass HeapSnapshotSortableDataGridBase extends DataGrid.DataGrid.DataGridImpl<HeapSnapshotGridNode> {}\n\nexport class HeapSnapshotSortableDataGrid extends\n    Common.ObjectWrapper.eventMixin<EventTypes, typeof HeapSnapshotSortableDataGridBase>(\n        HeapSnapshotSortableDataGridBase) {\n  snapshot: HeapSnapshotProxy|null;\n  selectedNode: HeapSnapshotGridNode|null;\n  readonly heapProfilerModelInternal: SDK.HeapProfilerModel.HeapProfilerModel|null;\n  readonly dataDisplayDelegateInternal: DataDisplayDelegate;\n  recursiveSortingDepth: number;\n  populatedAndSorted: boolean;\n  nameFilter: UI.Toolbar.ToolbarInput|null;\n  nodeFilterInternal: HeapSnapshotModel.HeapSnapshotModel.NodeFilter|undefined;\n  lastSortColumnId?: string|null;\n  lastSortAscending?: boolean;\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate,\n      dataGridParameters: DataGrid.DataGrid.Parameters) {\n    // TODO(allada) This entire class needs to be converted to use the templates in DataGridNode.\n    super(dataGridParameters);\n    this.snapshot = null;\n    this.selectedNode = null;\n    this.heapProfilerModelInternal = heapProfilerModel;\n    this.dataDisplayDelegateInternal = dataDisplayDelegate;\n    const tooltips = [\n      ['distance', i18nString(UIStrings.distanceFromWindowObject)],\n      ['shallowSize', i18nString(UIStrings.sizeOfTheObjectItselfInBytes)],\n      ['retainedSize', i18nString(UIStrings.sizeOfTheObjectPlusTheGraphIt)],\n    ];\n    for (const info of tooltips) {\n      const headerCell = this.headerTableHeader(info[0]);\n      if (headerCell) {\n        headerCell.setAttribute('title', info[1]);\n      }\n    }\n\n    this.recursiveSortingDepth = 0;\n    this.populatedAndSorted = false;\n    this.nameFilter = null;\n    this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n    this.addEventListener(HeapSnapshotSortableDataGridEvents.SortingComplete, this.sortingComplete, this);\n    this.addEventListener(DataGrid.DataGrid.Events.SortingChanged, this.sortingChanged, this);\n    this.setRowContextMenuCallback(this.populateContextMenu.bind(this));\n  }\n\n  async setDataSource(_snapshot: HeapSnapshotProxy, _nodeIndex: number): Promise<void> {\n  }\n\n  isFilteredOut(node: HeapSnapshotGridNode): boolean {\n    const nameFilterValue = this.nameFilter ? this.nameFilter.value().toLowerCase() : '';\n    if (nameFilterValue && (node instanceof HeapSnapshotDiffNode || node instanceof HeapSnapshotConstructorNode) &&\n        node.filteredOut(nameFilterValue)) {\n      return true;\n    }\n    return false;\n  }\n\n  heapProfilerModel(): SDK.HeapProfilerModel.HeapProfilerModel|null {\n    return this.heapProfilerModelInternal;\n  }\n\n  dataDisplayDelegate(): DataDisplayDelegate {\n    return this.dataDisplayDelegateInternal;\n  }\n\n  nodeFilter(): HeapSnapshotModel.HeapSnapshotModel.NodeFilter|undefined {\n    return this.nodeFilterInternal;\n  }\n\n  setNameFilter(nameFilter: UI.Toolbar.ToolbarInput): void {\n    this.nameFilter = nameFilter;\n  }\n\n  defaultPopulateCount(): number {\n    return 100;\n  }\n\n  disposeAllNodes(): void {\n    const children = this.topLevelNodes();\n    for (let i = 0, l = children.length; i < l; ++i) {\n      children[i].dispose();\n    }\n  }\n\n  wasShown(): void {\n    if (this.nameFilter) {\n      this.nameFilter.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, this.onNameFilterChanged, this);\n      this.updateVisibleNodes(true);\n    }\n    if (this.populatedAndSorted) {\n      this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ContentShown, this);\n    }\n  }\n\n  sortingComplete(): void {\n    this.removeEventListener(HeapSnapshotSortableDataGridEvents.SortingComplete, this.sortingComplete, this);\n    this.populatedAndSorted = true;\n    this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.ContentShown, this);\n  }\n\n  willHide(): void {\n    if (this.nameFilter) {\n      this.nameFilter.removeEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, this.onNameFilterChanged, this);\n    }\n  }\n\n  populateContextMenu(\n      contextMenu: UI.ContextMenu.ContextMenu, gridNode: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>): void {\n    const node = (gridNode as HeapSnapshotGridNode);\n    node.populateContextMenu(contextMenu, this.dataDisplayDelegateInternal, this.heapProfilerModel());\n\n    if (node instanceof HeapSnapshotGenericObjectNode && node.linkElement &&\n        !contextMenu.containsTarget(node.linkElement)) {\n      contextMenu.appendApplicableItems(node.linkElement);\n    }\n  }\n\n  resetSortingCache(): void {\n    delete this.lastSortColumnId;\n    delete this.lastSortAscending;\n  }\n\n  topLevelNodes(): HeapSnapshotGridNode[] {\n    return this.rootNode().children as HeapSnapshotGridNode[];\n  }\n\n  revealObjectByHeapSnapshotId(_heapSnapshotObjectId: string): Promise<HeapSnapshotGridNode|null> {\n    return Promise.resolve((null as HeapSnapshotGridNode | null));\n  }\n\n  resetNameFilter(): void {\n    if (this.nameFilter) {\n      this.nameFilter.setValue('');\n    }\n  }\n\n  onNameFilterChanged(): void {\n    this.updateVisibleNodes(true);\n    this.deselectFilteredNodes();\n  }\n\n  deselectFilteredNodes(): void {\n    let currentNode: (HeapSnapshotGridNode|null) = this.selectedNode;\n    while (currentNode) {\n      if (this.selectedNode && this.isFilteredOut((currentNode as HeapSnapshotGridNode))) {\n        this.selectedNode.deselect();\n        this.selectedNode = null;\n        return;\n      }\n      currentNode = (currentNode.parent as HeapSnapshotGridNode | null);\n    }\n  }\n\n  sortFields(_sortColumnId: string, _ascending: boolean): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    throw new Error('Not implemented');\n  }\n\n  sortingChanged(): void {\n    const sortAscending = this.isSortOrderAscending();\n    const sortColumnId = this.sortColumnId();\n    if (this.lastSortColumnId === sortColumnId && this.lastSortAscending === sortAscending) {\n      return;\n    }\n    this.lastSortColumnId = sortColumnId;\n    this.lastSortAscending = sortAscending;\n    const sortFields = this.sortFields(sortColumnId || '', sortAscending);\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    function SortByTwoFields(\n        nodeA: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>,\n        nodeB: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>): number {\n      // @ts-ignore\n      let field1 = nodeA[sortFields.fieldName1];\n      // @ts-ignore\n      let field2 = nodeB[sortFields.fieldName1];\n      let result: number|(0 | 1 | -1) = field1 < field2 ? -1 : (field1 > field2 ? 1 : 0);\n      if (!sortFields.ascending1) {\n        result = -result;\n      }\n      if (result !== 0) {\n        return result;\n      }\n      // @ts-ignore\n      field1 = nodeA[sortFields.fieldName2];\n      // @ts-ignore\n      field2 = nodeB[sortFields.fieldName2];\n      result = field1 < field2 ? -1 : (field1 > field2 ? 1 : 0);\n      if (!sortFields.ascending2) {\n        result = -result;\n      }\n      return result;\n    }\n    this.performSorting(SortByTwoFields);\n  }\n\n  performSorting(\n      sortFunction:\n          (arg0: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>,\n           arg1: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>) => number): void {\n    this.recursiveSortingEnter();\n    const children = this.allChildren(this.rootNode());\n    this.rootNode().removeChildren();\n    children.sort(sortFunction);\n    for (let i = 0, l = children.length; i < l; ++i) {\n      const child = (children[i] as HeapSnapshotGridNode);\n      this.appendChildAfterSorting(child);\n      if (child.expanded) {\n        void child.sort();\n      }\n    }\n    this.recursiveSortingLeave();\n  }\n\n  appendChildAfterSorting(child: HeapSnapshotGridNode): void {\n    const revealed = child.revealed;\n    this.rootNode().appendChild(child);\n    child.revealed = revealed;\n  }\n\n  recursiveSortingEnter(): void {\n    ++this.recursiveSortingDepth;\n  }\n\n  recursiveSortingLeave(): void {\n    if (!this.recursiveSortingDepth) {\n      return;\n    }\n    if (--this.recursiveSortingDepth) {\n      return;\n    }\n    this.updateVisibleNodes(true);\n    this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.SortingComplete);\n  }\n\n  updateVisibleNodes(_force: boolean): void {\n  }\n\n  allChildren(parent: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>):\n      DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>[] {\n    return parent.children;\n  }\n\n  insertChild(parent: HeapSnapshotGridNode, node: HeapSnapshotGridNode, index: number): void {\n    parent.insertChild(node, index);\n  }\n\n  removeChildByIndex(parent: HeapSnapshotGridNode, index: number): void {\n    parent.removeChild(parent.children[index]);\n  }\n\n  removeAllChildren(parent: HeapSnapshotGridNode): void {\n    parent.removeChildren();\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum HeapSnapshotSortableDataGridEvents {\n  ContentShown = 'ContentShown',\n  SortingComplete = 'SortingComplete',\n  ExpandRetainersComplete = 'ExpandRetainersComplete',\n}\n\nexport type EventTypes = {\n  [HeapSnapshotSortableDataGridEvents.ContentShown]: HeapSnapshotSortableDataGrid,\n  [HeapSnapshotSortableDataGridEvents.SortingComplete]: void,\n  [HeapSnapshotSortableDataGridEvents.ExpandRetainersComplete]: void,\n};\n\nexport class HeapSnapshotViewportDataGrid extends HeapSnapshotSortableDataGrid {\n  topPaddingHeight: number;\n  bottomPaddingHeight: number;\n  selectedNode: HeapSnapshotGridNode|null;\n  scrollToResolveCallback?: (() => void)|null;\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate,\n      dataGridParameters: DataGrid.DataGrid.Parameters) {\n    super(heapProfilerModel, dataDisplayDelegate, dataGridParameters);\n    this.scrollContainer.addEventListener('scroll', this.onScroll.bind(this), true);\n    this.topPaddingHeight = 0;\n    this.bottomPaddingHeight = 0;\n    this.selectedNode = null;\n  }\n\n  topLevelNodes(): HeapSnapshotGridNode[] {\n    return this.allChildren(this.rootNode());\n  }\n\n  appendChildAfterSorting(_child: HeapSnapshotGridNode): void {\n    // Do nothing here, it will be added in updateVisibleNodes.\n  }\n\n  updateVisibleNodes(force: boolean): void {\n    // Guard zone is used to ensure there are always some extra items\n    // above and below the viewport to support keyboard navigation.\n    const guardZoneHeight = 40;\n    const scrollHeight = this.scrollContainer.scrollHeight;\n    let scrollTop: number = this.scrollContainer.scrollTop;\n    let scrollBottom: number = scrollHeight - scrollTop - this.scrollContainer.offsetHeight;\n    scrollTop = Math.max(0, scrollTop - guardZoneHeight);\n    scrollBottom = Math.max(0, scrollBottom - guardZoneHeight);\n    let viewPortHeight = scrollHeight - scrollTop - scrollBottom;\n    // Do nothing if populated nodes still fit the viewport.\n    if (!force && scrollTop >= this.topPaddingHeight && scrollBottom >= this.bottomPaddingHeight) {\n      return;\n    }\n    const hysteresisHeight = 500;\n    scrollTop -= hysteresisHeight;\n    viewPortHeight += 2 * hysteresisHeight;\n    const selectedNode = this.selectedNode;\n    this.rootNode().removeChildren();\n\n    this.topPaddingHeight = 0;\n    this.bottomPaddingHeight = 0;\n\n    this.addVisibleNodes(this.rootNode(), scrollTop, scrollTop + viewPortHeight);\n\n    this.setVerticalPadding(this.topPaddingHeight, this.bottomPaddingHeight);\n\n    if (selectedNode) {\n      // Keep selection even if the node is not in the current viewport.\n      if (selectedNode.parent) {\n        selectedNode.select(true);\n      } else {\n        this.selectedNode = selectedNode;\n      }\n    }\n  }\n\n  addVisibleNodes(\n      parentNode: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>, topBound: number, bottomBound: number): number {\n    if (!parentNode.expanded) {\n      return 0;\n    }\n\n    const children = this.allChildren((parentNode as HeapSnapshotGridNode));\n    let topPadding = 0;\n    // Iterate over invisible nodes beyond the upper bound of viewport.\n    // Do not insert them into the grid, but count their total height.\n    let i = 0;\n    for (; i < children.length; ++i) {\n      const child = children[i];\n      if (this.isFilteredOut(child)) {\n        continue;\n      }\n      const newTop = topPadding + this.nodeHeight(child);\n      if (newTop > topBound) {\n        break;\n      }\n      topPadding = newTop;\n    }\n\n    // Put visible nodes into the data grid.\n    let position = topPadding;\n    for (; i < children.length && position < bottomBound; ++i) {\n      const child = children[i];\n      if (this.isFilteredOut(child)) {\n        continue;\n      }\n      const hasChildren = child.hasChildren();\n      child.removeChildren();\n      child.setHasChildren(hasChildren);\n      parentNode.appendChild(child);\n      position += child.nodeSelfHeight();\n      position += this.addVisibleNodes(child, topBound - position, bottomBound - position);\n    }\n\n    // Count the invisible nodes beyond the bottom bound of the viewport.\n    let bottomPadding = 0;\n    for (; i < children.length; ++i) {\n      const child = children[i];\n      if (this.isFilteredOut(child)) {\n        continue;\n      }\n      bottomPadding += this.nodeHeight(child);\n    }\n\n    this.topPaddingHeight += topPadding;\n    this.bottomPaddingHeight += bottomPadding;\n    return position + bottomPadding;\n  }\n\n  nodeHeight(node: HeapSnapshotGridNode): number {\n    let result = node.nodeSelfHeight();\n    if (!node.expanded) {\n      return result;\n    }\n    const children = this.allChildren(node);\n    for (let i = 0; i < children.length; i++) {\n      result += this.nodeHeight(children[i]);\n    }\n    return result;\n  }\n\n  revealTreeNode(pathToReveal: HeapSnapshotGridNode[]): Promise<HeapSnapshotGridNode> {\n    const height = this.calculateOffset(pathToReveal);\n    const node = (pathToReveal[pathToReveal.length - 1] as HeapSnapshotGridNode);\n    const scrollTop = this.scrollContainer.scrollTop;\n    const scrollBottom = scrollTop + this.scrollContainer.offsetHeight;\n    if (height >= scrollTop && height < scrollBottom) {\n      return Promise.resolve(node);\n    }\n\n    const scrollGap = 40;\n    this.scrollContainer.scrollTop = Math.max(0, height - scrollGap);\n    return new Promise(resolve => {\n      console.assert(!this.scrollToResolveCallback);\n      this.scrollToResolveCallback = resolve.bind(null, node);\n      // Still resolve the promise if it does not scroll for some reason.\n      this.scrollContainer.window().requestAnimationFrame(() => {\n        if (!this.scrollToResolveCallback) {\n          return;\n        }\n        this.scrollToResolveCallback();\n        this.scrollToResolveCallback = null;\n      });\n    });\n  }\n\n  calculateOffset(pathToReveal: HeapSnapshotGridNode[]): number {\n    let parentNode = this.rootNode();\n    let height = 0;\n    if (pathToReveal.length === 0) {\n      return 0;\n    }\n    for (let i = 0; i < pathToReveal.length; ++i) {\n      const node = pathToReveal[i];\n      const children = this.allChildren(parentNode);\n      for (let j = 0; j < children.length; ++j) {\n        const child = children[j];\n        if (node === child) {\n          height += node.nodeSelfHeight();\n          break;\n        }\n        height += this.nodeHeight(child);\n      }\n      parentNode = node;\n    }\n    return height - (pathToReveal[pathToReveal.length - 1] as HeapSnapshotGridNode).nodeSelfHeight();\n  }\n\n  allChildren(parent: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>): HeapSnapshotGridNode[] {\n    const children = adjacencyMap.get(parent) || [];\n    if (!adjacencyMap.has(parent)) {\n      adjacencyMap.set(parent, children);\n    }\n    return children;\n  }\n\n  appendNode(parent: DataGrid.DataGrid.DataGridNode<HeapSnapshotGridNode>, node: HeapSnapshotGridNode): void {\n    this.allChildren(parent).push(node);\n  }\n\n  insertChild(parent: HeapSnapshotGridNode, node: HeapSnapshotGridNode, index: number): void {\n    this.allChildren(parent).splice(index, 0, (node as HeapSnapshotGridNode));\n  }\n\n  removeChildByIndex(parent: HeapSnapshotGridNode, index: number): void {\n    this.allChildren(parent).splice(index, 1);\n  }\n\n  removeAllChildren(parent: HeapSnapshotGridNode): void {\n    adjacencyMap.delete(parent);\n  }\n\n  removeTopLevelNodes(): void {\n    this.disposeAllNodes();\n    this.rootNode().removeChildren();\n    this.removeAllChildren((this.rootNode() as HeapSnapshotGridNode));\n  }\n\n  isScrolledIntoView(element: HTMLElement): boolean {\n    const viewportTop = this.scrollContainer.scrollTop;\n    const viewportBottom = viewportTop + this.scrollContainer.clientHeight;\n    const elemTop = element.offsetTop;\n    const elemBottom = elemTop + element.offsetHeight;\n    return elemBottom <= viewportBottom && elemTop >= viewportTop;\n  }\n\n  onResize(): void {\n    super.onResize();\n    this.updateVisibleNodes(false);\n  }\n\n  onScroll(_event: Event): void {\n    this.updateVisibleNodes(false);\n\n    if (this.scrollToResolveCallback) {\n      this.scrollToResolveCallback();\n      this.scrollToResolveCallback = null;\n    }\n  }\n}\n\nexport class HeapSnapshotContainmentDataGrid extends HeapSnapshotSortableDataGrid {\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate,\n      displayName: string, columns?: DataGrid.DataGrid.ColumnDescriptor[]) {\n    columns =\n        columns || ([\n          {id: 'object', title: i18nString(UIStrings.object), disclosure: true, sortable: true},\n          {id: 'distance', title: i18nString(UIStrings.distance), width: '70px', sortable: true, fixedWidth: true},\n          {\n            id: 'shallowSize',\n            title: i18nString(UIStrings.shallowSize),\n            width: '110px',\n            sortable: true,\n            fixedWidth: true,\n          },\n          {\n            id: 'retainedSize',\n            title: i18nString(UIStrings.retainedSize),\n            width: '110px',\n            sortable: true,\n            fixedWidth: true,\n            sort: DataGrid.DataGrid.Order.Descending,\n          },\n        ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    const dataGridParameters = ({displayName, columns} as DataGrid.DataGrid.Parameters);\n    super(heapProfilerModel, dataDisplayDelegate, dataGridParameters);\n  }\n\n  async setDataSource(snapshot: HeapSnapshotProxy, nodeIndex: number): Promise<void> {\n    this.snapshot = snapshot;\n    const node =\n        new HeapSnapshotModel.HeapSnapshotModel.Node(-1, 'root', 0, nodeIndex || snapshot.rootNodeIndex, 0, 0, '');\n    this.setRootNode(this.createRootNode(snapshot, node));\n    void (this.rootNode() as HeapSnapshotGridNode).sort();\n  }\n\n  createRootNode(snapshot: HeapSnapshotProxy, node: HeapSnapshotModel.HeapSnapshotModel.Node): HeapSnapshotObjectNode {\n    const fakeEdge = new HeapSnapshotModel.HeapSnapshotModel.Edge('', node, '', -1);\n    return new HeapSnapshotObjectNode(this, snapshot, fakeEdge, null);\n  }\n\n  sortingChanged(): void {\n    const rootNode = this.rootNode();\n    if (rootNode.hasChildren()) {\n      void (rootNode as HeapSnapshotGridNode).sort();\n    }\n  }\n}\n\nexport class HeapSnapshotRetainmentDataGrid extends HeapSnapshotContainmentDataGrid {\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate) {\n    const columns = ([\n      {id: 'object', title: i18nString(UIStrings.object), disclosure: true, sortable: true},\n      {\n        id: 'distance',\n        title: i18nString(UIStrings.distance),\n        width: '70px',\n        sortable: true,\n        fixedWidth: true,\n        sort: DataGrid.DataGrid.Order.Ascending,\n      },\n      {id: 'shallowSize', title: i18nString(UIStrings.shallowSize), width: '110px', sortable: true, fixedWidth: true},\n      {id: 'retainedSize', title: i18nString(UIStrings.retainedSize), width: '110px', sortable: true, fixedWidth: true},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    super(heapProfilerModel, dataDisplayDelegate, i18nString(UIStrings.heapSnapshotRetainment), columns);\n  }\n\n  createRootNode(snapshot: HeapSnapshotProxy, node: HeapSnapshotModel.HeapSnapshotModel.Node):\n      HeapSnapshotRetainingObjectNode {\n    const fakeEdge = new HeapSnapshotModel.HeapSnapshotModel.Edge('', node, '', -1);\n    return new HeapSnapshotRetainingObjectNode(this, snapshot, fakeEdge, null);\n  }\n\n  sortFields(sortColumn: string, sortAscending: boolean): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    switch (sortColumn) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'count', false);\n      case 'count':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('count', sortAscending, 'name', true);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('shallowSize', sortAscending, 'name', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, 'name', true);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('distance', sortAscending, 'name', true);\n      default:\n        throw new Error(`Unknown column ${sortColumn}`);\n    }\n  }\n\n  reset(): void {\n    this.rootNode().removeChildren();\n    this.resetSortingCache();\n  }\n\n  async setDataSource(snapshot: HeapSnapshotProxy, nodeIndex: number): Promise<void> {\n    await super.setDataSource(snapshot, nodeIndex);\n    this.rootNode().expand();\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// TODO(crbug.com/1228674): Remove this enum, it is only used in web tests.\n// eslint-disable-next-line rulesdir/const_enum\nexport enum HeapSnapshotRetainmentDataGridEvents {\n  ExpandRetainersComplete = 'ExpandRetainersComplete',\n}\n\nexport class HeapSnapshotConstructorsDataGrid extends HeapSnapshotViewportDataGrid {\n  profileIndex: number;\n  objectIdToSelect: string|null;\n  nextRequestedFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter|null;\n  lastFilter?: HeapSnapshotModel.HeapSnapshotModel.NodeFilter|null;\n  filterInProgress?: HeapSnapshotModel.HeapSnapshotModel.NodeFilter|null;\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate) {\n    const columns = ([\n      {id: 'object', title: i18nString(UIStrings.constructorString), disclosure: true, sortable: true},\n      {id: 'distance', title: i18nString(UIStrings.distance), width: '70px', sortable: true, fixedWidth: true},\n      {id: 'shallowSize', title: i18nString(UIStrings.shallowSize), width: '110px', sortable: true, fixedWidth: true},\n      {\n        id: 'retainedSize',\n        title: i18nString(UIStrings.retainedSize),\n        width: '110px',\n        sort: DataGrid.DataGrid.Order.Descending,\n        sortable: true,\n        fixedWidth: true,\n      },\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    super(\n        heapProfilerModel, dataDisplayDelegate,\n        ({displayName: i18nString(UIStrings.heapSnapshotConstructors).toString(), columns} as\n         DataGrid.DataGrid.Parameters));\n    // clang-format on\n    this.profileIndex = -1;\n    this.objectIdToSelect = null;\n\n    this.nextRequestedFilter = null;\n  }\n\n  sortFields(sortColumn: string, sortAscending: boolean): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    switch (sortColumn) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'retainedSize', false);\n      case 'distance':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig(\n            'distance', sortAscending, 'retainedSize', false);\n      case 'shallowSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('shallowSize', sortAscending, 'name', true);\n      case 'retainedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('retainedSize', sortAscending, 'name', true);\n      default:\n        throw new Error(`Unknown column ${sortColumn}`);\n    }\n  }\n\n  async revealObjectByHeapSnapshotId(id: string): Promise<HeapSnapshotGridNode|null> {\n    if (!this.snapshot) {\n      this.objectIdToSelect = id;\n      return null;\n    }\n\n    const className = await this.snapshot.nodeClassName(parseInt(id, 10));\n    if (!className) {\n      return null;\n    }\n\n    const parent = this.topLevelNodes().find(classNode => classNode.name === className);\n    if (!parent) {\n      return null;\n    }\n\n    const nodes = await (parent as HeapSnapshotConstructorNode).populateNodeBySnapshotObjectId(parseInt(id, 10));\n    return nodes.length ? this.revealTreeNode(nodes) : null;\n  }\n\n  clear(): void {\n    this.nextRequestedFilter = null;\n    this.lastFilter = null;\n    this.removeTopLevelNodes();\n  }\n\n  async setDataSource(snapshot: HeapSnapshotProxy, _nodeIndex: number): Promise<void> {\n    this.snapshot = snapshot;\n    if (this.profileIndex === -1) {\n      void this.populateChildren();\n    }\n\n    if (this.objectIdToSelect) {\n      void this.revealObjectByHeapSnapshotId(this.objectIdToSelect);\n      this.objectIdToSelect = null;\n    }\n  }\n\n  setSelectionRange(minNodeId: number, maxNodeId: number): void {\n    this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(minNodeId, maxNodeId);\n    void this.populateChildren(this.nodeFilterInternal);\n  }\n\n  setAllocationNodeId(allocationNodeId: number): void {\n    this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n    this.nodeFilterInternal.allocationNodeId = allocationNodeId;\n    void this.populateChildren(this.nodeFilterInternal);\n  }\n\n  aggregatesReceived(nodeFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter, aggregates: {\n    [x: string]: HeapSnapshotModel.HeapSnapshotModel.Aggregate,\n  }): void {\n    this.filterInProgress = null;\n    if (this.nextRequestedFilter && this.snapshot) {\n      void this.snapshot.aggregatesWithFilter(this.nextRequestedFilter)\n          .then(this.aggregatesReceived.bind(this, this.nextRequestedFilter));\n      this.filterInProgress = this.nextRequestedFilter;\n      this.nextRequestedFilter = null;\n    }\n    this.removeTopLevelNodes();\n    this.resetSortingCache();\n    for (const constructor in aggregates) {\n      this.appendNode(\n          (this.rootNode() as HeapSnapshotGridNode),\n          new HeapSnapshotConstructorNode(this, constructor, aggregates[constructor], nodeFilter));\n    }\n    this.sortingChanged();\n    this.lastFilter = nodeFilter;\n  }\n\n  async populateChildren(maybeNodeFilter?: HeapSnapshotModel.HeapSnapshotModel.NodeFilter): Promise<void> {\n    const nodeFilter = maybeNodeFilter || new HeapSnapshotModel.HeapSnapshotModel.NodeFilter();\n\n    if (this.filterInProgress) {\n      this.nextRequestedFilter = this.filterInProgress.equals(nodeFilter) ? null : nodeFilter;\n      return;\n    }\n    if (this.lastFilter && this.lastFilter.equals(nodeFilter)) {\n      return;\n    }\n    this.filterInProgress = nodeFilter;\n\n    if (this.snapshot) {\n      const aggregates = await this.snapshot.aggregatesWithFilter(nodeFilter);\n      this.aggregatesReceived(nodeFilter, aggregates);\n    }\n  }\n\n  filterSelectIndexChanged(profiles: HeapProfileHeader[], profileIndex: number): void {\n    this.profileIndex = profileIndex;\n    this.nodeFilterInternal = undefined;\n    if (profileIndex !== -1) {\n      const minNodeId = profileIndex > 0 ? profiles[profileIndex - 1].maxJSObjectId : 0;\n      const maxNodeId = profiles[profileIndex].maxJSObjectId;\n      this.nodeFilterInternal = new HeapSnapshotModel.HeapSnapshotModel.NodeFilter(minNodeId, maxNodeId);\n    }\n\n    void this.populateChildren(this.nodeFilterInternal);\n  }\n}\n\nexport class HeapSnapshotDiffDataGrid extends HeapSnapshotViewportDataGrid {\n  baseSnapshot?: HeapSnapshotProxy;\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate) {\n    const columns = ([\n      {id: 'object', title: i18nString(UIStrings.constructorString), disclosure: true, sortable: true},\n      {id: 'addedCount', title: i18nString(UIStrings.New), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'removedCount', title: i18nString(UIStrings.Deleted), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'countDelta', title: i18nString(UIStrings.Delta), width: '65px', sortable: true, fixedWidth: true},\n      {\n        id: 'addedSize',\n        title: i18nString(UIStrings.allocSize),\n        width: '75px',\n        sortable: true,\n        fixedWidth: true,\n        sort: DataGrid.DataGrid.Order.Descending,\n      },\n      {id: 'removedSize', title: i18nString(UIStrings.freedSize), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'sizeDelta', title: i18nString(UIStrings.sizeDelta), width: '75px', sortable: true, fixedWidth: true},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    super(\n        heapProfilerModel, dataDisplayDelegate,\n        ({displayName: i18nString(UIStrings.heapSnapshotDiff).toString(), columns} as DataGrid.DataGrid.Parameters));\n  }\n\n  defaultPopulateCount(): number {\n    return 50;\n  }\n\n  sortFields(sortColumn: string, sortAscending: boolean): HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig {\n    switch (sortColumn) {\n      case 'object':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('name', sortAscending, 'count', false);\n      case 'addedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('addedCount', sortAscending, 'name', true);\n      case 'removedCount':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('removedCount', sortAscending, 'name', true);\n      case 'countDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('countDelta', sortAscending, 'name', true);\n      case 'addedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('addedSize', sortAscending, 'name', true);\n      case 'removedSize':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('removedSize', sortAscending, 'name', true);\n      case 'sizeDelta':\n        return new HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig('sizeDelta', sortAscending, 'name', true);\n      default:\n        throw new Error(`Unknown column ${sortColumn}`);\n    }\n  }\n\n  async setDataSource(snapshot: HeapSnapshotProxy, _nodeIndex: number): Promise<void> {\n    this.snapshot = snapshot;\n  }\n\n  setBaseDataSource(baseSnapshot: HeapSnapshotProxy): void {\n    this.baseSnapshot = baseSnapshot;\n    this.removeTopLevelNodes();\n    this.resetSortingCache();\n    if (this.baseSnapshot === this.snapshot) {\n      this.dispatchEventToListeners(HeapSnapshotSortableDataGridEvents.SortingComplete);\n      return;\n    }\n    void this.populateChildren();\n  }\n\n  async populateChildren(): Promise<void> {\n    if (this.snapshot === null || this.baseSnapshot === undefined || this.baseSnapshot.uid === undefined) {\n      throw new Error('Data sources have not been set correctly');\n    }\n    // Two snapshots live in different workers isolated from each other. That is why\n    // we first need to collect information about the nodes in the first snapshot and\n    // then pass it to the second snapshot to calclulate the diff.\n    const aggregatesForDiff = await this.baseSnapshot.aggregatesForDiff();\n    const diffByClassName = await this.snapshot.calculateSnapshotDiff(this.baseSnapshot.uid, aggregatesForDiff);\n\n    for (const className in diffByClassName) {\n      const diff = diffByClassName[className];\n      this.appendNode(this.rootNode(), new HeapSnapshotDiffNode(this, className, diff));\n    }\n    this.sortingChanged();\n  }\n}\n\nexport class AllocationDataGrid extends HeapSnapshotViewportDataGrid {\n  readonly linkifierInternal: Components.Linkifier.Linkifier;\n  topNodes?: HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode[];\n\n  constructor(\n      heapProfilerModel: SDK.HeapProfilerModel.HeapProfilerModel|null, dataDisplayDelegate: DataDisplayDelegate) {\n    const columns = ([\n      {id: 'liveCount', title: i18nString(UIStrings.liveCount), width: '75px', sortable: true, fixedWidth: true},\n      {id: 'count', title: i18nString(UIStrings.count), width: '65px', sortable: true, fixedWidth: true},\n      {id: 'liveSize', title: i18nString(UIStrings.liveSize), width: '75px', sortable: true, fixedWidth: true},\n      {\n        id: 'size',\n        title: i18nString(UIStrings.size),\n        width: '75px',\n        sortable: true,\n        fixedWidth: true,\n        sort: DataGrid.DataGrid.Order.Descending,\n      },\n      {id: 'name', title: i18nString(UIStrings.function), disclosure: true, sortable: true},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    super(\n        heapProfilerModel, dataDisplayDelegate,\n        ({displayName: i18nString(UIStrings.allocation).toString(), columns} as DataGrid.DataGrid.Parameters));\n    // clang-format on\n    this.linkifierInternal = new Components.Linkifier.Linkifier();\n  }\n\n  get linkifier(): Components.Linkifier.Linkifier {\n    return this.linkifierInternal;\n  }\n\n  dispose(): void {\n    this.linkifierInternal.reset();\n  }\n\n  async setDataSource(snapshot: HeapSnapshotProxy, _nodeIndex: number): Promise<void> {\n    this.snapshot = snapshot;\n    this.topNodes = await this.snapshot.allocationTracesTops();\n    this.populateChildren();\n  }\n\n  populateChildren(): void {\n    this.removeTopLevelNodes();\n    const root = this.rootNode();\n    const tops = this.topNodes || [];\n    for (const top of tops) {\n      this.appendNode(root, new AllocationGridNode(this, top));\n    }\n    this.updateVisibleNodes(true);\n  }\n\n  sortingChanged(): void {\n    if (this.topNodes !== undefined) {\n      this.topNodes.sort(this.createComparator());\n      this.rootNode().removeChildren();\n      this.populateChildren();\n    }\n  }\n\n  createComparator(): (arg0: Object, arg1: Object) => number {\n    const fieldName = this.sortColumnId();\n    const compareResult = (this.sortOrder() === DataGrid.DataGrid.Order.Ascending) ? +1 : -1;\n    function compare(a: Object, b: Object): number {\n      // @ts-ignore\n      if (a[fieldName] > b[fieldName]) {\n        return compareResult;\n      }\n      // @ts-ignore\n      if (a[fieldName] < b[fieldName]) {\n        return -compareResult;\n      }\n      return 0;\n    }\n    return compare;\n  }\n}\n"]}