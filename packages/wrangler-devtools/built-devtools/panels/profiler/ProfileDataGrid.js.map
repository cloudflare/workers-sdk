{"version":3,"file":"ProfileDataGrid.js","sourceRoot":"","sources":["../../../../../../front_end/panels/profiler/ProfileDataGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2009 280 North Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nconst UIStrings = {\n  /**\n  * @description This message is presented as a tooltip when developers investigate the performance\n  * of a page. The tooltip alerts developers that some parts of code in execution were not optimized\n  * (made to run faster) and that associated timing information must be considered with this in\n  * mind. The placeholder text is the reason the code was not optimized.\n  * @example {Optimized too many times} PH1\n  */\n  notOptimizedS: 'Not optimized: {PH1}',\n  /**\n  *@description Generic text with two placeholders separated by a comma\n  *@example {1 613 680} PH1\n  *@example {44 %} PH2\n  */\n  genericTextTwoPlaceholders: '{PH1}, {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/ProfileDataGrid.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ProfileDataGridNode extends DataGrid.DataGrid.DataGridNode<unknown> {\n  searchMatchedSelfColumn: boolean;\n  searchMatchedTotalColumn: boolean;\n  searchMatchedFunctionColumn: boolean;\n  profileNode: SDK.ProfileTreeModel.ProfileNode;\n  tree: ProfileDataGridTree;\n  childrenByCallUID: Map<string, ProfileDataGridNode>;\n  lastComparator: unknown;\n  callUID: string;\n  self: number;\n  total: number;\n  functionName: string;\n  readonly deoptReason: string;\n  url: Platform.DevToolsPath.UrlString;\n  linkElement: Element|null;\n  populated: boolean;\n  savedSelf?: number;\n  savedTotal?: number;\n  savedChildren?: DataGrid.DataGrid.DataGridNode<unknown>[];\n\n  constructor(profileNode: SDK.ProfileTreeModel.ProfileNode, owningTree: ProfileDataGridTree, hasChildren: boolean) {\n    super(null, hasChildren);\n\n    this.searchMatchedSelfColumn = false;\n    this.searchMatchedTotalColumn = false;\n    this.searchMatchedFunctionColumn = false;\n\n    this.profileNode = profileNode;\n    this.tree = owningTree;\n    this.childrenByCallUID = new Map();\n    this.lastComparator = null;\n\n    this.callUID = profileNode.callUID;\n    this.self = profileNode.self;\n    this.total = profileNode.total;\n    this.functionName = UI.UIUtils.beautifyFunctionName(profileNode.functionName);\n    this.deoptReason = profileNode.deoptReason || '';\n    this.url = profileNode.url;\n    this.linkElement = null;\n\n    this.populated = false;\n  }\n\n  static sort<T>(gridNodeGroups: ProfileDataGridNode[][], comparator: (arg0: T, arg1: T) => number, force: boolean):\n      void {\n    for (let gridNodeGroupIndex = 0; gridNodeGroupIndex < gridNodeGroups.length; ++gridNodeGroupIndex) {\n      const gridNodes = gridNodeGroups[gridNodeGroupIndex];\n      const count = gridNodes.length;\n\n      for (let index = 0; index < count; ++index) {\n        const gridNode = gridNodes[index];\n\n        // If the grid node is collapsed, then don't sort children (save operation for later).\n        // If the grid node has the same sorting as previously, then there is no point in sorting it again.\n        if (!force && (!gridNode.expanded || gridNode.lastComparator === comparator)) {\n          if (gridNode.children.length) {\n            gridNode.shouldRefreshChildren = true;\n          }\n          continue;\n        }\n\n        gridNode.lastComparator = comparator;\n\n        const children = gridNode.children;\n        const childCount = children.length;\n\n        if (childCount) {\n          // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n          // @ts-expect-error\n          children.sort(comparator);\n\n          for (let childIndex = 0; childIndex < childCount; ++childIndex) {\n            children[childIndex].recalculateSiblings(childIndex);\n          }\n          gridNodeGroups.push((children as ProfileDataGridNode[]));\n        }\n      }\n    }\n  }\n\n  static merge(container: ProfileDataGridTree|ProfileDataGridNode, child: ProfileDataGridNode, shouldAbsorb: boolean):\n      void {\n    container.self += child.self;\n\n    if (!shouldAbsorb) {\n      container.total += child.total;\n    }\n\n    let children = container.children.slice();\n\n    container.removeChildren();\n\n    let count: number = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      if (!shouldAbsorb || children[index] !== child) {\n        container.appendChild((children[index] as ProfileDataGridNode));\n      }\n    }\n\n    children = child.children.slice();\n    count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      const orphanedChild = (children[index] as ProfileDataGridNode);\n      const existingChild = container.childrenByCallUID.get(orphanedChild.callUID);\n\n      if (existingChild) {\n        existingChild.merge((orphanedChild as ProfileDataGridNode), false);\n      } else {\n        container.appendChild(orphanedChild);\n      }\n    }\n  }\n\n  static populate(container: ProfileDataGridTree|ProfileDataGridNode): void {\n    if (container.populated) {\n      return;\n    }\n    container.populated = true;\n\n    container.populateChildren();\n\n    const currentComparator = container.tree.lastComparator;\n\n    if (currentComparator) {\n      container.sort(currentComparator, true);\n    }\n  }\n\n  createCell(columnId: string): HTMLElement {\n    switch (columnId) {\n      case 'self': {\n        const cell = this.createValueCell(this.self, this.selfPercent, columnId);\n        cell.classList.toggle('highlight', this.searchMatchedSelfColumn);\n        return cell;\n      }\n\n      case 'total': {\n        const cell = this.createValueCell(this.total, this.totalPercent, columnId);\n        cell.classList.toggle('highlight', this.searchMatchedTotalColumn);\n        return cell;\n      }\n\n      case 'function': {\n        const cell = this.createTD(columnId);\n        cell.classList.toggle('highlight', this.searchMatchedFunctionColumn);\n        if (this.deoptReason) {\n          cell.classList.add('not-optimized');\n          const warningIcon = UI.Icon.Icon.create('smallicon-warning', 'profile-warn-marker');\n          UI.Tooltip.Tooltip.install(warningIcon, i18nString(UIStrings.notOptimizedS, {PH1: this.deoptReason}));\n          cell.appendChild(warningIcon);\n        }\n        UI.UIUtils.createTextChild(cell, this.functionName);\n        if (this.profileNode.scriptId === '0') {\n          return cell;\n        }\n        const urlElement = this.tree.formatter.linkifyNode(this);\n        if (!urlElement) {\n          return cell;\n        }\n        (urlElement as HTMLElement).style.maxWidth = '75%';\n        cell.appendChild(urlElement);\n        this.linkElement = urlElement;\n        return cell;\n      }\n    }\n    return super.createCell(columnId);\n  }\n\n  createValueCell(value: number, percent: number, columnId: string): HTMLElement {\n    const cell = document.createElement('td');\n    cell.classList.add('numeric-column');\n    const div = cell.createChild('div', 'profile-multiple-values');\n    const valueSpan = div.createChild('span');\n    const valueText = this.tree.formatter.formatValue(value, this);\n    valueSpan.textContent = valueText;\n    const percentSpan = div.createChild('span', 'percent-column');\n    const percentText = this.tree.formatter.formatPercent(percent, this);\n    percentSpan.textContent = percentText;\n    const valueAccessibleText = this.tree.formatter.formatValueAccessibleText(value, this);\n    this.setCellAccessibleName(\n        i18nString(UIStrings.genericTextTwoPlaceholders, {PH1: valueAccessibleText, PH2: percentText}), cell, columnId);\n    return cell;\n  }\n\n  sort(comparator: (arg0: ProfileDataGridNode, arg1: ProfileDataGridNode) => number, force: boolean): void {\n    const sortComparator =\n        (comparator as (arg0: DataGrid.DataGrid.DataGridNode<unknown>, arg1: DataGrid.DataGrid.DataGridNode<unknown>) =>\n             number);\n    return ProfileDataGridNode.sort([[this]], sortComparator, force);\n  }\n\n  insertChild(child: DataGrid.DataGrid.DataGridNode<unknown>, index: number): void {\n    const profileDataGridNode = (child as ProfileDataGridNode);\n    super.insertChild(profileDataGridNode, index);\n    this.childrenByCallUID.set(profileDataGridNode.callUID, (profileDataGridNode as ProfileDataGridNode));\n  }\n\n  removeChild(profileDataGridNode: DataGrid.DataGrid.DataGridNode<unknown>): void {\n    super.removeChild(profileDataGridNode);\n    this.childrenByCallUID.delete((profileDataGridNode as ProfileDataGridNode).callUID);\n  }\n\n  removeChildren(): void {\n    super.removeChildren();\n\n    this.childrenByCallUID.clear();\n  }\n\n  findChild(node: SDK.ProfileTreeModel.ProfileNode): ProfileDataGridNode|null {\n    if (!node) {\n      return null;\n    }\n    return this.childrenByCallUID.get(node.callUID) || null;\n  }\n\n  get selfPercent(): number {\n    return this.self / this.tree.total * 100.0;\n  }\n\n  get totalPercent(): number {\n    return this.total / this.tree.total * 100.0;\n  }\n\n  populate(): void {\n    ProfileDataGridNode.populate(this);\n  }\n\n  populateChildren(): void {\n    // Not implemented.\n  }\n\n  // When focusing and collapsing we modify lots of nodes in the tree.\n  // This allows us to restore them all to their original state when we revert.\n\n  save(): void {\n    if (this.savedChildren) {\n      return;\n    }\n\n    this.savedSelf = this.self;\n    this.savedTotal = this.total;\n\n    this.savedChildren = this.children.slice();\n  }\n\n  /**\n   * When focusing and collapsing we modify lots of nodes in the tree.\n   * This allows us to restore them all to their original state when we revert.\n   */\n  restore(): void {\n    if (!this.savedChildren) {\n      return;\n    }\n\n    if (this.savedSelf && this.savedTotal) {\n      this.self = this.savedSelf;\n      this.total = this.savedTotal;\n    }\n\n    this.removeChildren();\n\n    const children = this.savedChildren;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      (children[index] as ProfileDataGridNode).restore();\n      this.appendChild(children[index]);\n    }\n  }\n\n  merge(child: ProfileDataGridNode, shouldAbsorb: boolean): void {\n    ProfileDataGridNode.merge(this, child, shouldAbsorb);\n  }\n}\n\nexport class ProfileDataGridTree implements UI.SearchableView.Searchable {\n  tree: this;\n  self: number;\n  children: ProfileDataGridNode[];\n  readonly formatter: Formatter;\n  readonly searchableView: UI.SearchableView.SearchableView;\n  total: number;\n  lastComparator: ((arg0: ProfileDataGridNode, arg1: ProfileDataGridNode) => number)|null;\n  childrenByCallUID: Map<string, ProfileDataGridNode>;\n  deepSearch: boolean;\n  populated: boolean;\n  searchResults!: {\n    profileNode: ProfileDataGridNode,\n  }[];\n  savedTotal?: number;\n  savedChildren?: ProfileDataGridNode[]|null;\n  searchResultIndex: number = -1;\n\n  constructor(formatter: Formatter, searchableView: UI.SearchableView.SearchableView, total: number) {\n    this.tree = this;\n    this.self = 0;\n    this.children = [];\n    this.formatter = formatter;\n    this.searchableView = searchableView;\n    this.total = total;\n\n    this.lastComparator = null;\n    this.childrenByCallUID = new Map();\n    this.deepSearch = true;\n    this.populated = false;\n  }\n\n  static propertyComparator(property: string, isAscending: boolean):\n      (arg0: {\n        [x: string]: unknown,\n      },\n       arg1: {\n         [x: string]: unknown,\n       }) => number {\n    let comparator = ProfileDataGridTree.propertyComparators[(isAscending ? 1 : 0)][property];\n\n    if (!comparator) {\n      if (isAscending) {\n        comparator = function(\n            lhs: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            },\n            rhs: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            }): number {\n          if (lhs[property] < rhs[property]) {\n            return -1;\n          }\n\n          if (lhs[property] > rhs[property]) {\n            return 1;\n          }\n\n          return 0;\n        };\n      } else {\n        comparator = function(\n            lhs: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            },\n            rhs: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            }): number {\n          if (lhs[property] > rhs[property]) {\n            return -1;\n          }\n\n          if (lhs[property] < rhs[property]) {\n            return 1;\n          }\n\n          return 0;\n        };\n      }\n\n      ProfileDataGridTree.propertyComparators[(isAscending ? 1 : 0)][property] = comparator;\n    }\n\n    return comparator as (\n               arg0: {\n                 [x: string]: unknown,\n               },\n               arg1: {\n                 [x: string]: unknown,\n               }) => number;\n  }\n\n  get expanded(): boolean {\n    return true;\n  }\n\n  appendChild(child: ProfileDataGridNode): void {\n    this.insertChild(child, this.children.length);\n  }\n\n  focus(_profileDataGridNode: ProfileDataGridNode): void {\n  }\n\n  exclude(_profileDataGridNode: ProfileDataGridNode): void {\n  }\n\n  insertChild(child: ProfileDataGridNode, index: number): void {\n    const childToInsert = (child as ProfileDataGridNode);\n    this.children.splice(index, 0, childToInsert);\n    this.childrenByCallUID.set(childToInsert.callUID, child);\n  }\n\n  removeChildren(): void {\n    this.children = [];\n    this.childrenByCallUID.clear();\n  }\n\n  populateChildren(): void {\n    // Not implemented.\n  }\n\n  findChild(node: SDK.ProfileTreeModel.ProfileNode): ProfileDataGridNode|null {\n    if (!node) {\n      return null;\n    }\n    return this.childrenByCallUID.get(node.callUID) || null;\n  }\n\n  sort<T>(comparator: (arg0: T, arg1: T) => number, force: boolean): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    return ProfileDataGridNode.sort([[this]], comparator, force);\n  }\n\n  save(): void {\n    if (this.savedChildren) {\n      return;\n    }\n\n    this.savedTotal = this.total;\n    this.savedChildren = this.children.slice();\n  }\n\n  restore(): void {\n    if (!this.savedChildren) {\n      return;\n    }\n\n    this.children = this.savedChildren;\n    if (this.savedTotal) {\n      this.total = this.savedTotal;\n    }\n\n    const children = this.children;\n    const count = children.length;\n\n    for (let index = 0; index < count; ++index) {\n      (children[index] as ProfileDataGridNode).restore();\n    }\n\n    this.savedChildren = null;\n  }\n\n  matchFunction(searchConfig: UI.SearchableView.SearchConfig): ((arg0: ProfileDataGridNode) => boolean)|null {\n    const query = searchConfig.query.trim();\n    if (!query.length) {\n      return null;\n    }\n\n    const greaterThan = (query.startsWith('>'));\n    const lessThan = (query.startsWith('<'));\n    let equalTo: true|boolean = (query.startsWith('=') || ((greaterThan || lessThan) && query.indexOf('=') === 1));\n    const percentUnits = (query.endsWith('%'));\n    const millisecondsUnits = (query.length > 2 && query.endsWith('ms'));\n    const secondsUnits = (!millisecondsUnits && query.endsWith('s'));\n\n    let queryNumber = parseFloat(query);\n    if (greaterThan || lessThan || equalTo) {\n      if (equalTo && (greaterThan || lessThan)) {\n        queryNumber = parseFloat(query.substring(2));\n      } else {\n        queryNumber = parseFloat(query.substring(1));\n      }\n    }\n\n    const queryNumberMilliseconds = (secondsUnits ? (queryNumber * 1000) : queryNumber);\n\n    // Make equalTo implicitly true if it wasn't specified there is no other operator.\n    if (!isNaN(queryNumber) && !(greaterThan || lessThan)) {\n      equalTo = true;\n    }\n\n    const matcher = Platform.StringUtilities.createPlainTextSearchRegex(query, 'i');\n\n    function matchesQuery(profileDataGridNode: ProfileDataGridNode): boolean {\n      profileDataGridNode.searchMatchedSelfColumn = false;\n      profileDataGridNode.searchMatchedTotalColumn = false;\n      profileDataGridNode.searchMatchedFunctionColumn = false;\n\n      if (percentUnits) {\n        if (lessThan) {\n          if (profileDataGridNode.selfPercent < queryNumber) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent < queryNumber) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        } else if (greaterThan) {\n          if (profileDataGridNode.selfPercent > queryNumber) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent > queryNumber) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n\n        if (equalTo) {\n          if (profileDataGridNode.selfPercent === queryNumber) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.totalPercent === queryNumber) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n      } else if (millisecondsUnits || secondsUnits) {\n        if (lessThan) {\n          if (profileDataGridNode.self < queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total < queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        } else if (greaterThan) {\n          if (profileDataGridNode.self > queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total > queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n\n        if (equalTo) {\n          if (profileDataGridNode.self === queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedSelfColumn = true;\n          }\n          if (profileDataGridNode.total === queryNumberMilliseconds) {\n            profileDataGridNode.searchMatchedTotalColumn = true;\n          }\n        }\n      }\n\n      if (profileDataGridNode.functionName.match(matcher) ||\n          (profileDataGridNode.url && profileDataGridNode.url.match(matcher))) {\n        profileDataGridNode.searchMatchedFunctionColumn = true;\n      }\n\n      if (profileDataGridNode.searchMatchedSelfColumn || profileDataGridNode.searchMatchedTotalColumn ||\n          profileDataGridNode.searchMatchedFunctionColumn) {\n        profileDataGridNode.refresh();\n        return true;\n      }\n\n      return false;\n    }\n    return matchesQuery;\n  }\n\n  performSearch(searchConfig: UI.SearchableView.SearchConfig, shouldJump: boolean, jumpBackwards?: boolean): void {\n    this.searchCanceled();\n    const matchesQuery = this.matchFunction(searchConfig);\n    if (!matchesQuery) {\n      return;\n    }\n\n    this.searchResults = [];\n    const deepSearch = this.deepSearch;\n    let current: DataGrid.DataGrid.DataGridNode<unknown>|null;\n    for (current = this.children[0]; current; current = current.traverseNextNode(!deepSearch, null, !deepSearch)) {\n      const item = (current as ProfileDataGridNode | null);\n      if (!item) {\n        break;\n      }\n\n      if (matchesQuery(item)) {\n        this.searchResults.push({profileNode: item});\n      }\n    }\n    this.searchResultIndex = jumpBackwards ? 0 : this.searchResults.length - 1;\n    this.searchableView.updateSearchMatchesCount(this.searchResults.length);\n    this.searchableView.updateCurrentMatchIndex(this.searchResultIndex);\n  }\n\n  searchCanceled(): void {\n    if (this.searchResults) {\n      for (let i = 0; i < this.searchResults.length; ++i) {\n        const profileNode = this.searchResults[i].profileNode;\n        profileNode.searchMatchedSelfColumn = false;\n        profileNode.searchMatchedTotalColumn = false;\n        profileNode.searchMatchedFunctionColumn = false;\n        profileNode.refresh();\n      }\n    }\n\n    this.searchResults = [];\n    this.searchResultIndex = -1;\n  }\n\n  jumpToNextSearchResult(): void {\n    if (!this.searchResults || !this.searchResults.length) {\n      return;\n    }\n    this.searchResultIndex = (this.searchResultIndex + 1) % this.searchResults.length;\n    this.jumpToSearchResult(this.searchResultIndex);\n  }\n\n  jumpToPreviousSearchResult(): void {\n    if (!this.searchResults || !this.searchResults.length) {\n      return;\n    }\n    this.searchResultIndex = (this.searchResultIndex - 1 + this.searchResults.length) % this.searchResults.length;\n    this.jumpToSearchResult(this.searchResultIndex);\n  }\n\n  supportsCaseSensitiveSearch(): boolean {\n    return true;\n  }\n\n  supportsRegexSearch(): boolean {\n    return false;\n  }\n\n  jumpToSearchResult(index: number): void {\n    const searchResult = this.searchResults[index];\n    if (!searchResult) {\n      return;\n    }\n    const profileNode = searchResult.profileNode;\n    profileNode.revealAndSelect();\n    this.searchableView.updateCurrentMatchIndex(index);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static readonly propertyComparators: {[key: string]: unknown}[] = [{}, {}];\n}\n\nexport interface Formatter {\n  formatValue(value: number, node: ProfileDataGridNode): string;\n  formatValueAccessibleText(value: number, node: ProfileDataGridNode): string;\n  formatPercent(value: number, node: ProfileDataGridNode): string;\n  linkifyNode(node: ProfileDataGridNode): Element|null;\n}\n"]}