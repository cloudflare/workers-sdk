{"version":3,"file":"CPUProfilerModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CPUProfilerModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as i18n from '../i18n/i18n.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {DebuggerModel, Location} from './DebuggerModel.js';\nimport type {RuntimeModel} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nconst UIStrings = {\n  /**\n  *@description Name of a profile. Placeholder is either a user-supplied name or a number automatically assigned to the profile.\n  *@example {2} PH1\n  */\n  profileD: 'Profile {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/CPUProfilerModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class CPUProfilerModel extends SDKModel<EventTypes> implements ProtocolProxyApi.ProfilerDispatcher {\n  #isRecording: boolean;\n  #nextAnonymousConsoleProfileNumber: number;\n  #anonymousConsoleProfileIdToTitle: Map<string, string>;\n  readonly #profilerAgent: ProtocolProxyApi.ProfilerApi;\n  #preciseCoverageDeltaUpdateCallback:\n      ((arg0: number, arg1: string, arg2: Array<Protocol.Profiler.ScriptCoverage>) => void)|null;\n  readonly #debuggerModelInternal: DebuggerModel;\n  readonly registeredConsoleProfileMessages: ProfileFinishedData[] = [];\n\n  constructor(target: Target) {\n    super(target);\n    this.#isRecording = false;\n    this.#nextAnonymousConsoleProfileNumber = 1;\n    this.#anonymousConsoleProfileIdToTitle = new Map();\n    this.#profilerAgent = target.profilerAgent();\n    this.#preciseCoverageDeltaUpdateCallback = null;\n    target.registerProfilerDispatcher(this);\n    void this.#profilerAgent.invoke_enable();\n    this.#debuggerModelInternal = (target.model(DebuggerModel) as DebuggerModel);\n  }\n\n  runtimeModel(): RuntimeModel {\n    return this.#debuggerModelInternal.runtimeModel();\n  }\n\n  debuggerModel(): DebuggerModel {\n    return this.#debuggerModelInternal;\n  }\n\n  consoleProfileStarted({id, location, title}: Protocol.Profiler.ConsoleProfileStartedEvent): void {\n    if (!title) {\n      title = i18nString(UIStrings.profileD, {PH1: this.#nextAnonymousConsoleProfileNumber++});\n      this.#anonymousConsoleProfileIdToTitle.set(id, title);\n    }\n    const eventData = this.createEventDataFrom(id, location, title);\n    this.dispatchEventToListeners(Events.ConsoleProfileStarted, eventData);\n  }\n\n  consoleProfileFinished({id, location, profile, title}: Protocol.Profiler.ConsoleProfileFinishedEvent): void {\n    if (!title) {\n      title = this.#anonymousConsoleProfileIdToTitle.get(id);\n      this.#anonymousConsoleProfileIdToTitle.delete(id);\n    }\n    const eventData: ProfileFinishedData = {\n      ...this.createEventDataFrom(id, location, title),\n      cpuProfile: profile,\n    };\n    this.registeredConsoleProfileMessages.push(eventData);\n    this.dispatchEventToListeners(Events.ConsoleProfileFinished, eventData);\n  }\n\n  private createEventDataFrom(id: string, scriptLocation: Protocol.Debugger.Location, title?: string): EventData {\n    const debuggerLocation = Location.fromPayload(this.#debuggerModelInternal, scriptLocation);\n    const globalId = this.target().id() + '.' + id;\n    return {\n      id: globalId,\n      scriptLocation: debuggerLocation,\n      title: title || '',\n      cpuProfilerModel: this,\n    };\n  }\n\n  isRecordingProfile(): boolean {\n    return this.#isRecording;\n  }\n\n  startRecording(): Promise<unknown> {\n    this.#isRecording = true;\n    const intervalUs = 100;\n    void this.#profilerAgent.invoke_setSamplingInterval({interval: intervalUs});\n    return this.#profilerAgent.invoke_start();\n  }\n\n  stopRecording(): Promise<Protocol.Profiler.Profile|null> {\n    this.#isRecording = false;\n    return this.#profilerAgent.invoke_stop().then(response => response.profile || null);\n  }\n\n  startPreciseCoverage(\n      jsCoveragePerBlock: boolean,\n      preciseCoverageDeltaUpdateCallback:\n          ((arg0: number, arg1: string, arg2: Array<Protocol.Profiler.ScriptCoverage>) => void)|\n      null): Promise<unknown> {\n    const callCount = false;\n    this.#preciseCoverageDeltaUpdateCallback = preciseCoverageDeltaUpdateCallback;\n    const allowUpdatesTriggeredByBackend = true;\n    return this.#profilerAgent.invoke_startPreciseCoverage(\n        {callCount, detailed: jsCoveragePerBlock, allowTriggeredUpdates: allowUpdatesTriggeredByBackend});\n  }\n\n  async takePreciseCoverage(): Promise<{\n    timestamp: number,\n    coverage: Array<Protocol.Profiler.ScriptCoverage>,\n  }> {\n    const r = await this.#profilerAgent.invoke_takePreciseCoverage();\n    const timestamp = (r && r.timestamp) || 0;\n    const coverage = (r && r.result) || [];\n    return {timestamp, coverage};\n  }\n\n  stopPreciseCoverage(): Promise<unknown> {\n    this.#preciseCoverageDeltaUpdateCallback = null;\n    return this.#profilerAgent.invoke_stopPreciseCoverage();\n  }\n\n  preciseCoverageDeltaUpdate({timestamp, occasion, result}: Protocol.Profiler.PreciseCoverageDeltaUpdateEvent): void {\n    if (this.#preciseCoverageDeltaUpdateCallback) {\n      this.#preciseCoverageDeltaUpdateCallback(timestamp, occasion, result);\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  ConsoleProfileStarted = 'ConsoleProfileStarted',\n  ConsoleProfileFinished = 'ConsoleProfileFinished',\n}\n\nexport type EventTypes = {\n  [Events.ConsoleProfileStarted]: EventData,\n  [Events.ConsoleProfileFinished]: ProfileFinishedData,\n};\n\nSDKModel.register(CPUProfilerModel, {capabilities: Capability.JS, autostart: true});\n\nexport interface EventData {\n  id: string;\n  scriptLocation: Location;\n  title: string;\n  cpuProfilerModel: CPUProfilerModel;\n}\n\nexport interface ProfileFinishedData extends EventData {\n  cpuProfile: Protocol.Profiler.Profile;\n}\n"]}