{"version":3,"file":"ServiceWorkerCacheModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ServiceWorkerCacheModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {NameValue} from './NetworkRequest.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Events as SecurityOriginManagerEvents, SecurityOriginManager} from './SecurityOriginManager.js';\n\nconst UIStrings = {\n  /**\n  *@description Text in Service Worker Cache Model\n  *@example {https://cache} PH1\n  *@example {error message} PH2\n  */\n  serviceworkercacheagentError: '`ServiceWorkerCacheAgent` error deleting cache entry {PH1} in cache: {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ServiceWorkerCacheModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ServiceWorkerCacheModel extends SDKModel<EventTypes> implements ProtocolProxyApi.StorageDispatcher {\n  readonly cacheAgent: ProtocolProxyApi.CacheStorageApi;\n  readonly #storageAgent: ProtocolProxyApi.StorageApi;\n  readonly #securityOriginManager: SecurityOriginManager;\n\n  readonly #cachesInternal = new Map<string, Cache>();\n  readonly #originsUpdated = new Set<string>();\n  readonly #throttler = new Common.Throttler.Throttler(2000);\n  #enabled = false;\n\n  // Used by tests to remove the Throttler timeout.\n  #scheduleAsSoonAsPossible = false;\n\n  /**\n   * Invariant: This #model can only be constructed on a ServiceWorker target.\n   */\n  constructor(target: Target) {\n    super(target);\n    target.registerStorageDispatcher(this);\n\n    this.cacheAgent = target.cacheStorageAgent();\n    this.#storageAgent = target.storageAgent();\n    this.#securityOriginManager = (target.model(SecurityOriginManager) as SecurityOriginManager);\n  }\n\n  enable(): void {\n    if (this.#enabled) {\n      return;\n    }\n\n    this.#securityOriginManager.addEventListener(\n        SecurityOriginManagerEvents.SecurityOriginAdded, this.securityOriginAdded, this);\n    this.#securityOriginManager.addEventListener(\n        SecurityOriginManagerEvents.SecurityOriginRemoved, this.securityOriginRemoved, this);\n\n    for (const securityOrigin of this.#securityOriginManager.securityOrigins()) {\n      this.addOrigin(securityOrigin);\n    }\n    this.#enabled = true;\n  }\n\n  clearForOrigin(origin: string): void {\n    this.removeOrigin(origin);\n    this.addOrigin(origin);\n  }\n\n  refreshCacheNames(): void {\n    for (const cache of this.#cachesInternal.values()) {\n      this.cacheRemoved(cache);\n    }\n    this.#cachesInternal.clear();\n    const securityOrigins = this.#securityOriginManager.securityOrigins();\n    for (const securityOrigin of securityOrigins) {\n      void this.loadCacheNames(securityOrigin);\n    }\n  }\n\n  async deleteCache(cache: Cache): Promise<void> {\n    const response = await this.cacheAgent.invoke_deleteCache({cacheId: cache.cacheId});\n    if (response.getError()) {\n      console.error(`ServiceWorkerCacheAgent error deleting cache ${cache.toString()}: ${response.getError()}`);\n      return;\n    }\n    this.#cachesInternal.delete(cache.cacheId);\n    this.cacheRemoved(cache);\n  }\n\n  async deleteCacheEntry(cache: Cache, request: string): Promise<void> {\n    const response = await this.cacheAgent.invoke_deleteEntry({cacheId: cache.cacheId, request});\n    if (response.getError()) {\n      Common.Console.Console.instance().error(i18nString(\n          UIStrings.serviceworkercacheagentError, {PH1: cache.toString(), PH2: String(response.getError())}));\n      return;\n    }\n  }\n\n  loadCacheData(\n      cache: Cache, skipCount: number, pageSize: number, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): void {\n    void this.requestEntries(cache, skipCount, pageSize, pathFilter, callback);\n  }\n\n  loadAllCacheData(\n      cache: Cache, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): void {\n    void this.requestAllEntries(cache, pathFilter, callback);\n  }\n\n  caches(): Cache[] {\n    const caches = new Array();\n    for (const cache of this.#cachesInternal.values()) {\n      caches.push(cache);\n    }\n    return caches;\n  }\n\n  dispose(): void {\n    for (const cache of this.#cachesInternal.values()) {\n      this.cacheRemoved(cache);\n    }\n    this.#cachesInternal.clear();\n    if (this.#enabled) {\n      this.#securityOriginManager.removeEventListener(\n          SecurityOriginManagerEvents.SecurityOriginAdded, this.securityOriginAdded, this);\n      this.#securityOriginManager.removeEventListener(\n          SecurityOriginManagerEvents.SecurityOriginRemoved, this.securityOriginRemoved, this);\n    }\n  }\n\n  private addOrigin(securityOrigin: string): void {\n    void this.loadCacheNames(securityOrigin);\n    if (this.isValidSecurityOrigin(securityOrigin)) {\n      void this.#storageAgent.invoke_trackCacheStorageForOrigin({origin: securityOrigin});\n    }\n  }\n\n  private removeOrigin(securityOrigin: string): void {\n    for (const [opaqueId, cache] of this.#cachesInternal.entries()) {\n      if (cache.securityOrigin === securityOrigin) {\n        this.#cachesInternal.delete((opaqueId as string));\n        this.cacheRemoved((cache as Cache));\n      }\n    }\n    if (this.isValidSecurityOrigin(securityOrigin)) {\n      void this.#storageAgent.invoke_untrackCacheStorageForOrigin({origin: securityOrigin});\n    }\n  }\n\n  private isValidSecurityOrigin(securityOrigin: string): boolean {\n    const parsedURL = Common.ParsedURL.ParsedURL.fromString(securityOrigin);\n    return parsedURL !== null && parsedURL.scheme.startsWith('http');\n  }\n\n  private async loadCacheNames(securityOrigin: string): Promise<void> {\n    const response = await this.cacheAgent.invoke_requestCacheNames({securityOrigin: securityOrigin});\n    if (response.getError()) {\n      return;\n    }\n    this.updateCacheNames(securityOrigin, response.caches);\n  }\n\n  private updateCacheNames(securityOrigin: string, cachesJson: Protocol.CacheStorage.Cache[]): void {\n    function deleteAndSaveOldCaches(this: ServiceWorkerCacheModel, cache: Cache): void {\n      if (cache.securityOrigin === securityOrigin && !updatingCachesIds.has(cache.cacheId)) {\n        oldCaches.set(cache.cacheId, cache);\n        this.#cachesInternal.delete(cache.cacheId);\n      }\n    }\n\n    const updatingCachesIds = new Set<string>();\n    const newCaches = new Map<string, Cache>();\n    const oldCaches = new Map<string, Cache>();\n\n    for (const cacheJson of cachesJson) {\n      const cache = new Cache(this, cacheJson.securityOrigin, cacheJson.cacheName, cacheJson.cacheId);\n      updatingCachesIds.add(cache.cacheId);\n      if (this.#cachesInternal.has(cache.cacheId)) {\n        continue;\n      }\n      newCaches.set(cache.cacheId, cache);\n      this.#cachesInternal.set(cache.cacheId, cache);\n    }\n    this.#cachesInternal.forEach(deleteAndSaveOldCaches, this);\n    newCaches.forEach(this.cacheAdded, this);\n    oldCaches.forEach(this.cacheRemoved, this);\n  }\n\n  private securityOriginAdded(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.addOrigin(event.data);\n  }\n\n  private securityOriginRemoved(event: Common.EventTarget.EventTargetEvent<string>): void {\n    this.removeOrigin(event.data);\n  }\n\n  private cacheAdded(cache: Cache): void {\n    this.dispatchEventToListeners(Events.CacheAdded, {model: this, cache: cache});\n  }\n\n  private cacheRemoved(cache: Cache): void {\n    this.dispatchEventToListeners(Events.CacheRemoved, {model: this, cache: cache});\n  }\n\n  private async requestEntries(\n      cache: Cache, skipCount: number, pageSize: number, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): Promise<void> {\n    const response =\n        await this.cacheAgent.invoke_requestEntries({cacheId: cache.cacheId, skipCount, pageSize, pathFilter});\n    if (response.getError()) {\n      console.error('ServiceWorkerCacheAgent error while requesting entries: ', response.getError());\n      return;\n    }\n    callback(response.cacheDataEntries, response.returnCount);\n  }\n\n  private async requestAllEntries(\n      cache: Cache, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): Promise<void> {\n    const response = await this.cacheAgent.invoke_requestEntries({cacheId: cache.cacheId, pathFilter});\n    if (response.getError()) {\n      console.error('ServiceWorkerCacheAgent error while requesting entries: ', response.getError());\n      return;\n    }\n    callback(response.cacheDataEntries, response.returnCount);\n  }\n\n  cacheStorageListUpdated({origin}: Protocol.Storage.CacheStorageListUpdatedEvent): void {\n    this.#originsUpdated.add(origin);\n\n    void this.#throttler.schedule(() => {\n      const promises = Array.from(this.#originsUpdated, origin => this.loadCacheNames(origin));\n      this.#originsUpdated.clear();\n      return Promise.all(promises);\n    }, this.#scheduleAsSoonAsPossible);\n  }\n\n  cacheStorageContentUpdated({origin, cacheName}: Protocol.Storage.CacheStorageContentUpdatedEvent): void {\n    this.dispatchEventToListeners(Events.CacheStorageContentUpdated, {origin, cacheName});\n  }\n\n  indexedDBListUpdated(_event: Protocol.Storage.IndexedDBListUpdatedEvent): void {\n  }\n\n  indexedDBContentUpdated(_event: Protocol.Storage.IndexedDBContentUpdatedEvent): void {\n  }\n\n  interestGroupAccessed(_event: Protocol.Storage.InterestGroupAccessedEvent): void {\n  }\n\n  setThrottlerSchedulesAsSoonAsPossibleForTest(): void {\n    this.#scheduleAsSoonAsPossible = true;\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  CacheAdded = 'CacheAdded',\n  CacheRemoved = 'CacheRemoved',\n  CacheStorageContentUpdated = 'CacheStorageContentUpdated',\n}\n\nexport interface CacheEvent {\n  model: ServiceWorkerCacheModel;\n  cache: Cache;\n}\n\nexport interface CacheStorageContentUpdatedEvent {\n  origin: string;\n  cacheName: string;\n}\n\nexport type EventTypes = {\n  [Events.CacheAdded]: CacheEvent,\n  [Events.CacheRemoved]: CacheEvent,\n  [Events.CacheStorageContentUpdated]: CacheStorageContentUpdatedEvent,\n};\n\nexport class Cache {\n  readonly #model: ServiceWorkerCacheModel;\n  securityOrigin: string;\n  cacheName: string;\n  cacheId: Protocol.CacheStorage.CacheId;\n\n  constructor(\n      model: ServiceWorkerCacheModel, securityOrigin: string, cacheName: string,\n      cacheId: Protocol.CacheStorage.CacheId) {\n    this.#model = model;\n    this.securityOrigin = securityOrigin;\n    this.cacheName = cacheName;\n    this.cacheId = cacheId;\n  }\n\n  equals(cache: Cache): boolean {\n    return this.cacheId === cache.cacheId;\n  }\n\n  toString(): string {\n    return this.securityOrigin + this.cacheName;\n  }\n\n  async requestCachedResponse(url: Platform.DevToolsPath.UrlString, requestHeaders: NameValue[]):\n      Promise<Protocol.CacheStorage.CachedResponse|null> {\n    const response = await this.#model.cacheAgent.invoke_requestCachedResponse(\n        {cacheId: this.cacheId, requestURL: url, requestHeaders});\n    if (response.getError()) {\n      return null;\n    }\n    return response.response;\n  }\n}\n\nSDKModel.register(ServiceWorkerCacheModel, {capabilities: Capability.Storage, autostart: false});\n"]}