{"version":3,"file":"SourceMapManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/SourceMapManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\n\nimport type {FrameAssociated} from './FrameAssociated.js';\nimport type {Target} from './Target.js';\nimport {Type} from './Target.js';\nimport {Events as TargetManagerEvents, TargetManager} from './TargetManager.js';\nimport type {SourceMap} from './SourceMap.js';\nimport {TextSourceMap} from './SourceMap.js';\n\nconst UIStrings = {\n  /**\n  *@description Error message when failing to load a source map text\n  *@example {An error occurred} PH1\n  */\n  devtoolsFailedToLoadSourcemapS: 'DevTools failed to load source map: {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/SourceMapManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class SourceMapManager<T extends FrameAssociated> extends Common.ObjectWrapper.ObjectWrapper<EventTypes<T>> {\n  readonly #target: Target;\n  #isEnabled: boolean;\n  readonly #relativeSourceURL: Map<T, Platform.DevToolsPath.UrlString>;\n  readonly #relativeSourceMapURL: Map<T, Platform.DevToolsPath.UrlString>;\n  #resolvedSourceMapId: Map<T, string>;\n  readonly #sourceMapById: Map<string, SourceMap>;\n  #sourceMapIdToLoadingClients: Platform.MapUtilities.Multimap<string, T>;\n  #sourceMapIdToClients: Platform.MapUtilities.Multimap<string, T>;\n\n  constructor(target: Target) {\n    super();\n\n    this.#target = target;\n    this.#isEnabled = true;\n\n    this.#relativeSourceURL = new Map();\n    this.#relativeSourceMapURL = new Map();\n    this.#resolvedSourceMapId = new Map();\n\n    this.#sourceMapById = new Map();\n    this.#sourceMapIdToLoadingClients = new Platform.MapUtilities.Multimap();\n    this.#sourceMapIdToClients = new Platform.MapUtilities.Multimap();\n\n    TargetManager.instance().addEventListener(TargetManagerEvents.InspectedURLChanged, this.inspectedURLChanged, this);\n  }\n\n  setEnabled(isEnabled: boolean): void {\n    if (isEnabled === this.#isEnabled) {\n      return;\n    }\n    this.#isEnabled = isEnabled;\n    // We need this copy, because `this.#resolvedSourceMapId` is getting modified\n    // in the loop body and trying to iterate over it at the same time leads to\n    // an infinite loop.\n    const clients = [...this.#resolvedSourceMapId.keys()];\n    for (const client of clients) {\n      const relativeSourceURL = this.#relativeSourceURL.get(client);\n      const relativeSourceMapURL = this.#relativeSourceMapURL.get(client);\n      this.detachSourceMap(client);\n      this.attachSourceMap(client, relativeSourceURL, relativeSourceMapURL);\n    }\n  }\n\n  private getBaseUrl(): Platform.DevToolsPath.UrlString {\n    let target: Target|null = this.#target;\n    while (target && target.type() !== Type.Frame) {\n      target = target.parentTarget();\n    }\n    return target?.inspectedURL() ?? Platform.DevToolsPath.EmptyUrlString;\n  }\n\n  private inspectedURLChanged(event: Common.EventTarget.EventTargetEvent<Target>): void {\n    if (event.data !== this.#target) {\n      return;\n    }\n\n    // We need this copy, because `this.#resolvedSourceMapId` is getting modified\n    // in the loop body and trying to iterate over it at the same time leads to\n    // an infinite loop.\n    const prevSourceMapIds = new Map(this.#resolvedSourceMapId);\n    for (const [client, prevSourceMapId] of prevSourceMapIds) {\n      const relativeSourceURL = this.#relativeSourceURL.get(client);\n      const relativeSourceMapURL = this.#relativeSourceMapURL.get(client);\n      if (relativeSourceURL === undefined || relativeSourceMapURL === undefined) {\n        continue;\n      }\n      const resolvedUrls = this.resolveRelativeURLs(relativeSourceURL, relativeSourceMapURL);\n      if (resolvedUrls !== null && prevSourceMapId !== resolvedUrls.sourceMapId) {\n        this.detachSourceMap(client);\n        this.attachSourceMap(client, relativeSourceURL, relativeSourceMapURL);\n      }\n    }\n  }\n\n  sourceMapForClient(client: T): SourceMap|null {\n    const sourceMapId = this.#resolvedSourceMapId.get(client);\n    if (!sourceMapId) {\n      return null;\n    }\n    return this.#sourceMapById.get(sourceMapId) || null;\n  }\n\n  // This method actively awaits the source map, if still loading.\n  sourceMapForClientPromise(client: T): Promise<SourceMap|null> {\n    const sourceMapId = this.#resolvedSourceMapId.get(client);\n    if (!sourceMapId) {\n      // The source map has detached or none exists for this client.\n      return Promise.resolve(null);\n    }\n\n    const sourceMap = this.sourceMapForClient(client);\n    if (sourceMap) {\n      return Promise.resolve(sourceMap);\n    }\n\n    if (!this.#sourceMapIdToLoadingClients.has(sourceMapId)) {\n      // The source map failed to attach.\n      return Promise.resolve(null);\n    }\n\n    return new Promise(resolve => {\n      const sourceMapAddedDescriptor = this.addEventListener(Events.SourceMapAttached, event => {\n        if (event.data.client !== client) {\n          return;\n        }\n        this.removeEventListener(Events.SourceMapAttached, sourceMapAddedDescriptor.listener);\n        this.removeEventListener(Events.SourceMapFailedToAttach, sourceMapFailedDescriptor.listener);\n        resolve(event.data.sourceMap);\n      });\n      const sourceMapFailedDescriptor = this.addEventListener(Events.SourceMapFailedToAttach, event => {\n        if (event.data.client !== client) {\n          return;\n        }\n        this.removeEventListener(Events.SourceMapAttached, sourceMapAddedDescriptor.listener);\n        this.removeEventListener(Events.SourceMapFailedToAttach, sourceMapFailedDescriptor.listener);\n        resolve(null);\n      });\n    });\n  }\n\n  clientsForSourceMap(sourceMap: SourceMap): T[] {\n    const sourceMapId = this.getSourceMapId(sourceMap.compiledURL(), sourceMap.url());\n    if (this.#sourceMapIdToClients.has(sourceMapId)) {\n      return [...this.#sourceMapIdToClients.get(sourceMapId)];\n    }\n    return [...this.#sourceMapIdToLoadingClients.get(sourceMapId)];\n  }\n\n  private getSourceMapId(sourceURL: Platform.DevToolsPath.UrlString, sourceMapURL: Platform.DevToolsPath.UrlString):\n      string {\n    return `${sourceURL}:${sourceMapURL}`;\n  }\n\n  private resolveRelativeURLs(\n      sourceURL: Platform.DevToolsPath.UrlString, sourceMapURL: Platform.DevToolsPath.UrlString): {\n    sourceURL: Platform.DevToolsPath.UrlString,\n    sourceMapURL: Platform.DevToolsPath.UrlString,\n    sourceMapId: string,\n  }|null {\n    // |#sourceURL| can be a random string, but is generally an absolute path.\n    // Complete it to inspected page url for relative links.\n    const resolvedSourceURL = Common.ParsedURL.ParsedURL.completeURL(this.getBaseUrl(), sourceURL);\n    if (!resolvedSourceURL) {\n      return null;\n    }\n    const resolvedSourceMapURL = Common.ParsedURL.ParsedURL.completeURL(resolvedSourceURL, sourceMapURL);\n    if (!resolvedSourceMapURL) {\n      return null;\n    }\n    return {\n      sourceURL: resolvedSourceURL,\n      sourceMapURL: resolvedSourceMapURL,\n      sourceMapId: this.getSourceMapId(resolvedSourceURL, resolvedSourceMapURL),\n    };\n  }\n\n  attachSourceMap(\n      client: T, relativeSourceURL: Platform.DevToolsPath.UrlString|undefined,\n      relativeSourceMapURL: Platform.DevToolsPath.UrlString|undefined): void {\n    // TODO(chromium:1011811): Strengthen the type to obsolte the undefined check once core/sdk/ is fully typescriptified.\n    if (relativeSourceURL === undefined || !relativeSourceMapURL) {\n      return;\n    }\n    console.assert(!this.#resolvedSourceMapId.has(client), 'SourceMap is already attached to client');\n    const resolvedURLs = this.resolveRelativeURLs(relativeSourceURL, relativeSourceMapURL);\n    if (!resolvedURLs) {\n      return;\n    }\n    this.#relativeSourceURL.set(client, relativeSourceURL);\n    this.#relativeSourceMapURL.set(client, relativeSourceMapURL);\n\n    const {sourceURL, sourceMapURL, sourceMapId} = resolvedURLs;\n    this.#resolvedSourceMapId.set(client, sourceMapId);\n\n    if (!this.#isEnabled) {\n      return;\n    }\n\n    this.dispatchEventToListeners(Events.SourceMapWillAttach, {client});\n\n    if (this.#sourceMapById.has(sourceMapId)) {\n      attach.call(this, sourceMapId, client);\n      return;\n    }\n    if (!this.#sourceMapIdToLoadingClients.has(sourceMapId)) {\n      void TextSourceMap.load(sourceMapURL, sourceURL, client.createPageResourceLoadInitiator())\n          .catch(error => {\n            Common.Console.Console.instance().warn(\n                i18nString(UIStrings.devtoolsFailedToLoadSourcemapS, {PH1: error.message}));\n            return null;\n          })\n          .then(onSourceMap.bind(this, sourceMapId));\n    }\n    this.#sourceMapIdToLoadingClients.set(sourceMapId, client);\n\n    function onSourceMap(this: SourceMapManager<T>, sourceMapId: string, sourceMap: SourceMap|null): void {\n      this.sourceMapLoadedForTest();\n      const clients = this.#sourceMapIdToLoadingClients.get(sourceMapId);\n      this.#sourceMapIdToLoadingClients.deleteAll(sourceMapId);\n      if (!clients.size) {\n        return;\n      }\n      if (!sourceMap) {\n        for (const client of clients) {\n          this.dispatchEventToListeners(Events.SourceMapFailedToAttach, {client});\n        }\n        return;\n      }\n      this.#sourceMapById.set(sourceMapId, sourceMap);\n      for (const client of clients) {\n        attach.call(this, sourceMapId, client);\n      }\n    }\n\n    function attach(this: SourceMapManager<T>, sourceMapId: string, client: T): void {\n      this.#sourceMapIdToClients.set(sourceMapId, client);\n      const sourceMap = this.#sourceMapById.get(sourceMapId) as SourceMap;\n      this.dispatchEventToListeners(Events.SourceMapAttached, {client, sourceMap});\n    }\n  }\n\n  detachSourceMap(client: T): void {\n    const sourceMapId = this.#resolvedSourceMapId.get(client);\n    this.#relativeSourceURL.delete(client);\n    this.#relativeSourceMapURL.delete(client);\n    this.#resolvedSourceMapId.delete(client);\n\n    if (!sourceMapId) {\n      return;\n    }\n    if (!this.#sourceMapIdToClients.hasValue(sourceMapId, client)) {\n      if (this.#sourceMapIdToLoadingClients.delete(sourceMapId, client)) {\n        this.dispatchEventToListeners(Events.SourceMapFailedToAttach, {client});\n      }\n      return;\n    }\n    this.#sourceMapIdToClients.delete(sourceMapId, client);\n    const sourceMap = this.#sourceMapById.get(sourceMapId);\n    if (!sourceMap) {\n      return;\n    }\n    if (!this.#sourceMapIdToClients.has(sourceMapId)) {\n      this.#sourceMapById.delete(sourceMapId);\n    }\n    this.dispatchEventToListeners(Events.SourceMapDetached, {client, sourceMap});\n  }\n\n  private sourceMapLoadedForTest(): void {\n  }\n\n  dispose(): void {\n    TargetManager.instance().removeEventListener(\n        TargetManagerEvents.InspectedURLChanged, this.inspectedURLChanged, this);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  SourceMapWillAttach = 'SourceMapWillAttach',\n  SourceMapFailedToAttach = 'SourceMapFailedToAttach',\n  SourceMapAttached = 'SourceMapAttached',\n  SourceMapDetached = 'SourceMapDetached',\n}\n\nexport type EventTypes<T extends FrameAssociated> = {\n  [Events.SourceMapWillAttach]: {client: T},\n  [Events.SourceMapFailedToAttach]: {client: T},\n  [Events.SourceMapAttached]: {client: T, sourceMap: SourceMap},\n  [Events.SourceMapDetached]: {client: T, sourceMap: SourceMap},\n};\n"]}