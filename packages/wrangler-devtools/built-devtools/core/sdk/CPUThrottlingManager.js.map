{"version":3,"file":"CPUThrottlingManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CPUThrottlingManager.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AAEtD,OAAO,EAAC,cAAc,EAAC,MAAM,qBAAqB,CAAC;AAEnD,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;AAEjD,IAAI,yBAA+C,CAAC;AAEpD,MAAM,OAAO,oBAAqB,SAAQ,MAAM,CAAC,aAAa,CAAC,aAAyB;IAEtF,0BAA0B,CAAS;IACnC,4BAA4B,CAAU;IACtC,yBAAyB,CAAuB;IAEhD;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,0BAA0B,GAAG,kBAAkB,CAAC,YAAY,CAAC;QAClE,aAAa,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAC/D,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAAiC,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC/D,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,yBAAyB,IAAI,QAAQ,EAAE;YAC1C,yBAAyB,GAAG,IAAI,oBAAoB,EAAE,CAAC;SACxD;QAED,OAAO,yBAAyB,CAAC;IACnC,CAAC;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,0BAA0B,CAAC;IACzC,CAAC;IAED,oBAAoB,CAAC,IAAY;QAC/B,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC;QACvC,KAAK,MAAM,cAAc,IAAI,aAAa,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;YAC5E,KAAK,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;SAC3E;QACD,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACrF,CAAC;IAED,sBAAsB,CAAC,WAAmB;QACxC,IAAI,CAAC,4BAA4B,GAAG,WAAW,CAAC;QAChD,KAAK,MAAM,cAAc,IAAI,aAAa,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;YAC5E,KAAK,cAAc,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;SACzD;QACD,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,0BAA0B,EAAE,IAAI,CAAC,4BAA4B,CAAC,CAAC;IACtG,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,MAAM,MAAM,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;QACrD,MAAM,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC;QAExD,0EAA0E;QAC1E,IAAI,CAAC,MAAM,EAAE;YACX,IAAI,gBAAgB,EAAE;gBACpB,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;oBACrB,IAAI,CAAC,yBAAyB,GAAG,CAAC,MAAc,EAAQ,EAAE;wBACxD,CAAC,CAAC,MAAM,CAAC,CAAC;wBACV,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBAC3B,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;aACJ;YACD,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;gBACrB,IAAI,CAAC,yBAAyB,GAAG,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;SACJ;QAED,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC,eAAe,CAC1D,EAAC,UAAU,EAAE,+BAA+B,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/G,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;QACpC,IAAI,KAAK,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB;QACD,MAAM,EAAC,MAAM,EAAE,gBAAgB,EAAC,GAAG,UAAU,CAAC;QAC9C,IAAI,gBAAgB,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SACxC;QACD,OAAO,MAAM,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,UAAU,CAAC,cAA8B;QACvC,IAAI,IAAI,CAAC,0BAA0B,KAAK,kBAAkB,CAAC,YAAY,EAAE;YACvE,KAAK,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;SAC3E;QACD,IAAI,IAAI,CAAC,4BAA4B,KAAK,SAAS,EAAE;YACnD,KAAK,cAAc,CAAC,sBAAsB,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;SAC/E;QAED,0FAA0F;QAC1F,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAClC,MAAM,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC;YACxD,IAAI,CAAC,yBAAyB,GAAG,SAAS,CAAC;YAC3C,KAAK,IAAI,CAAC,sBAAsB,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC3D;IACH,CAAC;IAED,YAAY,CAAC,eAA+B;QAC1C,6DAA6D;IAC/D,CAAC;CACF;AAED,wDAAwD;AACxD,+CAA+C;AAC/C,MAAM,CAAN,IAAY,MAGX;AAHD,WAAY,MAAM;IAChB,qCAA2B,CAAA;IAC3B,mEAAyD,CAAA;AAC3D,CAAC,EAHW,MAAM,KAAN,MAAM,QAGjB;AAOD,MAAM,UAAU,iBAAiB;IAC/B,OAAO,oBAAoB,CAAC,QAAQ,EAAE,CAAC;AACzC,CAAC;AAED,wDAAwD;AACxD,+CAA+C;AAC/C,MAAM,CAAN,IAAY,kBAIX;AAJD,WAAY,kBAAkB;IAC5B,2EAAgB,CAAA;IAChB,6EAAiB,CAAA;IACjB,2EAAgB,CAAA;AAClB,CAAC,EAJW,kBAAkB,KAAlB,kBAAkB,QAI7B","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nimport {EmulationModel} from './EmulationModel.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nlet throttlingManagerInstance: CPUThrottlingManager;\n\nexport class CPUThrottlingManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDKModelObserver<EmulationModel> {\n  #cpuThrottlingRateInternal: number;\n  #hardwareConcurrencyInternal?: number;\n  #pendingMainTargetPromise?: (r: number) => void;\n\n  private constructor() {\n    super();\n    this.#cpuThrottlingRateInternal = CPUThrottlingRates.NoThrottling;\n    TargetManager.instance().observeModels(EmulationModel, this);\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): CPUThrottlingManager {\n    const {forceNew} = opts;\n    if (!throttlingManagerInstance || forceNew) {\n      throttlingManagerInstance = new CPUThrottlingManager();\n    }\n\n    return throttlingManagerInstance;\n  }\n\n  cpuThrottlingRate(): number {\n    return this.#cpuThrottlingRateInternal;\n  }\n\n  setCPUThrottlingRate(rate: number): void {\n    this.#cpuThrottlingRateInternal = rate;\n    for (const emulationModel of TargetManager.instance().models(EmulationModel)) {\n      void emulationModel.setCPUThrottlingRate(this.#cpuThrottlingRateInternal);\n    }\n    this.dispatchEventToListeners(Events.RateChanged, this.#cpuThrottlingRateInternal);\n  }\n\n  setHardwareConcurrency(concurrency: number): void {\n    this.#hardwareConcurrencyInternal = concurrency;\n    for (const emulationModel of TargetManager.instance().models(EmulationModel)) {\n      void emulationModel.setHardwareConcurrency(concurrency);\n    }\n    this.dispatchEventToListeners(Events.HardwareConcurrencyChanged, this.#hardwareConcurrencyInternal);\n  }\n\n  async getHardwareConcurrency(): Promise<number> {\n    const target = TargetManager.instance().mainTarget();\n    const existingCallback = this.#pendingMainTargetPromise;\n\n    // If the main target hasn't attached yet, block callers until it appears.\n    if (!target) {\n      if (existingCallback) {\n        return new Promise(r => {\n          this.#pendingMainTargetPromise = (result: number): void => {\n            r(result);\n            existingCallback(result);\n          };\n        });\n      }\n      return new Promise(r => {\n        this.#pendingMainTargetPromise = r;\n      });\n    }\n\n    const evalResult = await target.runtimeAgent().invoke_evaluate(\n        {expression: 'navigator.hardwareConcurrency', returnByValue: true, silent: true, throwOnSideEffect: true});\n    const error = evalResult.getError();\n    if (error) {\n      throw new Error(error);\n    }\n    const {result, exceptionDetails} = evalResult;\n    if (exceptionDetails) {\n      throw new Error(exceptionDetails.text);\n    }\n    return result.value;\n  }\n\n  modelAdded(emulationModel: EmulationModel): void {\n    if (this.#cpuThrottlingRateInternal !== CPUThrottlingRates.NoThrottling) {\n      void emulationModel.setCPUThrottlingRate(this.#cpuThrottlingRateInternal);\n    }\n    if (this.#hardwareConcurrencyInternal !== undefined) {\n      void emulationModel.setHardwareConcurrency(this.#hardwareConcurrencyInternal);\n    }\n\n    // If there are any callers blocked on a getHardwareConcurrency call, let's wake them now.\n    if (this.#pendingMainTargetPromise) {\n      const existingCallback = this.#pendingMainTargetPromise;\n      this.#pendingMainTargetPromise = undefined;\n      void this.getHardwareConcurrency().then(existingCallback);\n    }\n  }\n\n  modelRemoved(_emulationModel: EmulationModel): void {\n    // Implemented as a requirement for being a SDKModelObserver.\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  RateChanged = 'RateChanged',\n  HardwareConcurrencyChanged = 'HardwareConcurrencyChanged',\n}\n\nexport type EventTypes = {\n  [Events.RateChanged]: number,\n  [Events.HardwareConcurrencyChanged]: number,\n};\n\nexport function throttlingManager(): CPUThrottlingManager {\n  return CPUThrottlingManager.instance();\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum CPUThrottlingRates {\n  NoThrottling = 1,\n  MidTierMobile = 4,\n  LowEndMobile = 6,\n}\n"]}