{"version":3,"file":"CSSContainerQuery.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSContainerQuery.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {CSSModel} from './CSSModel.js';\nimport {CSSQuery} from './CSSQuery.js';\nimport type {DOMNode} from './DOMModel.js';\n\nexport class CSSContainerQuery extends CSSQuery {\n  name?: string;\n\n  static parseContainerQueriesPayload(cssModel: CSSModel, payload: Protocol.CSS.CSSContainerQuery[]):\n      CSSContainerQuery[] {\n    return payload.map(cq => new CSSContainerQuery(cssModel, cq));\n  }\n\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSContainerQuery) {\n    super(cssModel);\n    this.reinitialize(payload);\n  }\n\n  reinitialize(payload: Protocol.CSS.CSSContainerQuery): void {\n    this.text = payload.text;\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n    this.styleSheetId = payload.styleSheetId;\n    this.name = payload.name;\n  }\n\n  active(): boolean {\n    return true;\n  }\n\n  async getContainerForNode(nodeId: Protocol.DOM.NodeId): Promise<CSSContainerQueryContainer|undefined> {\n    const containerNode = await this.cssModel.domModel().getContainerForNode(nodeId, this.name);\n    if (!containerNode) {\n      return;\n    }\n    return new CSSContainerQueryContainer(containerNode);\n  }\n}\n\nexport class CSSContainerQueryContainer {\n  readonly containerNode: DOMNode;\n\n  constructor(containerNode: DOMNode) {\n    this.containerNode = containerNode;\n  }\n\n  async getContainerSizeDetails(): Promise<ContainerQueriedSizeDetails|undefined> {\n    const styles = await this.containerNode.domModel().cssModel().getComputedStyle(this.containerNode.id);\n    if (!styles) {\n      return;\n    }\n    const containerType = styles.get('container-type');\n    const contain = styles.get('contain');\n    const writingMode = styles.get('writing-mode');\n    if (!containerType || !contain || !writingMode) {\n      return;\n    }\n\n    // The final queried axes are the union of both properties.\n    const queryAxis = getQueryAxis(`${containerType} ${contain}`);\n    const physicalAxis = getPhysicalAxisFromQueryAxis(queryAxis, writingMode);\n    let width, height;\n    if (physicalAxis === PhysicalAxis.Both || physicalAxis === PhysicalAxis.Horizontal) {\n      width = styles.get('width');\n    }\n    if (physicalAxis === PhysicalAxis.Both || physicalAxis === PhysicalAxis.Vertical) {\n      height = styles.get('height');\n    }\n\n    return {\n      queryAxis,\n      physicalAxis,\n      width,\n      height,\n    };\n  }\n}\n\nexport const getQueryAxis = (propertyValue: string): QueryAxis => {\n  const segments = propertyValue.split(' ');\n  let isInline = false;\n  let isBlock = false;\n  for (const segment of segments) {\n    if (segment === 'size') {\n      return QueryAxis.Both;\n    }\n    isInline = isInline || segment === 'inline-size';\n    isBlock = isBlock || segment === 'block-size';\n  }\n\n  if (isInline && isBlock) {\n    return QueryAxis.Both;\n  }\n  if (isInline) {\n    return QueryAxis.Inline;\n  }\n  if (isBlock) {\n    return QueryAxis.Block;\n  }\n\n  return QueryAxis.None;\n};\n\nexport const getPhysicalAxisFromQueryAxis = (queryAxis: QueryAxis, writingMode: string): PhysicalAxis => {\n  const isVerticalWritingMode = writingMode.startsWith('vertical');\n  switch (queryAxis) {\n    case QueryAxis.None:\n      return PhysicalAxis.None;\n    case QueryAxis.Both:\n      return PhysicalAxis.Both;\n    case QueryAxis.Inline:\n      return isVerticalWritingMode ? PhysicalAxis.Vertical : PhysicalAxis.Horizontal;\n    case QueryAxis.Block:\n      return isVerticalWritingMode ? PhysicalAxis.Horizontal : PhysicalAxis.Vertical;\n  }\n};\n\nexport interface ContainerQueriedSizeDetails {\n  queryAxis: QueryAxis;\n  physicalAxis: PhysicalAxis;\n  width?: string;\n  height?: string;\n}\n\nexport const enum QueryAxis {\n  None = '',\n  Inline = 'inline-size',\n  Block = 'block-size',\n  Both = 'size',\n}\n\nexport const enum PhysicalAxis {\n  None = '',\n  Horizontal = 'Horizontal',\n  Vertical = 'Vertical',\n  Both = 'Both',\n}\n"]}