{"version":3,"file":"FrameManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/FrameManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {Resource} from './Resource.js';\nimport type {ResourceTreeFrame} from './ResourceTreeModel.js';\nimport {Events as ResourceTreeModelEvents, ResourceTreeModel} from './ResourceTreeModel.js';\nimport type {Target} from './Target.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nlet frameManagerInstance: FrameManager|null = null;\n\n/**\n * The FrameManager is a central storage for all #frames. It collects #frames from all\n * ResourceTreeModel-instances (one per target), so that #frames can be found by id\n * without needing to know their target.\n */\nexport class FrameManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDKModelObserver<ResourceTreeModel> {\n  readonly #eventListeners: WeakMap<ResourceTreeModel, Common.EventTarget.EventDescriptor[]>;\n  #frames: Map<string, {\n    frame: ResourceTreeFrame,\n    count: number,\n  }>;\n  readonly #framesForTarget: Map<Protocol.Target.TargetID|'main', Set<Protocol.Page.FrameId>>;\n  #topFrame: ResourceTreeFrame|null;\n  #transferringFramesDataCache: Map<string, {\n    creationStackTrace?: Protocol.Runtime.StackTrace,\n    creationStackTraceTarget?: Target,\n    adScriptId?: Protocol.Runtime.ScriptId,\n    debuggerId?: Protocol.Runtime.UniqueDebuggerId,\n  }>;\n  #awaitedFrames: Map<string, {notInTarget?: Target, resolve: (frame: ResourceTreeFrame) => void}[]> = new Map();\n\n  constructor() {\n    super();\n    this.#eventListeners = new WeakMap();\n    TargetManager.instance().observeModels(ResourceTreeModel, this);\n\n    // Maps frameIds to #frames and a count of how many ResourceTreeModels contain this frame.\n    // (OOPIFs are usually first attached to a new target and then detached from their old target,\n    // therefore being contained in 2 models for a short period of time.)\n    this.#frames = new Map();\n\n    // Maps targetIds to a set of frameIds.\n    this.#framesForTarget = new Map();\n\n    this.#topFrame = null;\n    this.#transferringFramesDataCache = new Map();\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): FrameManager {\n    if (!frameManagerInstance || forceNew) {\n      frameManagerInstance = new FrameManager();\n    }\n    return frameManagerInstance;\n  }\n\n  modelAdded(resourceTreeModel: ResourceTreeModel): void {\n    const addListener = resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameAdded, this.frameAdded, this);\n    const detachListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameDetached, this.frameDetached, this);\n    const navigatedListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.FrameNavigated, this.frameNavigated, this);\n    const resourceAddedListener =\n        resourceTreeModel.addEventListener(ResourceTreeModelEvents.ResourceAdded, this.resourceAdded, this);\n    this.#eventListeners.set(\n        resourceTreeModel, [addListener, detachListener, navigatedListener, resourceAddedListener]);\n    this.#framesForTarget.set(resourceTreeModel.target().id(), new Set());\n  }\n\n  modelRemoved(resourceTreeModel: ResourceTreeModel): void {\n    const listeners = this.#eventListeners.get(resourceTreeModel);\n    if (listeners) {\n      Common.EventTarget.removeEventListeners(listeners);\n    }\n\n    // Iterate over this model's #frames and decrease their count or remove them.\n    // (The ResourceTreeModel does not send FrameDetached events when a model\n    // is removed.)\n    const frameSet = this.#framesForTarget.get(resourceTreeModel.target().id());\n    if (frameSet) {\n      for (const frameId of frameSet) {\n        this.decreaseOrRemoveFrame(frameId);\n      }\n    }\n    this.#framesForTarget.delete(resourceTreeModel.target().id());\n  }\n\n  private frameAdded(event: Common.EventTarget.EventTargetEvent<ResourceTreeFrame>): void {\n    const frame = event.data;\n    const frameData = this.#frames.get(frame.id);\n    // If the frame is already in the map, increase its count, otherwise add it to the map.\n    if (frameData) {\n      // In order to not lose the following attributes of a frame during\n      // an OOPIF transfer we need to copy them to the new frame\n      frame.setCreationStackTrace(frameData.frame.getCreationStackTraceData());\n      frame.setAdScriptId(frameData.frame.getAdScriptId());\n      frame.setDebuggerId(frameData.frame.getDebuggerId());\n      this.#frames.set(frame.id, {frame, count: frameData.count + 1});\n    } else {\n      // If the transferring frame's detached event is received before its frame added\n      // event in the new target, the frame's cached attributes are reassigned.\n      const cachedFrameAttributes = this.#transferringFramesDataCache.get(frame.id);\n      if (cachedFrameAttributes?.creationStackTrace && cachedFrameAttributes?.creationStackTraceTarget) {\n        frame.setCreationStackTrace({\n          creationStackTrace: cachedFrameAttributes.creationStackTrace,\n          creationStackTraceTarget: cachedFrameAttributes.creationStackTraceTarget,\n        });\n      }\n      if (cachedFrameAttributes?.adScriptId) {\n        frame.setAdScriptId(cachedFrameAttributes.adScriptId);\n      }\n      if (cachedFrameAttributes?.debuggerId) {\n        frame.setDebuggerId(cachedFrameAttributes.debuggerId);\n      }\n      this.#frames.set(frame.id, {frame, count: 1});\n      this.#transferringFramesDataCache.delete(frame.id);\n    }\n    this.resetTopFrame();\n\n    // Add the frameId to the the targetId's set of frameIds.\n    const frameSet = this.#framesForTarget.get(frame.resourceTreeModel().target().id());\n    if (frameSet) {\n      frameSet.add(frame.id);\n    }\n\n    this.dispatchEventToListeners(Events.FrameAddedToTarget, {frame});\n    this.resolveAwaitedFrame(frame);\n  }\n\n  private frameDetached(event: Common.EventTarget.EventTargetEvent<{frame: ResourceTreeFrame, isSwap: boolean}>): void {\n    const {frame, isSwap} = event.data;\n    // Decrease the frame's count or remove it entirely from the map.\n    this.decreaseOrRemoveFrame(frame.id);\n\n    // If the transferring frame's detached event is received before its frame\n    // added event in the new target, we persist some attributes of the frame here\n    // so that later on the frame added event in the new target they can be reassigned.\n    if (isSwap && !this.#frames.get(frame.id)) {\n      const traceData = frame.getCreationStackTraceData();\n      const adScriptId = frame.getAdScriptId();\n      const debuggerId = frame.getDebuggerId();\n      const cachedFrameAttributes = {\n        ...(traceData.creationStackTrace && {creationStackTrace: traceData.creationStackTrace}),\n        ...(traceData.creationStackTrace && {creationStackTraceTarget: traceData.creationStackTraceTarget}),\n        ...(adScriptId && {adScriptId}),\n        ...(debuggerId && {debuggerId}),\n      };\n      this.#transferringFramesDataCache.set(frame.id, cachedFrameAttributes);\n    }\n\n    // Remove the frameId from the target's set of frameIds.\n    const frameSet = this.#framesForTarget.get(frame.resourceTreeModel().target().id());\n    if (frameSet) {\n      frameSet.delete(frame.id);\n    }\n  }\n\n  private frameNavigated(event: Common.EventTarget.EventTargetEvent<ResourceTreeFrame>): void {\n    const frame = event.data;\n    this.dispatchEventToListeners(Events.FrameNavigated, {frame});\n    if (frame.isTopFrame()) {\n      this.dispatchEventToListeners(Events.TopFrameNavigated, {frame});\n    }\n  }\n\n  private resourceAdded(event: Common.EventTarget.EventTargetEvent<Resource>): void {\n    this.dispatchEventToListeners(Events.ResourceAdded, {resource: event.data});\n  }\n\n  private decreaseOrRemoveFrame(frameId: Protocol.Page.FrameId): void {\n    const frameData = this.#frames.get(frameId);\n    if (frameData) {\n      if (frameData.count === 1) {\n        this.#frames.delete(frameId);\n        this.resetTopFrame();\n        this.dispatchEventToListeners(Events.FrameRemoved, {frameId});\n      } else {\n        frameData.count--;\n      }\n    }\n  }\n\n  /**\n   * Looks for the top frame in `#frames` and sets `#topFrame` accordingly.\n   *\n   * Important: This method needs to be called everytime `#frames` is updated.\n   */\n  private resetTopFrame(): void {\n    const topFrames = this.getAllFrames().filter(frame => frame.isTopFrame());\n    this.#topFrame = topFrames.length > 0 ? topFrames[0] : null;\n  }\n\n  /**\n   * Returns the ResourceTreeFrame with a given frameId.\n   * When a frame is being detached a new ResourceTreeFrame but with the same\n   * frameId is created. Consequently getFrame() will return a different\n   * ResourceTreeFrame after detachment. Callers of getFrame() should therefore\n   * immediately use the function return value and not store it for later use.\n   */\n  getFrame(frameId: Protocol.Page.FrameId): ResourceTreeFrame|null {\n    const frameData = this.#frames.get(frameId);\n    if (frameData) {\n      return frameData.frame;\n    }\n    return null;\n  }\n\n  getAllFrames(): ResourceTreeFrame[] {\n    return Array.from(this.#frames.values(), frameData => frameData.frame);\n  }\n\n  getTopFrame(): ResourceTreeFrame|null {\n    return this.#topFrame;\n  }\n\n  async getOrWaitForFrame(frameId: Protocol.Page.FrameId, notInTarget?: Target): Promise<ResourceTreeFrame> {\n    const frame = this.getFrame(frameId);\n    if (frame && (!notInTarget || notInTarget !== frame.resourceTreeModel().target())) {\n      return frame;\n    }\n    return new Promise<ResourceTreeFrame>(resolve => {\n      const waiting = this.#awaitedFrames.get(frameId);\n      if (waiting) {\n        waiting.push({notInTarget, resolve});\n      } else {\n        this.#awaitedFrames.set(frameId, [{notInTarget, resolve}]);\n      }\n    });\n  }\n\n  private resolveAwaitedFrame(frame: ResourceTreeFrame): void {\n    const waiting = this.#awaitedFrames.get(frame.id);\n    if (!waiting) {\n      return;\n    }\n    const newWaiting = waiting.filter(({notInTarget, resolve}) => {\n      if (!notInTarget || notInTarget !== frame.resourceTreeModel().target()) {\n        resolve(frame);\n        return false;\n      }\n      return true;\n    });\n    if (newWaiting.length > 0) {\n      this.#awaitedFrames.set(frame.id, newWaiting);\n    } else {\n      this.#awaitedFrames.delete(frame.id);\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  // The FrameAddedToTarget event is sent whenever a frame is added to a target.\n  // This means that for OOPIFs it is sent twice: once when it's added to a\n  // parent target and a second time when it's added to its own target.\n  FrameAddedToTarget = 'FrameAddedToTarget',\n  FrameNavigated = 'FrameNavigated',\n  // The FrameRemoved event is only sent when a frame has been detached from\n  // all targets.\n  FrameRemoved = 'FrameRemoved',\n  ResourceAdded = 'ResourceAdded',\n  TopFrameNavigated = 'TopFrameNavigated',\n}\n\nexport type EventTypes = {\n  [Events.FrameAddedToTarget]: {frame: ResourceTreeFrame},\n  [Events.FrameNavigated]: {frame: ResourceTreeFrame},\n  [Events.FrameRemoved]: {frameId: Protocol.Page.FrameId},\n  [Events.ResourceAdded]: {resource: Resource},\n  [Events.TopFrameNavigated]: {frame: ResourceTreeFrame},\n};\n"]}