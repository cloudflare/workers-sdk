{"version":3,"file":"StorageKeyManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/StorageKeyManager.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,UAAU,EAAC,MAAM,aAAa,CAAC;AACvC,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEvC,MAAM,OAAO,iBAAkB,SAAQ,QAAoB;IACzD,uBAAuB,CAAS;IAChC,oBAAoB,CAAc;IAClC,YAAY,MAAc;QACxB,KAAK,CAAC,MAAM,CAAC,CAAC;QAEd,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,EAAE,CAAC;IACxC,CAAC;IAED,iBAAiB,CAAC,WAAwB;QACxC,MAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACjD,IAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC;QAExC,KAAK,MAAM,UAAU,IAAI,cAAc,EAAE;YACvC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBAC9C,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;aACrE;SACF;QAED,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAClD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBACnC,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;aACnE;SACF;IACH,CAAC;IAED,WAAW;QACT,OAAO,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACtC,CAAC;IAED,iBAAiB,CAAC,UAAkB;QAClC,IAAI,CAAC,uBAAuB,GAAG,UAAU,CAAC;QAC1C,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,qBAAqB,EAAE;YAC1D,cAAc,EAAE,IAAI,CAAC,uBAAuB;SAC7C,CAAC,CAAC;IACL,CAAC;CACF;AAED,wDAAwD;AACxD,+CAA+C;AAC/C,MAAM,CAAN,IAAY,MAIX;AAJD,WAAY,MAAM;IAChB,6CAAmC,CAAA;IACnC,iDAAuC,CAAA;IACvC,yDAA+C,CAAA;AACjD,CAAC,EAJW,MAAM,KAAN,MAAM,QAIjB;AAYD,6FAA6F;AAC7F,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAC,YAAY,EAAE,UAAU,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class StorageKeyManager extends SDKModel<EventTypes> {\n  #mainStorageKeyInternal: string;\n  #storageKeysInternal: Set<string>;\n  constructor(target: Target) {\n    super(target);\n\n    this.#mainStorageKeyInternal = '';\n    this.#storageKeysInternal = new Set();\n  }\n\n  updateStorageKeys(storageKeys: Set<string>): void {\n    const oldStorageKeys = this.#storageKeysInternal;\n    this.#storageKeysInternal = storageKeys;\n\n    for (const storageKey of oldStorageKeys) {\n      if (!this.#storageKeysInternal.has(storageKey)) {\n        this.dispatchEventToListeners(Events.StorageKeyRemoved, storageKey);\n      }\n    }\n\n    for (const storageKey of this.#storageKeysInternal) {\n      if (!oldStorageKeys.has(storageKey)) {\n        this.dispatchEventToListeners(Events.StorageKeyAdded, storageKey);\n      }\n    }\n  }\n\n  storageKeys(): string[] {\n    return [...this.#storageKeysInternal];\n  }\n\n  mainStorageKey(): string {\n    return this.#mainStorageKeyInternal;\n  }\n\n  setMainStorageKey(storageKey: string): void {\n    this.#mainStorageKeyInternal = storageKey;\n    this.dispatchEventToListeners(Events.MainStorageKeyChanged, {\n      mainStorageKey: this.#mainStorageKeyInternal,\n    });\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  StorageKeyAdded = 'StorageKeyAdded',\n  StorageKeyRemoved = 'StorageKeyRemoved',\n  MainStorageKeyChanged = 'MainStorageKeyChanged',\n}\n\nexport interface MainStorageKeyChangedEvent {\n  mainStorageKey: string;\n}\n\nexport type EventTypes = {\n  [Events.StorageKeyAdded]: string,\n  [Events.StorageKeyRemoved]: string,\n  [Events.MainStorageKeyChanged]: MainStorageKeyChangedEvent,\n};\n\n// TODO(jarhar): this is the one of the two usages of Capability.None. Do something about it!\nSDKModel.register(StorageKeyManager, {capabilities: Capability.None, autostart: false});\n"]}