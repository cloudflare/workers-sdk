{"version":3,"file":"CSSStyleDeclaration.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSStyleDeclaration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {cssMetadata} from './CSSMetadata.js';\nimport type {CSSModel, Edit} from './CSSModel.js';\nimport {CSSProperty} from './CSSProperty.js';\nimport type {CSSRule} from './CSSRule.js';\nimport type {Target} from './Target.js';\n\nexport class CSSStyleDeclaration {\n  readonly #cssModelInternal: CSSModel;\n  parentRule: CSSRule|null;\n  #allPropertiesInternal!: CSSProperty[];\n  styleSheetId!: Protocol.CSS.StyleSheetId|undefined;\n  range!: TextUtils.TextRange.TextRange|null;\n  cssText!: string|undefined;\n  #shorthandValues!: Map<string, string>;\n  #shorthandIsImportant!: Set<string>;\n  #activePropertyMap!: Map<string, CSSProperty>;\n  #leadingPropertiesInternal!: CSSProperty[]|null;\n  type: Type;\n  constructor(cssModel: CSSModel, parentRule: CSSRule|null, payload: Protocol.CSS.CSSStyle, type: Type) {\n    this.#cssModelInternal = cssModel;\n    this.parentRule = parentRule;\n    this.reinitialize(payload);\n    this.type = type;\n  }\n\n  rebase(edit: Edit): void {\n    if (this.styleSheetId !== edit.styleSheetId || !this.range) {\n      return;\n    }\n    if (edit.oldRange.equal(this.range)) {\n      this.reinitialize((edit.payload as Protocol.CSS.CSSStyle));\n    } else {\n      this.range = this.range.rebaseAfterTextEdit(edit.oldRange, edit.newRange);\n      for (let i = 0; i < this.#allPropertiesInternal.length; ++i) {\n        this.#allPropertiesInternal[i].rebase(edit);\n      }\n    }\n  }\n\n  private reinitialize(payload: Protocol.CSS.CSSStyle): void {\n    this.styleSheetId = payload.styleSheetId;\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n\n    const shorthandEntries = payload.shorthandEntries;\n    this.#shorthandValues = new Map();\n    this.#shorthandIsImportant = new Set();\n    for (let i = 0; i < shorthandEntries.length; ++i) {\n      this.#shorthandValues.set(shorthandEntries[i].name, shorthandEntries[i].value);\n      if (shorthandEntries[i].important) {\n        this.#shorthandIsImportant.add(shorthandEntries[i].name);\n      }\n    }\n\n    this.#allPropertiesInternal = [];\n\n    if (payload.cssText && this.range) {\n      const cssText = new TextUtils.Text.Text(payload.cssText);\n      let start: {\n        line: number,\n        column: number,\n      }|{\n        line: number,\n        column: number,\n      } = {line: this.range.startLine, column: this.range.startColumn};\n      for (const cssProperty of payload.cssProperties) {\n        const range = cssProperty.range;\n        if (range) {\n          parseUnusedText.call(this, cssText, start.line, start.column, range.startLine, range.startColumn);\n          start = {line: range.endLine, column: range.endColumn};\n        }\n        this.#allPropertiesInternal.push(\n            CSSProperty.parsePayload(this, this.#allPropertiesInternal.length, cssProperty));\n      }\n      parseUnusedText.call(this, cssText, start.line, start.column, this.range.endLine, this.range.endColumn);\n    } else {\n      for (const cssProperty of payload.cssProperties) {\n        this.#allPropertiesInternal.push(\n            CSSProperty.parsePayload(this, this.#allPropertiesInternal.length, cssProperty));\n      }\n    }\n\n    this.generateSyntheticPropertiesIfNeeded();\n    this.computeInactiveProperties();\n\n    this.#activePropertyMap = new Map();\n    for (const property of this.#allPropertiesInternal) {\n      if (!property.activeInStyle()) {\n        continue;\n      }\n      this.#activePropertyMap.set(property.name, property);\n    }\n\n    this.cssText = payload.cssText;\n    this.#leadingPropertiesInternal = null;\n\n    function parseUnusedText(\n        this: CSSStyleDeclaration, cssText: TextUtils.Text.Text, startLine: number, startColumn: number,\n        endLine: number, endColumn: number): void {\n      const tr = new TextUtils.TextRange.TextRange(startLine, startColumn, endLine, endColumn);\n      if (!this.range) {\n        return;\n      }\n      const missingText = cssText.extract(tr.relativeTo(this.range.startLine, this.range.startColumn));\n\n      // Try to fit the malformed css into properties.\n      const lines = missingText.split('\\n');\n      let lineNumber = 0;\n      let inComment = false;\n      for (const line of lines) {\n        let column = 0;\n        for (const property of line.split(';')) {\n          const strippedProperty = stripComments(property, inComment);\n          const trimmedProperty = strippedProperty.text.trim();\n          inComment = strippedProperty.inComment;\n\n          if (trimmedProperty) {\n            let name;\n            let value;\n            const colonIndex = trimmedProperty.indexOf(':');\n            if (colonIndex === -1) {\n              name = trimmedProperty;\n              value = '';\n            } else {\n              name = trimmedProperty.substring(0, colonIndex).trim();\n              value = trimmedProperty.substring(colonIndex + 1).trim();\n            }\n            const range = new TextUtils.TextRange.TextRange(lineNumber, column, lineNumber, column + property.length);\n            this.#allPropertiesInternal.push(new CSSProperty(\n                this, this.#allPropertiesInternal.length, name, value, false, false, false, false, property,\n                range.relativeFrom(startLine, startColumn)));\n          }\n          column += property.length + 1;\n        }\n        lineNumber++;\n      }\n    }\n\n    function stripComments(text: string, inComment: boolean): {\n      text: string,\n      inComment: boolean,\n    } {\n      let output = '';\n      for (let i = 0; i < text.length; i++) {\n        if (!inComment && text.substring(i, i + 2) === '/*') {\n          inComment = true;\n          i++;\n        } else if (inComment && text.substring(i, i + 2) === '*/') {\n          inComment = false;\n          i++;\n        } else if (!inComment) {\n          output += text[i];\n        }\n      }\n      return {text: output, inComment};\n    }\n  }\n\n  private generateSyntheticPropertiesIfNeeded(): void {\n    if (this.range) {\n      return;\n    }\n\n    if (!this.#shorthandValues.size) {\n      return;\n    }\n\n    const propertiesSet = new Set<string>();\n    for (const property of this.#allPropertiesInternal) {\n      propertiesSet.add(property.name);\n    }\n\n    const generatedProperties = [];\n    // For style-based properties, generate #shorthands with values when possible.\n    for (const property of this.#allPropertiesInternal) {\n      // For style-based properties, try generating #shorthands.\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      for (const shorthand of shorthands) {\n        if (propertiesSet.has(shorthand)) {\n          continue;\n        }  // There already is a shorthand this #longhands falls under.\n        const shorthandValue = this.#shorthandValues.get(shorthand);\n        if (!shorthandValue) {\n          continue;\n        }  // Never generate synthetic #shorthands when no value is available.\n\n        // Generate synthetic shorthand we have a value for.\n        const shorthandImportance = Boolean(this.#shorthandIsImportant.has(shorthand));\n        const shorthandProperty = new CSSProperty(\n            this, this.allProperties().length, shorthand, shorthandValue, shorthandImportance, false, true, false);\n        generatedProperties.push(shorthandProperty);\n        propertiesSet.add(shorthand);\n      }\n    }\n    this.#allPropertiesInternal = this.#allPropertiesInternal.concat(generatedProperties);\n  }\n\n  private computeLeadingProperties(): CSSProperty[] {\n    function propertyHasRange(property: CSSProperty): boolean {\n      return Boolean(property.range);\n    }\n\n    if (this.range) {\n      return this.#allPropertiesInternal.filter(propertyHasRange);\n    }\n\n    const leadingProperties = [];\n    for (const property of this.#allPropertiesInternal) {\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      let belongToAnyShorthand = false;\n      for (const shorthand of shorthands) {\n        if (this.#shorthandValues.get(shorthand)) {\n          belongToAnyShorthand = true;\n          break;\n        }\n      }\n      if (!belongToAnyShorthand) {\n        leadingProperties.push(property);\n      }\n    }\n\n    return leadingProperties;\n  }\n\n  leadingProperties(): CSSProperty[] {\n    if (!this.#leadingPropertiesInternal) {\n      this.#leadingPropertiesInternal = this.computeLeadingProperties();\n    }\n    return this.#leadingPropertiesInternal;\n  }\n\n  target(): Target {\n    return this.#cssModelInternal.target();\n  }\n\n  cssModel(): CSSModel {\n    return this.#cssModelInternal;\n  }\n\n  private computeInactiveProperties(): void {\n    const activeProperties = new Map<string, CSSProperty>();\n    for (let i = 0; i < this.#allPropertiesInternal.length; ++i) {\n      const property = this.#allPropertiesInternal[i];\n      if (property.disabled || !property.parsedOk) {\n        property.setActive(false);\n        continue;\n      }\n      const metadata = cssMetadata();\n      const canonicalName = metadata.canonicalPropertyName(property.name);\n      const longhands = metadata.getLonghands(canonicalName);\n      if (longhands) {\n        for (const longhand of longhands) {\n          const activeLonghand = activeProperties.get(longhand);\n          if (activeLonghand && activeLonghand.range && (!activeLonghand.important || property.important)) {\n            activeLonghand.setActive(false);\n            activeProperties.delete(longhand);\n          }\n        }\n      }\n      const activeProperty = activeProperties.get(canonicalName);\n      if (!activeProperty) {\n        activeProperties.set(canonicalName, property);\n      } else if (!property.range) {\n        // For some -webkit- properties, the backend returns also the canonical\n        // property. e.g. if you set in the css only the property\n        // -webkit-background-clip, the backend will return\n        // -webkit-background-clip and background-clip.\n        // This behavior will invalidate -webkit-background-clip (only visually,\n        // the property will be correctly applied)\n        // So this is checking if the property is visible or not in the\n        // styles panel and if not, it will not deactivate the \"activeProperty\".\n        property.setActive(false);\n      } else if (!activeProperty.important || property.important) {\n        activeProperty.setActive(false);\n        activeProperties.set(canonicalName, property);\n      } else {\n        property.setActive(false);\n      }\n    }\n  }\n\n  allProperties(): CSSProperty[] {\n    return this.#allPropertiesInternal;\n  }\n\n  hasActiveProperty(name: string): boolean {\n    return this.#activePropertyMap.has(name);\n  }\n\n  getPropertyValue(name: string): string {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.value : '';\n  }\n\n  isPropertyImplicit(name: string): boolean {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.implicit : false;\n  }\n\n  longhandProperties(name: string): CSSProperty[] {\n    const longhands = cssMetadata().getLonghands(name.toLowerCase());\n    const result = [];\n    for (let i = 0; longhands && i < longhands.length; ++i) {\n      const property = this.#activePropertyMap.get(longhands[i]);\n      if (property) {\n        result.push(property);\n      }\n    }\n    return result;\n  }\n\n  propertyAt(index: number): CSSProperty|null {\n    return (index < this.allProperties().length) ? this.allProperties()[index] : null;\n  }\n\n  pastLastSourcePropertyIndex(): number {\n    for (let i = this.allProperties().length - 1; i >= 0; --i) {\n      if (this.allProperties()[i].range) {\n        return i + 1;\n      }\n    }\n    return 0;\n  }\n\n  private insertionRange(index: number): TextUtils.TextRange.TextRange {\n    const property = this.propertyAt(index);\n    if (property && property.range) {\n      return property.range.collapseToStart();\n    }\n    if (!this.range) {\n      throw new Error('CSSStyleDeclaration.range is null');\n    }\n    return this.range.collapseToEnd();\n  }\n\n  newBlankProperty(index?: number): CSSProperty {\n    index = (typeof index === 'undefined') ? this.pastLastSourcePropertyIndex() : index;\n    const property = new CSSProperty(this, index, '', '', false, false, true, false, '', this.insertionRange(index));\n    return property;\n  }\n\n  setText(text: string, majorChange: boolean): Promise<boolean> {\n    if (!this.range || !this.styleSheetId) {\n      return Promise.resolve(false);\n    }\n    return this.#cssModelInternal.setStyleText(this.styleSheetId, this.range, text, majorChange);\n  }\n\n  insertPropertyAt(index: number, name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    void this.newBlankProperty(index).setText(name + ': ' + value + ';', false, true).then(userCallback);\n  }\n\n  appendProperty(name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    this.insertPropertyAt(this.allProperties().length, name, value, userCallback);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Type {\n  Regular = 'Regular',\n  Inline = 'Inline',\n  Attributes = 'Attributes',\n}\n"]}