{"version":3,"file":"IsolateManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/IsolateManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\n\nimport type {HeapProfilerModel} from './HeapProfilerModel.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nlet isolateManagerInstance: IsolateManager;\n\nexport class IsolateManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDKModelObserver<RuntimeModel> {\n  readonly #isolatesInternal: Map<string, Isolate>;\n  #isolateIdByModel: Map<RuntimeModel, string|null>;\n  #observers: Set<Observer>;\n  #pollId: number;\n\n  constructor() {\n    super();\n    this.#isolatesInternal = new Map();\n    // #isolateIdByModel contains null while the isolateId is being retrieved.\n    this.#isolateIdByModel = new Map();\n    this.#observers = new Set();\n    TargetManager.instance().observeModels(RuntimeModel, this);\n    this.#pollId = 0;\n  }\n\n  static instance({forceNew}: {\n    forceNew: boolean,\n  } = {forceNew: false}): IsolateManager {\n    if (!isolateManagerInstance || forceNew) {\n      isolateManagerInstance = new IsolateManager();\n    }\n\n    return isolateManagerInstance;\n  }\n\n  observeIsolates(observer: Observer): void {\n    if (this.#observers.has(observer)) {\n      throw new Error('Observer can only be registered once');\n    }\n    if (!this.#observers.size) {\n      void this.poll();\n    }\n    this.#observers.add(observer);\n    for (const isolate of this.#isolatesInternal.values()) {\n      observer.isolateAdded(isolate);\n    }\n  }\n\n  unobserveIsolates(observer: Observer): void {\n    this.#observers.delete(observer);\n    if (!this.#observers.size) {\n      ++this.#pollId;\n    }  // Stops the current polling loop.\n  }\n\n  modelAdded(model: RuntimeModel): void {\n    void this.modelAddedInternal(model);\n  }\n\n  private async modelAddedInternal(model: RuntimeModel): Promise<void> {\n    this.#isolateIdByModel.set(model, null);\n    const isolateId = await model.isolateId();\n    if (!this.#isolateIdByModel.has(model)) {\n      // The model has been removed during await.\n      return;\n    }\n    if (!isolateId) {\n      this.#isolateIdByModel.delete(model);\n      return;\n    }\n    this.#isolateIdByModel.set(model, isolateId);\n    let isolate = this.#isolatesInternal.get(isolateId);\n    if (!isolate) {\n      isolate = new Isolate(isolateId);\n      this.#isolatesInternal.set(isolateId, isolate);\n    }\n    isolate.modelsInternal.add(model);\n    if (isolate.modelsInternal.size === 1) {\n      for (const observer of this.#observers) {\n        observer.isolateAdded(isolate);\n      }\n    } else {\n      for (const observer of this.#observers) {\n        observer.isolateChanged(isolate);\n      }\n    }\n  }\n\n  modelRemoved(model: RuntimeModel): void {\n    const isolateId = this.#isolateIdByModel.get(model);\n    this.#isolateIdByModel.delete(model);\n    if (!isolateId) {\n      return;\n    }\n    const isolate = this.#isolatesInternal.get(isolateId);\n    if (!isolate) {\n      return;\n    }\n    isolate.modelsInternal.delete(model);\n    if (isolate.modelsInternal.size) {\n      for (const observer of this.#observers) {\n        observer.isolateChanged(isolate);\n      }\n      return;\n    }\n    for (const observer of this.#observers) {\n      observer.isolateRemoved(isolate);\n    }\n    this.#isolatesInternal.delete(isolateId);\n  }\n\n  isolateByModel(model: RuntimeModel): Isolate|null {\n    return this.#isolatesInternal.get(this.#isolateIdByModel.get(model) || '') || null;\n  }\n\n  isolates(): Iterable<Isolate> {\n    return this.#isolatesInternal.values();\n  }\n\n  private async poll(): Promise<void> {\n    const pollId = this.#pollId;\n    while (pollId === this.#pollId) {\n      await Promise.all(Array.from(this.isolates(), isolate => isolate.update()));\n      await new Promise(r => window.setTimeout(r, PollIntervalMs));\n    }\n  }\n}\n\nexport interface Observer {\n  isolateAdded(isolate: Isolate): void;\n\n  isolateRemoved(isolate: Isolate): void;\n  isolateChanged(isolate: Isolate): void;\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  MemoryChanged = 'MemoryChanged',\n}\n\nexport type EventTypes = {\n  [Events.MemoryChanged]: Isolate,\n};\n\nexport const MemoryTrendWindowMs = 120e3;\nconst PollIntervalMs = 2e3;\n\nexport class Isolate {\n  readonly #idInternal: string;\n  readonly modelsInternal: Set<RuntimeModel>;\n  #usedHeapSizeInternal: number;\n  readonly #memoryTrend: MemoryTrend;\n\n  constructor(id: string) {\n    this.#idInternal = id;\n    this.modelsInternal = new Set();\n    this.#usedHeapSizeInternal = 0;\n    const count = MemoryTrendWindowMs / PollIntervalMs;\n    this.#memoryTrend = new MemoryTrend(count);\n  }\n\n  id(): string {\n    return this.#idInternal;\n  }\n\n  models(): Set<RuntimeModel> {\n    return this.modelsInternal;\n  }\n\n  runtimeModel(): RuntimeModel|null {\n    return this.modelsInternal.values().next().value || null;\n  }\n\n  heapProfilerModel(): HeapProfilerModel|null {\n    const runtimeModel = this.runtimeModel();\n    return runtimeModel && runtimeModel.heapProfilerModel();\n  }\n\n  async update(): Promise<void> {\n    const model = this.runtimeModel();\n    const usage = model && await model.heapUsage();\n    if (!usage) {\n      return;\n    }\n    this.#usedHeapSizeInternal = usage.usedSize;\n    this.#memoryTrend.add(this.#usedHeapSizeInternal);\n    IsolateManager.instance().dispatchEventToListeners(Events.MemoryChanged, this);\n  }\n\n  samplesCount(): number {\n    return this.#memoryTrend.count();\n  }\n\n  usedHeapSize(): number {\n    return this.#usedHeapSizeInternal;\n  }\n\n  /**\n   * bytes per millisecond\n   */\n  usedHeapSizeGrowRate(): number {\n    return this.#memoryTrend.fitSlope();\n  }\n\n  isMainThread(): boolean {\n    const model = this.runtimeModel();\n    return model ? model.target().id() === 'main' : false;\n  }\n}\n\nexport class MemoryTrend {\n  #maxCount: number;\n  #base!: number;\n  #index!: number;\n  #x!: number[];\n  #y!: number[];\n  #sx!: number;\n  #sy!: number;\n  #sxx!: number;\n  #sxy!: number;\n  constructor(maxCount: number) {\n    this.#maxCount = maxCount | 0;\n    this.reset();\n  }\n\n  reset(): void {\n    this.#base = Date.now();\n    this.#index = 0;\n    this.#x = [];\n    this.#y = [];\n    this.#sx = 0;\n    this.#sy = 0;\n    this.#sxx = 0;\n    this.#sxy = 0;\n  }\n\n  count(): number {\n    return this.#x.length;\n  }\n\n  add(heapSize: number, timestamp?: number): void {\n    const x = typeof timestamp === 'number' ? timestamp : Date.now() - this.#base;\n    const y = heapSize;\n    if (this.#x.length === this.#maxCount) {\n      // Turns into a cyclic buffer once it reaches the |#maxCount|.\n      const x0 = this.#x[this.#index];\n      const y0 = this.#y[this.#index];\n      this.#sx -= x0;\n      this.#sy -= y0;\n      this.#sxx -= x0 * x0;\n      this.#sxy -= x0 * y0;\n    }\n    this.#sx += x;\n    this.#sy += y;\n    this.#sxx += x * x;\n    this.#sxy += x * y;\n    this.#x[this.#index] = x;\n    this.#y[this.#index] = y;\n    this.#index = (this.#index + 1) % this.#maxCount;\n  }\n\n  fitSlope(): number {\n    // We use the linear regression model to find the slope.\n    const n = this.count();\n    return n < 2 ? 0 : (this.#sxy - this.#sx * this.#sy / n) / (this.#sxx - this.#sx * this.#sx / n);\n  }\n}\n"]}