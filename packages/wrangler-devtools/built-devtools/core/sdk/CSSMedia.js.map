{"version":3,"file":"CSSMedia.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSMedia.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport type {CSSModel} from './CSSModel.js';\nimport {CSSQuery} from './CSSQuery.js';\n\nexport class CSSMediaQuery {\n  readonly #activeInternal: boolean;\n  readonly #expressionsInternal: CSSMediaQueryExpression[]|null;\n  constructor(payload: Protocol.CSS.MediaQuery) {\n    this.#activeInternal = payload.active;\n    this.#expressionsInternal = [];\n    for (let j = 0; j < payload.expressions.length; ++j) {\n      this.#expressionsInternal.push(CSSMediaQueryExpression.parsePayload(payload.expressions[j]));\n    }\n  }\n\n  static parsePayload(payload: Protocol.CSS.MediaQuery): CSSMediaQuery {\n    return new CSSMediaQuery(payload);\n  }\n\n  active(): boolean {\n    return this.#activeInternal;\n  }\n\n  expressions(): CSSMediaQueryExpression[]|null {\n    return this.#expressionsInternal;\n  }\n}\n\nexport class CSSMediaQueryExpression {\n  readonly #valueInternal: number;\n  readonly #unitInternal: string;\n  readonly #featureInternal: string;\n  readonly #valueRangeInternal: TextUtils.TextRange.TextRange|null;\n  readonly #computedLengthInternal: number|null;\n  constructor(payload: Protocol.CSS.MediaQueryExpression) {\n    this.#valueInternal = payload.value;\n    this.#unitInternal = payload.unit;\n    this.#featureInternal = payload.feature;\n    this.#valueRangeInternal = payload.valueRange ? TextUtils.TextRange.TextRange.fromObject(payload.valueRange) : null;\n    this.#computedLengthInternal = payload.computedLength || null;\n  }\n\n  static parsePayload(payload: Protocol.CSS.MediaQueryExpression): CSSMediaQueryExpression {\n    return new CSSMediaQueryExpression(payload);\n  }\n\n  value(): number {\n    return this.#valueInternal;\n  }\n\n  unit(): string {\n    return this.#unitInternal;\n  }\n\n  feature(): string {\n    return this.#featureInternal;\n  }\n\n  valueRange(): TextUtils.TextRange.TextRange|null {\n    return this.#valueRangeInternal;\n  }\n\n  computedLength(): number|null {\n    return this.#computedLengthInternal;\n  }\n}\n\nexport class CSSMedia extends CSSQuery {\n  source?: Protocol.CSS.CSSMediaSource;\n  sourceURL?: string;\n  mediaList?: CSSMediaQuery[]|null;\n\n  static parseMediaArrayPayload(cssModel: CSSModel, payload: Protocol.CSS.CSSMedia[]): CSSMedia[] {\n    return payload.map(mq => new CSSMedia(cssModel, mq));\n  }\n\n  constructor(cssModel: CSSModel, payload: Protocol.CSS.CSSMedia) {\n    super(cssModel);\n    this.reinitialize(payload);\n  }\n\n  reinitialize(payload: Protocol.CSS.CSSMedia): void {\n    this.text = payload.text;\n    this.source = payload.source;\n    this.sourceURL = payload.sourceURL || '';\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n    this.styleSheetId = payload.styleSheetId;\n    this.mediaList = null;\n    if (payload.mediaList) {\n      this.mediaList = [];\n      for (let i = 0; i < payload.mediaList.length; ++i) {\n        this.mediaList.push(CSSMediaQuery.parsePayload(payload.mediaList[i]));\n      }\n    }\n  }\n\n  active(): boolean {\n    if (!this.mediaList) {\n      return true;\n    }\n    for (let i = 0; i < this.mediaList.length; ++i) {\n      if (this.mediaList[i].active()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport const Source = {\n  LINKED_SHEET: 'linkedSheet',\n  INLINE_SHEET: 'inlineSheet',\n  MEDIA_RULE: 'mediaRule',\n  IMPORT_RULE: 'importRule',\n};\n"]}