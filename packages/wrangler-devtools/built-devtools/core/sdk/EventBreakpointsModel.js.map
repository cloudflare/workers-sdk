{"version":3,"file":"EventBreakpointsModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/EventBreakpointsModel.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAGxC,OAAO,EAAC,qBAAqB,EAAC,MAAM,4BAA4B,CAAC;AAEjE,OAAO,EAAC,UAAU,EAAC,MAAM,aAAa,CAAC;AACvC,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;AAEjD,MAAM,SAAS,GAAG;IAChB;;OAEG;IACH,cAAc,EAAE,oBAAoB;IAEpC;;;OAGG;IACH,+BAA+B,EAAE,4BAA4B;IAE7D;;;OAGG;IACH,iCAAiC,EAAE,8BAA8B;IAEjE;;;OAGG;IACH,+BAA+B,EAAE,4BAA4B;IAE7D;;;OAGG;IACH,iCAAiC,EAAE,8BAA8B;CAClE,CAAC;AAEF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,mCAAmC,EAAE,SAAS,CAAC,CAAC;AACzF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAStE,SAAS,8BAA8B,CAAC,mBAAyC;IAC/E,QAAQ,mBAAmB,EAAE;QAC3B;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC;QAE/D;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,iCAAiC,CAAC,CAAC;QAEjE;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC;QAE/D;YACE,OAAO,UAAU,CAAC,SAAS,CAAC,iCAAiC,CAAC,CAAC;KAClE;AACH,CAAC;AAED,MAAM,OAAO,qBAAsB,SAAQ,QAAc;IAC9C,KAAK,CAAuC;IAErD,YAAY,MAAc;QACxB,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;IAC9C,CAAC;CACF;AAED,+EAA+E;AAC/E,4EAA4E;AAC5E,MAAM,uBAAwB,SAAQ,qBAAqB;IAChD,mBAAmB,CAAS;IACrC,YAAY,mBAAyC,EAAE,QAAgB;QACrE,KAAK,CAAC,QAAQ,EAAE,8BAA8B,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACrE,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACjD,CAAC;IAED,UAAU,CAAC,OAAgB;QACzB,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,OAAO,EAAE;YAC9B,OAAO;SACR;QACD,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC1B,KAAK,MAAM,KAAK,IAAI,aAAa,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE;YAC1E,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC3B;IACH,CAAC;IAED,aAAa,CAAC,KAA4B;QACxC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAClB,KAAK,KAAK,CAAC,KAAK,CAAC,mCAAmC,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,mBAAmB,EAAC,CAAC,CAAC;SAC7F;aAAM;YACL,KAAK,KAAK,CAAC,KAAK,CAAC,sCAAsC,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,mBAAmB,EAAC,CAAC,CAAC;SAChG;IACH,CAAC;IAED,MAAM,CAAU,qBAAqB,GAAG,kBAAkB,CAAC;;AAG7D,IAAI,8BAAuD,CAAC;AAE5D,MAAM,OAAO,uBAAuB;IACzB,iCAAiC,GAA8B,EAAE,CAAC;IAE3E;QACE,IAAI,CAAC,gCAAgC,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE;;;;;SAK3E,CAAC,CAAC;QAEH,aAAa,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;IACtE,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,OAEZ,EAAC,QAAQ,EAAE,IAAI,EAAC;QAClB,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,8BAA8B,IAAI,QAAQ,EAAE;YAC/C,8BAA8B,GAAG,IAAI,uBAAuB,EAAE,CAAC;SAChE;QAED,OAAO,8BAA8B,CAAC;IACxC,CAAC;IAEO,gCAAgC,CAAC,QAAgB,EAAE,oBAA4C;QACrG,KAAK,MAAM,mBAAmB,IAAI,oBAAoB,EAAE;YACtD,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,IAAI,uBAAuB,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC,CAAC;SACzG;IACH,CAAC;IAED,wBAAwB;QACtB,OAAO,IAAI,CAAC,iCAAiC,CAAC,KAAK,EAAE,CAAC;IACxD,CAAC;IAED,mCAAmC,CAAC,OAEnC;QACC,MAAM,UAAU,GAAG,IAAI,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;QAChE,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;IAED,8BAA8B,CAAC,OAA4B;QACzD,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,EAAE;YACxE,OAAO,IAAI,CAAC;SACb;QAED,MAAM,mBAAmB,GAAG,SAAS,CAAC,SAAS,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QACtG,OAAO,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,KAAK,mBAAmB,CAAC,IAAI,IAAI,CAAC;IACjH,CAAC;IAED,UAAU,CAAC,oBAA2C;QACpD,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,iCAAiC,EAAE;YAC/D,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE;gBACxB,UAAU,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;aAChD;SACF;IACH,CAAC;IAED,YAAY,CAAC,qBAA4C;IACzD,CAAC;CACF;AAED,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,EAAE,EAAC,YAAY,EAAE,UAAU,CAAC,gBAAgB,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport {CategorizedBreakpoint} from './CategorizedBreakpoint.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport type {SDKModelObserver} from './TargetManager.js';\nimport {TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n   * @description Category of breakpoints\n   */\n  auctionWorklet: 'Ad Auction Worklet',\n\n  /**\n   * @description Name of a breakpoint type.\n   * https://github.com/WICG/turtledove/blob/main/FLEDGE.md#32-on-device-bidding\n   */\n  beforeBidderWorkletBiddingStart: 'Bidder Bidding Phase Start',\n\n  /**\n   * @description Name of a breakpoint type.\n   * https://github.com/WICG/turtledove/blob/main/FLEDGE.md#52-buyer-reporting-on-render-and-ad-events\n   */\n  beforeBidderWorkletReportingStart: 'Bidder Reporting Phase Start',\n\n  /**\n   * @description Name of a breakpoint type.\n   * https://github.com/WICG/turtledove/blob/main/FLEDGE.md#23-scoring-bids\n   */\n  beforeSellerWorkletScoringStart: 'Seller Scoring Phase Start',\n\n  /**\n   * @description Name of a breakpoint type.\n   * https://github.com/WICG/turtledove/blob/main/FLEDGE.md#51-seller-reporting-on-render\n   */\n  beforeSellerWorkletReportingStart: 'Seller Reporting Phase Start',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/EventBreakpointsModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst enum InstrumentationNames {\n  BeforeBidderWorkletBiddingStart = 'beforeBidderWorkletBiddingStart',\n  BeforeBidderWorkletReportingStart = 'beforeBidderWorkletReportingStart',\n  BeforeSellerWorkletScoringStart = 'beforeSellerWorkletScoringStart',\n  BeforeSellerWorkletReportingStart = 'beforeSellerWorkletReportingStart',\n}\n\nfunction getTitleForInstrumentationName(instrumentationName: InstrumentationNames): Common.UIString.LocalizedString {\n  switch (instrumentationName) {\n    case InstrumentationNames.BeforeBidderWorkletBiddingStart:\n      return i18nString(UIStrings.beforeBidderWorkletBiddingStart);\n\n    case InstrumentationNames.BeforeBidderWorkletReportingStart:\n      return i18nString(UIStrings.beforeBidderWorkletReportingStart);\n\n    case InstrumentationNames.BeforeSellerWorkletScoringStart:\n      return i18nString(UIStrings.beforeSellerWorkletScoringStart);\n\n    case InstrumentationNames.BeforeSellerWorkletReportingStart:\n      return i18nString(UIStrings.beforeSellerWorkletReportingStart);\n  }\n}\n\nexport class EventBreakpointsModel extends SDKModel<void> {\n  readonly agent: ProtocolProxyApi.EventBreakpointsApi;\n\n  constructor(target: Target) {\n    super(target);\n    this.agent = target.eventBreakpointsAgent();\n  }\n}\n\n// This implementation (as opposed to similar class in DOMDebuggerModel) is for\n// instrumentation breakpoints in targets that run JS but do not have a DOM.\nclass EventListenerBreakpoint extends CategorizedBreakpoint {\n  readonly instrumentationName: string;\n  constructor(instrumentationName: InstrumentationNames, category: string) {\n    super(category, getTitleForInstrumentationName(instrumentationName));\n    this.instrumentationName = instrumentationName;\n  }\n\n  setEnabled(enabled: boolean): void {\n    if (this.enabled() === enabled) {\n      return;\n    }\n    super.setEnabled(enabled);\n    for (const model of TargetManager.instance().models(EventBreakpointsModel)) {\n      this.updateOnModel(model);\n    }\n  }\n\n  updateOnModel(model: EventBreakpointsModel): void {\n    if (this.enabled()) {\n      void model.agent.invoke_setInstrumentationBreakpoint({eventName: this.instrumentationName});\n    } else {\n      void model.agent.invoke_removeInstrumentationBreakpoint({eventName: this.instrumentationName});\n    }\n  }\n\n  static readonly instrumentationPrefix = 'instrumentation:';\n}\n\nlet eventBreakpointManagerInstance: EventBreakpointsManager;\n\nexport class EventBreakpointsManager implements SDKModelObserver<EventBreakpointsModel> {\n  readonly #eventListenerBreakpointsInternal: EventListenerBreakpoint[] = [];\n\n  constructor() {\n    this.createInstrumentationBreakpoints(i18nString(UIStrings.auctionWorklet), [\n      InstrumentationNames.BeforeBidderWorkletBiddingStart,\n      InstrumentationNames.BeforeBidderWorkletReportingStart,\n      InstrumentationNames.BeforeSellerWorkletScoringStart,\n      InstrumentationNames.BeforeSellerWorkletReportingStart,\n    ]);\n\n    TargetManager.instance().observeModels(EventBreakpointsModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): EventBreakpointsManager {\n    const {forceNew} = opts;\n    if (!eventBreakpointManagerInstance || forceNew) {\n      eventBreakpointManagerInstance = new EventBreakpointsManager();\n    }\n\n    return eventBreakpointManagerInstance;\n  }\n\n  private createInstrumentationBreakpoints(category: string, instrumentationNames: InstrumentationNames[]): void {\n    for (const instrumentationName of instrumentationNames) {\n      this.#eventListenerBreakpointsInternal.push(new EventListenerBreakpoint(instrumentationName, category));\n    }\n  }\n\n  eventListenerBreakpoints(): EventListenerBreakpoint[] {\n    return this.#eventListenerBreakpointsInternal.slice();\n  }\n\n  resolveEventListenerBreakpointTitle(auxData: {\n    eventName: string,\n  }): string|null {\n    const breakpoint = this.resolveEventListenerBreakpoint(auxData);\n    return breakpoint ? breakpoint.title() : null;\n  }\n\n  resolveEventListenerBreakpoint(auxData: {eventName: string}): EventListenerBreakpoint|null {\n    const eventName = auxData.eventName;\n    if (!eventName.startsWith(EventListenerBreakpoint.instrumentationPrefix)) {\n      return null;\n    }\n\n    const instrumentationName = eventName.substring(EventListenerBreakpoint.instrumentationPrefix.length);\n    return this.#eventListenerBreakpointsInternal.find(b => b.instrumentationName === instrumentationName) || null;\n  }\n\n  modelAdded(eventBreakpointModel: EventBreakpointsModel): void {\n    for (const breakpoint of this.#eventListenerBreakpointsInternal) {\n      if (breakpoint.enabled()) {\n        breakpoint.updateOnModel(eventBreakpointModel);\n      }\n    }\n  }\n\n  modelRemoved(_eventBreakpointModel: EventBreakpointsModel): void {\n  }\n}\n\nSDKModel.register(EventBreakpointsModel, {capabilities: Capability.EventBreakpoints, autostart: false});\n"]}