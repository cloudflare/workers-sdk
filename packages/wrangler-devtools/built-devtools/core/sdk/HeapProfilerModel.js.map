{"version":3,"file":"HeapProfilerModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/HeapProfilerModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport type {DebuggerModel} from './DebuggerModel.js';\nimport type {RemoteObject} from './RemoteObject.js';\nimport {RuntimeModel} from './RuntimeModel.js';\nimport type {Target} from './Target.js';\nimport {Capability} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nexport class HeapProfilerModel extends SDKModel<EventTypes> {\n  #enabled: boolean;\n  readonly #heapProfilerAgent: ProtocolProxyApi.HeapProfilerApi;\n  readonly #runtimeModelInternal: RuntimeModel;\n  #samplingProfilerDepth: number;\n\n  constructor(target: Target) {\n    super(target);\n    target.registerHeapProfilerDispatcher(new HeapProfilerDispatcher(this));\n    this.#enabled = false;\n    this.#heapProfilerAgent = target.heapProfilerAgent();\n    this.#runtimeModelInternal = (target.model(RuntimeModel) as RuntimeModel);\n    this.#samplingProfilerDepth = 0;\n  }\n\n  debuggerModel(): DebuggerModel {\n    return this.#runtimeModelInternal.debuggerModel();\n  }\n\n  runtimeModel(): RuntimeModel {\n    return this.#runtimeModelInternal;\n  }\n\n  async enable(): Promise<void> {\n    if (this.#enabled) {\n      return;\n    }\n\n    this.#enabled = true;\n    await this.#heapProfilerAgent.invoke_enable();\n  }\n\n  async startSampling(samplingRateInBytes?: number): Promise<boolean> {\n    if (this.#samplingProfilerDepth++) {\n      return false;\n    }\n    const defaultSamplingIntervalInBytes = 16384;\n    const response = await this.#heapProfilerAgent.invoke_startSampling(\n        {samplingInterval: samplingRateInBytes || defaultSamplingIntervalInBytes});\n    return Boolean(response.getError());\n  }\n\n  async stopSampling(): Promise<Protocol.HeapProfiler.SamplingHeapProfile|null> {\n    if (!this.#samplingProfilerDepth) {\n      throw new Error('Sampling profiler is not running.');\n    }\n    if (--this.#samplingProfilerDepth) {\n      return this.getSamplingProfile();\n    }\n    const response = await this.#heapProfilerAgent.invoke_stopSampling();\n    if (response.getError()) {\n      return null;\n    }\n    return response.profile;\n  }\n\n  async getSamplingProfile(): Promise<Protocol.HeapProfiler.SamplingHeapProfile|null> {\n    const response = await this.#heapProfilerAgent.invoke_getSamplingProfile();\n    if (response.getError()) {\n      return null;\n    }\n    return response.profile;\n  }\n\n  async collectGarbage(): Promise<boolean> {\n    const response = await this.#heapProfilerAgent.invoke_collectGarbage();\n    return Boolean(response.getError());\n  }\n\n  async snapshotObjectIdForObjectId(objectId: Protocol.Runtime.RemoteObjectId): Promise<string|null> {\n    const response = await this.#heapProfilerAgent.invoke_getHeapObjectId({objectId});\n    if (response.getError()) {\n      return null;\n    }\n    return response.heapSnapshotObjectId;\n  }\n\n  async objectForSnapshotObjectId(\n      snapshotObjectId: Protocol.HeapProfiler.HeapSnapshotObjectId,\n      objectGroupName: string): Promise<RemoteObject|null> {\n    const result = await this.#heapProfilerAgent.invoke_getObjectByHeapObjectId(\n        {objectId: snapshotObjectId, objectGroup: objectGroupName});\n    if (result.getError()) {\n      return null;\n    }\n    return this.#runtimeModelInternal.createRemoteObject(result.result);\n  }\n\n  async addInspectedHeapObject(snapshotObjectId: Protocol.HeapProfiler.HeapSnapshotObjectId): Promise<boolean> {\n    const response = await this.#heapProfilerAgent.invoke_addInspectedHeapObject({heapObjectId: snapshotObjectId});\n    return Boolean(response.getError());\n  }\n\n  async takeHeapSnapshot(heapSnapshotOptions: Protocol.HeapProfiler.TakeHeapSnapshotRequest): Promise<void> {\n    await this.#heapProfilerAgent.invoke_takeHeapSnapshot(heapSnapshotOptions);\n  }\n\n  async startTrackingHeapObjects(recordAllocationStacks: boolean): Promise<boolean> {\n    const response =\n        await this.#heapProfilerAgent.invoke_startTrackingHeapObjects({trackAllocations: recordAllocationStacks});\n    return Boolean(response.getError());\n  }\n\n  async stopTrackingHeapObjects(reportProgress: boolean): Promise<boolean> {\n    const response = await this.#heapProfilerAgent.invoke_stopTrackingHeapObjects({reportProgress});\n    return Boolean(response.getError());\n  }\n\n  heapStatsUpdate(samples: number[]): void {\n    this.dispatchEventToListeners(Events.HeapStatsUpdate, samples);\n  }\n\n  lastSeenObjectId(lastSeenObjectId: number, timestamp: number): void {\n    this.dispatchEventToListeners(Events.LastSeenObjectId, {lastSeenObjectId: lastSeenObjectId, timestamp: timestamp});\n  }\n\n  addHeapSnapshotChunk(chunk: string): void {\n    this.dispatchEventToListeners(Events.AddHeapSnapshotChunk, chunk);\n  }\n\n  reportHeapSnapshotProgress(done: number, total: number, finished?: boolean): void {\n    this.dispatchEventToListeners(Events.ReportHeapSnapshotProgress, {done: done, total: total, finished: finished});\n  }\n\n  resetProfiles(): void {\n    this.dispatchEventToListeners(Events.ResetProfiles, this);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Events {\n  HeapStatsUpdate = 'HeapStatsUpdate',\n  LastSeenObjectId = 'LastSeenObjectId',\n  AddHeapSnapshotChunk = 'AddHeapSnapshotChunk',\n  ReportHeapSnapshotProgress = 'ReportHeapSnapshotProgress',\n  ResetProfiles = 'ResetProfiles',\n}\n\n/**\n * An array of triplets. Each triplet describes a fragment. The first number is the fragment\n * index, the second number is a total count of objects for the fragment, the third number is\n * a total size of the objects for the fragment.\n */\nexport type HeapStatsUpdateSamples = number[];\n\nexport interface LastSeenObjectId {\n  lastSeenObjectId: number;\n  timestamp: number;\n}\n\nexport interface HeapSnapshotProgress {\n  done: number;\n  total: number;\n  finished?: boolean;\n}\n\nexport type EventTypes = {\n  [Events.HeapStatsUpdate]: HeapStatsUpdateSamples,\n  [Events.LastSeenObjectId]: LastSeenObjectId,\n  [Events.AddHeapSnapshotChunk]: string,\n  [Events.ReportHeapSnapshotProgress]: HeapSnapshotProgress,\n  [Events.ResetProfiles]: HeapProfilerModel,\n};\n\nexport interface NativeProfilerCallFrame {\n  functionName: string;\n  url: Platform.DevToolsPath.UrlString;\n  scriptId?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\nexport interface CommonHeapProfileNode {\n  callFrame: NativeProfilerCallFrame;\n  selfSize: number;\n  id?: number;\n  children: CommonHeapProfileNode[];\n}\n\nexport interface CommonHeapProfile {\n  head: CommonHeapProfileNode;\n  modules: Protocol.Memory.Module[];\n}\n\nclass HeapProfilerDispatcher implements ProtocolProxyApi.HeapProfilerDispatcher {\n  readonly #heapProfilerModel: HeapProfilerModel;\n  constructor(model: HeapProfilerModel) {\n    this.#heapProfilerModel = model;\n  }\n\n  heapStatsUpdate({statsUpdate}: Protocol.HeapProfiler.HeapStatsUpdateEvent): void {\n    this.#heapProfilerModel.heapStatsUpdate(statsUpdate);\n  }\n\n  lastSeenObjectId({lastSeenObjectId, timestamp}: Protocol.HeapProfiler.LastSeenObjectIdEvent): void {\n    this.#heapProfilerModel.lastSeenObjectId(lastSeenObjectId, timestamp);\n  }\n\n  addHeapSnapshotChunk({chunk}: Protocol.HeapProfiler.AddHeapSnapshotChunkEvent): void {\n    this.#heapProfilerModel.addHeapSnapshotChunk(chunk);\n  }\n\n  reportHeapSnapshotProgress({done, total, finished}: Protocol.HeapProfiler.ReportHeapSnapshotProgressEvent): void {\n    this.#heapProfilerModel.reportHeapSnapshotProgress(done, total, finished);\n  }\n\n  resetProfiles(): void {\n    this.#heapProfilerModel.resetProfiles();\n  }\n}\n\nSDKModel.register(HeapProfilerModel, {capabilities: Capability.JS, autostart: false});\n"]}