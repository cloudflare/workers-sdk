{"version":3,"file":"Settings.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Settings.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2009 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport type {Color} from './Color.js';\nimport {Format} from './Color.js';\nimport {Console} from './Console.js';\nimport type {GenericEvents, EventDescriptor, EventTargetEvent} from './EventTarget.js';\nimport {ObjectWrapper} from './Object.js';\nimport {\n  getLocalizedSettingsCategory,\n  getRegisteredSettings,\n  maybeRemoveSettingExtension,\n  type RegExpSettingItem,\n  registerSettingExtension,\n  registerSettingsForTest,\n  resetSettings,\n  SettingCategory,\n  type SettingExtensionOption,\n  type SettingRegistration,\n  SettingType,\n} from './SettingRegistration.js';\n\nlet settingsInstance: Settings|undefined;\n\nexport class Settings {\n  readonly #sessionStorage: SettingsStorage;\n  settingNameSet: Set<string>;\n  orderValuesBySettingCategory: Map<SettingCategory, Set<number>>;\n  #eventSupport: ObjectWrapper<GenericEvents>;\n  #registry: Map<string, Setting<unknown>>;\n  readonly moduleSettings: Map<string, Setting<unknown>>;\n\n  private constructor(\n      private readonly syncedStorage: SettingsStorage, readonly globalStorage: SettingsStorage,\n      private readonly localStorage: SettingsStorage) {\n    this.#sessionStorage = new SettingsStorage({});\n\n    this.settingNameSet = new Set();\n\n    this.orderValuesBySettingCategory = new Map();\n\n    this.#eventSupport = new ObjectWrapper<GenericEvents>();\n    this.#registry = new Map();\n    this.moduleSettings = new Map();\n\n    for (const registration of getRegisteredSettings()) {\n      const {settingName, defaultValue, storageType} = registration;\n      const isRegex = registration.settingType === SettingType.REGEX;\n\n      const setting = isRegex && typeof defaultValue === 'string' ?\n          this.createRegExpSetting(settingName, defaultValue, undefined, storageType) :\n          this.createSetting(settingName, defaultValue, storageType);\n\n      if (Root.Runtime.Runtime.platform() === 'mac' && registration.titleMac) {\n        setting.setTitleFunction(registration.titleMac);\n      } else {\n        setting.setTitleFunction(registration.title);\n      }\n      if (registration.userActionCondition) {\n        setting.setRequiresUserAction(Boolean(Root.Runtime.Runtime.queryParam(registration.userActionCondition)));\n      }\n      setting.setRegistration(registration);\n\n      this.registerModuleSetting(setting);\n    }\n  }\n\n  static hasInstance(): boolean {\n    return typeof settingsInstance !== 'undefined';\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    syncedStorage: SettingsStorage|null,\n    globalStorage: SettingsStorage|null,\n    localStorage: SettingsStorage|null,\n  } = {forceNew: null, syncedStorage: null, globalStorage: null, localStorage: null}): Settings {\n    const {forceNew, syncedStorage, globalStorage, localStorage} = opts;\n    if (!settingsInstance || forceNew) {\n      if (!syncedStorage || !globalStorage || !localStorage) {\n        throw new Error(`Unable to create settings: global and local storage must be provided: ${new Error().stack}`);\n      }\n\n      settingsInstance = new Settings(syncedStorage, globalStorage, localStorage);\n    }\n\n    return settingsInstance;\n  }\n\n  static removeInstance(): void {\n    settingsInstance = undefined;\n  }\n\n  private registerModuleSetting(setting: Setting<unknown>): void {\n    const settingName = setting.name;\n    const category = setting.category();\n    const order = setting.order();\n    if (this.settingNameSet.has(settingName)) {\n      throw new Error(`Duplicate Setting name '${settingName}'`);\n    }\n    if (category && order) {\n      const orderValues = this.orderValuesBySettingCategory.get(category) || new Set();\n      if (orderValues.has(order)) {\n        throw new Error(`Duplicate order value '${order}' for settings category '${category}'`);\n      }\n      orderValues.add(order);\n      this.orderValuesBySettingCategory.set(category, orderValues);\n    }\n    this.settingNameSet.add(settingName);\n    this.moduleSettings.set(setting.name, setting);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleSetting<T = any>(settingName: string): Setting<T> {\n    const setting = this.moduleSettings.get(settingName) as Setting<T>;\n    if (!setting) {\n      throw new Error('No setting registered: ' + settingName);\n    }\n    return setting;\n  }\n\n  settingForTest(settingName: string): Setting<unknown> {\n    const setting = this.#registry.get(settingName);\n    if (!setting) {\n      throw new Error('No setting registered: ' + settingName);\n    }\n    return setting;\n  }\n\n  createSetting<T>(key: string, defaultValue: T, storageType?: SettingStorageType): Setting<T> {\n    const storage = this.storageFromType(storageType);\n    let setting = (this.#registry.get(key) as Setting<T>);\n    if (!setting) {\n      setting = new Setting(key, defaultValue, this.#eventSupport, storage);\n      this.#registry.set(key, setting);\n    }\n    return setting;\n  }\n\n  createLocalSetting<T>(key: string, defaultValue: T): Setting<T> {\n    return this.createSetting(key, defaultValue, SettingStorageType.Local);\n  }\n\n  createRegExpSetting(key: string, defaultValue: string, regexFlags?: string, storageType?: SettingStorageType):\n      RegExpSetting {\n    if (!this.#registry.get(key)) {\n      this.#registry.set(\n          key, new RegExpSetting(key, defaultValue, this.#eventSupport, this.storageFromType(storageType), regexFlags));\n    }\n    return this.#registry.get(key) as RegExpSetting;\n  }\n\n  clearAll(): void {\n    this.globalStorage.removeAll();\n    this.localStorage.removeAll();\n    const versionSetting = Settings.instance().createSetting(VersionController.currentVersionName, 0);\n    versionSetting.set(VersionController.currentVersion);\n  }\n\n  private storageFromType(storageType?: SettingStorageType): SettingsStorage {\n    switch (storageType) {\n      case SettingStorageType.Local:\n        return this.localStorage;\n      case SettingStorageType.Session:\n        return this.#sessionStorage;\n      case SettingStorageType.Global:\n        return this.globalStorage;\n      case SettingStorageType.Synced:\n        return this.syncedStorage;\n    }\n    return this.globalStorage;\n  }\n\n  getRegistry(): Map<string, Setting<unknown>> {\n    return this.#registry;\n  }\n}\n\nexport interface SettingsBackingStore {\n  register(setting: string): void;\n  get(setting: string): Promise<string>;\n  set(setting: string, value: string): void;\n  remove(setting: string): void;\n  clear(): void;\n}\n\nexport const NOOP_STORAGE: SettingsBackingStore = {\n  register: () => {},\n  set: () => {},\n  get: () => Promise.resolve(''),\n  remove: () => {},\n  clear: () => {},\n};\n\nexport class SettingsStorage {\n  constructor(\n      private object: Record<string, string>, private readonly backingStore: SettingsBackingStore = NOOP_STORAGE,\n      private readonly storagePrefix: string = '') {\n  }\n\n  register(name: string): void {\n    name = this.storagePrefix + name;\n    this.backingStore.register(name);\n  }\n\n  set(name: string, value: string): void {\n    name = this.storagePrefix + name;\n    this.object[name] = value;\n    this.backingStore.set(name, value);\n  }\n\n  has(name: string): boolean {\n    name = this.storagePrefix + name;\n    return name in this.object;\n  }\n\n  get(name: string): string {\n    name = this.storagePrefix + name;\n    return this.object[name];\n  }\n\n  async forceGet(originalName: string): Promise<string> {\n    const name = this.storagePrefix + originalName;\n    const value = await this.backingStore.get(name);\n    if (value && value !== this.object[name]) {\n      this.set(originalName, value);\n    } else if (!value) {\n      this.remove(originalName);\n    }\n    return value;\n  }\n\n  remove(name: string): void {\n    name = this.storagePrefix + name;\n    delete this.object[name];\n    this.backingStore.remove(name);\n  }\n\n  removeAll(): void {\n    this.object = {};\n    this.backingStore.clear();\n  }\n\n  dumpSizes(): void {\n    Console.instance().log('Ten largest settings: ');\n\n    const sizes: {\n      [x: string]: number,\n      // @ts-expect-error __proto__ optimization\n    } = {__proto__: null};\n    for (const key in this.object) {\n      sizes[key] = this.object[key].length;\n    }\n    const keys = Object.keys(sizes);\n\n    function comparator(key1: string, key2: string): number {\n      return sizes[key2] - sizes[key1];\n    }\n\n    keys.sort(comparator);\n\n    for (let i = 0; i < 10 && i < keys.length; ++i) {\n      Console.instance().log('Setting: \\'' + keys[i] + '\\', size: ' + sizes[keys[i]]);\n    }\n  }\n}\n\nfunction removeSetting(setting: Setting<unknown>): void {\n  const name = setting.name;\n  const settings = Settings.instance();\n\n  settings.getRegistry().delete(name);\n  settings.moduleSettings.delete(name);\n\n  setting.storage.remove(name);\n}\n\nexport class Setting<V> {\n  #titleFunction?: () => Platform.UIString.LocalizedString;\n  #titleInternal!: string;\n  #registration: SettingRegistration|null = null;\n  #requiresUserAction?: boolean;\n  #value?: V;\n  // TODO(crbug.com/1172300) Type cannot be inferred without changes to consumers. See above.\n  #serializer: Serializer<unknown, V> = JSON;\n  #hadUserAction?: boolean;\n  #disabled?: boolean;\n\n  constructor(\n      readonly name: string, readonly defaultValue: V, private readonly eventSupport: ObjectWrapper<GenericEvents>,\n      readonly storage: SettingsStorage) {\n    storage.register(name);\n  }\n\n  setSerializer(serializer: Serializer<unknown, V>): void {\n    this.#serializer = serializer;\n  }\n\n  addChangeListener(listener: (arg0: EventTargetEvent<V>) => void, thisObject?: Object): EventDescriptor {\n    return this.eventSupport.addEventListener(this.name, listener, thisObject);\n  }\n\n  removeChangeListener(listener: (arg0: EventTargetEvent<V>) => void, thisObject?: Object): void {\n    this.eventSupport.removeEventListener(this.name, listener, thisObject);\n  }\n\n  title(): string {\n    if (this.#titleInternal) {\n      return this.#titleInternal;\n    }\n    if (this.#titleFunction) {\n      return this.#titleFunction();\n    }\n    return '';\n  }\n\n  setTitleFunction(titleFunction: (() => Platform.UIString.LocalizedString)|undefined): void {\n    if (titleFunction) {\n      this.#titleFunction = titleFunction;\n    }\n  }\n\n  setTitle(title: string): void {\n    this.#titleInternal = title;\n  }\n\n  setRequiresUserAction(requiresUserAction: boolean): void {\n    this.#requiresUserAction = requiresUserAction;\n  }\n\n  disabled(): boolean {\n    return this.#disabled || false;\n  }\n\n  setDisabled(disabled: boolean): void {\n    this.#disabled = disabled;\n    this.eventSupport.dispatchEventToListeners(this.name);\n  }\n\n  get(): V {\n    if (this.#requiresUserAction && !this.#hadUserAction) {\n      return this.defaultValue;\n    }\n\n    if (typeof this.#value !== 'undefined') {\n      return this.#value;\n    }\n\n    this.#value = this.defaultValue;\n    if (this.storage.has(this.name)) {\n      try {\n        this.#value = this.#serializer.parse(this.storage.get(this.name));\n      } catch (e) {\n        this.storage.remove(this.name);\n      }\n    }\n    return this.#value;\n  }\n\n  async forceGet(): Promise<V> {\n    const name = this.name;\n    const oldValue = this.storage.get(name);\n    const value = await this.storage.forceGet(name);\n    this.#value = this.defaultValue;\n    if (value) {\n      try {\n        this.#value = this.#serializer.parse(value);\n      } catch (e) {\n        this.storage.remove(this.name);\n      }\n    }\n\n    if (oldValue !== value) {\n      this.eventSupport.dispatchEventToListeners(this.name, this.#value);\n    }\n\n    return this.#value;\n  }\n\n  set(value: V): void {\n    this.#hadUserAction = true;\n    this.#value = value;\n    try {\n      const settingString = this.#serializer.stringify(value);\n      try {\n        this.storage.set(this.name, settingString);\n      } catch (e) {\n        this.printSettingsSavingError(e.message, this.name, settingString);\n      }\n    } catch (e) {\n      Console.instance().error('Cannot stringify setting with name: ' + this.name + ', error: ' + e.message);\n    }\n    this.eventSupport.dispatchEventToListeners(this.name, value);\n  }\n\n  setRegistration(registration: SettingRegistration): void {\n    this.#registration = registration;\n  }\n\n  type(): SettingType|null {\n    if (this.#registration) {\n      return this.#registration.settingType;\n    }\n    return null;\n  }\n\n  options(): SimpleSettingOption[] {\n    if (this.#registration && this.#registration.options) {\n      return this.#registration.options.map(opt => {\n        const {value, title, text, raw} = opt;\n        return {\n          value: value,\n          title: title(),\n          text: typeof text === 'function' ? text() : text,\n          raw: raw,\n        };\n      });\n    }\n    return [];\n  }\n\n  reloadRequired(): boolean|null {\n    if (this.#registration) {\n      return this.#registration.reloadRequired || null;\n    }\n    return null;\n  }\n\n  category(): SettingCategory|null {\n    if (this.#registration) {\n      return this.#registration.category || null;\n    }\n    return null;\n  }\n\n  tags(): string|null {\n    if (this.#registration && this.#registration.tags) {\n      // Get localized keys and separate by null character to prevent fuzzy matching from matching across them.\n      return this.#registration.tags.map(tag => tag()).join('\\0');\n    }\n    return null;\n  }\n\n  order(): number|null {\n    if (this.#registration) {\n      return this.#registration.order || null;\n    }\n    return null;\n  }\n\n  private printSettingsSavingError(message: string, name: string, value: string): void {\n    const errorMessage =\n        'Error saving setting with name: ' + this.name + ', value length: ' + value.length + '. Error: ' + message;\n    console.error(errorMessage);\n    Console.instance().error(errorMessage);\n    this.storage.dumpSizes();\n  }\n}\n\n// TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class RegExpSetting extends Setting<any> {\n  #regexFlags: string|undefined;\n  #regex?: RegExp|null;\n\n  constructor(\n      name: string, defaultValue: string, eventSupport: ObjectWrapper<GenericEvents>, storage: SettingsStorage,\n      regexFlags?: string) {\n    super(name, defaultValue ? [{pattern: defaultValue}] : [], eventSupport, storage);\n    this.#regexFlags = regexFlags;\n  }\n\n  get(): string {\n    const result = [];\n    const items = this.getAsArray();\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      if (item.pattern && !item.disabled) {\n        result.push(item.pattern);\n      }\n    }\n    return result.join('|');\n  }\n\n  getAsArray(): RegExpSettingItem[] {\n    return super.get();\n  }\n\n  set(value: string): void {\n    this.setAsArray([{pattern: value, disabled: false}]);\n  }\n\n  setAsArray(value: RegExpSettingItem[]): void {\n    this.#regex = undefined;\n    super.set(value);\n  }\n\n  asRegExp(): RegExp|null {\n    if (typeof this.#regex !== 'undefined') {\n      return this.#regex;\n    }\n    this.#regex = null;\n    try {\n      const pattern = this.get();\n      if (pattern) {\n        this.#regex = new RegExp(pattern, this.#regexFlags || '');\n      }\n    } catch (e) {\n    }\n    return this.#regex;\n  }\n}\n\nexport class VersionController {\n  static get currentVersionName(): string {\n    return 'inspectorVersion';\n  }\n\n  static get currentVersion(): number {\n    return 31;\n  }\n\n  updateVersion(): void {\n    const localStorageVersion = window.localStorage ? window.localStorage[VersionController.currentVersionName] : 0;\n    const versionSetting = Settings.instance().createSetting(VersionController.currentVersionName, 0);\n    const currentVersion = VersionController.currentVersion;\n    const oldVersion = versionSetting.get() || parseInt(localStorageVersion || '0', 10);\n    if (oldVersion === 0) {\n      // First run, no need to do anything.\n      versionSetting.set(currentVersion);\n      return;\n    }\n    const methodsToRun = this.methodsToRunToUpdateVersion(oldVersion, currentVersion);\n    for (const method of methodsToRun) {\n      // @ts-ignore Special version method matching\n      this[method].call(this);\n    }\n    versionSetting.set(currentVersion);\n  }\n\n  private methodsToRunToUpdateVersion(oldVersion: number, currentVersion: number): string[] {\n    const result = [];\n    for (let i = oldVersion; i < currentVersion; ++i) {\n      result.push('updateVersionFrom' + i + 'To' + (i + 1));\n    }\n    return result;\n  }\n\n  private updateVersionFrom0To1(): void {\n    this.clearBreakpointsWhenTooMany(Settings.instance().createLocalSetting('breakpoints', []), 500000);\n  }\n\n  private updateVersionFrom1To2(): void {\n    Settings.instance().createSetting('previouslyViewedFiles', []).set([]);\n  }\n\n  private updateVersionFrom2To3(): void {\n    Settings.instance().createSetting('fileSystemMapping', {}).set({});\n    removeSetting(Settings.instance().createSetting('fileMappingEntries', []));\n  }\n\n  private updateVersionFrom3To4(): void {\n    const advancedMode = Settings.instance().createSetting('showHeaSnapshotObjectsHiddenProperties', false);\n    moduleSetting('showAdvancedHeapSnapshotProperties').set(advancedMode.get());\n    removeSetting(advancedMode);\n  }\n\n  private updateVersionFrom4To5(): void {\n    const settingNames: {\n      [x: string]: string,\n    } = {\n      'FileSystemViewSidebarWidth': 'fileSystemViewSplitViewState',\n      'elementsSidebarWidth': 'elementsPanelSplitViewState',\n      'StylesPaneSplitRatio': 'stylesPaneSplitViewState',\n      'heapSnapshotRetainersViewSize': 'heapSnapshotSplitViewState',\n      'InspectorView.splitView': 'InspectorView.splitViewState',\n      'InspectorView.screencastSplitView': 'InspectorView.screencastSplitViewState',\n      'Inspector.drawerSplitView': 'Inspector.drawerSplitViewState',\n      'layerDetailsSplitView': 'layerDetailsSplitViewState',\n      'networkSidebarWidth': 'networkPanelSplitViewState',\n      'sourcesSidebarWidth': 'sourcesPanelSplitViewState',\n      'scriptsPanelNavigatorSidebarWidth': 'sourcesPanelNavigatorSplitViewState',\n      'sourcesPanelSplitSidebarRatio': 'sourcesPanelDebuggerSidebarSplitViewState',\n      'timeline-details': 'timelinePanelDetailsSplitViewState',\n      'timeline-split': 'timelinePanelRecorsSplitViewState',\n      'timeline-view': 'timelinePanelTimelineStackSplitViewState',\n      'auditsSidebarWidth': 'auditsPanelSplitViewState',\n      'layersSidebarWidth': 'layersPanelSplitViewState',\n      'profilesSidebarWidth': 'profilesPanelSplitViewState',\n      'resourcesSidebarWidth': 'resourcesPanelSplitViewState',\n    };\n    const empty = {};\n    for (const oldName in settingNames) {\n      const newName = settingNames[oldName];\n      const oldNameH = oldName + 'H';\n\n      let newValue: {}|null = null;\n      const oldSetting = Settings.instance().createSetting(oldName, empty);\n      if (oldSetting.get() !== empty) {\n        newValue = newValue || {};\n        // @ts-expect-error\n        newValue.vertical = {};\n        // @ts-expect-error\n        newValue.vertical.size = oldSetting.get();\n        removeSetting(oldSetting);\n      }\n      const oldSettingH = Settings.instance().createSetting(oldNameH, empty);\n      if (oldSettingH.get() !== empty) {\n        newValue = newValue || {};\n        // @ts-expect-error\n        newValue.horizontal = {};\n        // @ts-expect-error\n        newValue.horizontal.size = oldSettingH.get();\n        removeSetting(oldSettingH);\n      }\n      if (newValue) {\n        Settings.instance().createSetting(newName, {}).set(newValue);\n      }\n    }\n  }\n\n  private updateVersionFrom5To6(): void {\n    const settingNames: {\n      [x: string]: string,\n    } = {\n      'debuggerSidebarHidden': 'sourcesPanelSplitViewState',\n      'navigatorHidden': 'sourcesPanelNavigatorSplitViewState',\n      'WebInspector.Drawer.showOnLoad': 'Inspector.drawerSplitViewState',\n    };\n\n    for (const oldName in settingNames) {\n      const oldSetting = Settings.instance().createSetting(oldName, null);\n      if (oldSetting.get() === null) {\n        removeSetting(oldSetting);\n        continue;\n      }\n\n      const newName = settingNames[oldName];\n      const invert = oldName === 'WebInspector.Drawer.showOnLoad';\n      const hidden = oldSetting.get() !== invert;\n      removeSetting(oldSetting);\n      const showMode = hidden ? 'OnlyMain' : 'Both';\n\n      const newSetting = Settings.instance().createSetting(newName, {});\n      const newValue = newSetting.get() || {};\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      newValue.vertical = newValue.vertical || {};\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      newValue.vertical.showMode = showMode;\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      newValue.horizontal = newValue.horizontal || {};\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // @ts-expect-error\n      newValue.horizontal.showMode = showMode;\n      newSetting.set(newValue);\n    }\n  }\n\n  private updateVersionFrom6To7(): void {\n    const settingNames = {\n      'sourcesPanelNavigatorSplitViewState': 'sourcesPanelNavigatorSplitViewState',\n      'elementsPanelSplitViewState': 'elementsPanelSplitViewState',\n      'stylesPaneSplitViewState': 'stylesPaneSplitViewState',\n      'sourcesPanelDebuggerSidebarSplitViewState': 'sourcesPanelDebuggerSidebarSplitViewState',\n    };\n\n    const empty = {};\n    for (const name in settingNames) {\n      const setting =\n          Settings.instance().createSetting<{vertical?: {size?: number}, horizontal?: {size?: number}}>(name, empty);\n      const value = setting.get();\n      if (value === empty) {\n        continue;\n      }\n      // Zero out saved percentage sizes, and they will be restored to defaults.\n      if (value.vertical && value.vertical.size && value.vertical.size < 1) {\n        value.vertical.size = 0;\n      }\n      if (value.horizontal && value.horizontal.size && value.horizontal.size < 1) {\n        value.horizontal.size = 0;\n      }\n      setting.set(value);\n    }\n  }\n\n  private updateVersionFrom7To8(): void {\n  }\n\n  private updateVersionFrom8To9(): void {\n    const settingNames = ['skipStackFramesPattern', 'workspaceFolderExcludePattern'];\n\n    for (let i = 0; i < settingNames.length; ++i) {\n      const setting = Settings.instance().createSetting<string|unknown[]>(settingNames[i], '');\n      let value = setting.get();\n      if (!value) {\n        return;\n      }\n      if (typeof value === 'string') {\n        value = [value];\n      }\n      for (let j = 0; j < value.length; ++j) {\n        if (typeof value[j] === 'string') {\n          value[j] = {pattern: value[j]};\n        }\n      }\n      setting.set(value);\n    }\n  }\n\n  private updateVersionFrom9To10(): void {\n    // This one is localStorage specific, which is fine.\n    if (!window.localStorage) {\n      return;\n    }\n    for (const key in window.localStorage) {\n      if (key.startsWith('revision-history')) {\n        window.localStorage.removeItem(key);\n      }\n    }\n  }\n\n  private updateVersionFrom10To11(): void {\n    const oldSettingName = 'customDevicePresets';\n    const newSettingName = 'customEmulatedDeviceList';\n    const oldSetting = Settings.instance().createSetting<unknown>(oldSettingName, undefined);\n    const list = oldSetting.get();\n    if (!Array.isArray(list)) {\n      return;\n    }\n    const newList = [];\n    for (let i = 0; i < list.length; ++i) {\n      const value = list[i];\n      const device: {\n        // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        [x: string]: any,\n      } = {};\n      device['title'] = value['title'];\n      device['type'] = 'unknown';\n      device['user-agent'] = value['userAgent'];\n      device['capabilities'] = [];\n      if (value['touch']) {\n        device['capabilities'].push('touch');\n      }\n      if (value['mobile']) {\n        device['capabilities'].push('mobile');\n      }\n      device['screen'] = {};\n      device['screen']['vertical'] = {width: value['width'], height: value['height']};\n      device['screen']['horizontal'] = {width: value['height'], height: value['width']};\n      device['screen']['device-pixel-ratio'] = value['deviceScaleFactor'];\n      device['modes'] = [];\n      device['show-by-default'] = true;\n      device['show'] = 'Default';\n      newList.push(device);\n    }\n    if (newList.length) {\n      Settings.instance().createSetting<unknown[]>(newSettingName, []).set(newList);\n    }\n    removeSetting(oldSetting);\n  }\n\n  private updateVersionFrom11To12(): void {\n    this.migrateSettingsFromLocalStorage();\n  }\n\n  private updateVersionFrom12To13(): void {\n    this.migrateSettingsFromLocalStorage();\n    removeSetting(Settings.instance().createSetting('timelineOverviewMode', ''));\n  }\n\n  private updateVersionFrom13To14(): void {\n    const defaultValue = {'throughput': -1, 'latency': 0};\n    Settings.instance().createSetting('networkConditions', defaultValue).set(defaultValue);\n  }\n\n  private updateVersionFrom14To15(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const setting = Settings.instance().createLocalSetting<any>('workspaceExcludedFolders', {});\n    const oldValue = setting.get();\n    const newValue: {\n      [x: string]: string[],\n    } = {};\n    for (const fileSystemPath in oldValue) {\n      newValue[fileSystemPath] = [];\n      for (const entry of oldValue[fileSystemPath]) {\n        newValue[fileSystemPath].push(entry.path);\n      }\n    }\n    setting.set(newValue);\n  }\n\n  private updateVersionFrom15To16(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const setting = Settings.instance().createSetting<any>('InspectorView.panelOrder', {});\n    const tabOrders = setting.get();\n    for (const key of Object.keys(tabOrders)) {\n      tabOrders[key] = (tabOrders[key] + 1) * 10;\n    }\n    setting.set(tabOrders);\n  }\n\n  private updateVersionFrom16To17(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const setting = Settings.instance().createSetting<any>('networkConditionsCustomProfiles', []);\n    const oldValue = setting.get();\n    const newValue = [];\n    if (Array.isArray(oldValue)) {\n      for (const preset of oldValue) {\n        if (typeof preset.title === 'string' && typeof preset.value === 'object' &&\n            typeof preset.value.throughput === 'number' && typeof preset.value.latency === 'number') {\n          newValue.push({\n            title: preset.title,\n            value: {download: preset.value.throughput, upload: preset.value.throughput, latency: preset.value.latency},\n          });\n        }\n      }\n    }\n    setting.set(newValue);\n  }\n\n  private updateVersionFrom17To18(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const setting = Settings.instance().createLocalSetting<any>('workspaceExcludedFolders', {});\n    const oldValue = setting.get();\n    const newValue: {\n      [x: string]: string,\n    } = {};\n    for (const oldKey in oldValue) {\n      let newKey = oldKey.replace(/\\\\/g, '/');\n      if (!newKey.startsWith('file://')) {\n        if (newKey.startsWith('/')) {\n          newKey = 'file://' + newKey;\n        } else {\n          newKey = 'file:///' + newKey;\n        }\n      }\n      newValue[newKey] = oldValue[oldKey];\n    }\n    setting.set(newValue);\n  }\n\n  private updateVersionFrom18To19(): void {\n    const defaultColumns = {status: true, type: true, initiator: true, size: true, time: true};\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const visibleColumnSettings = Settings.instance().createSetting<any>('networkLogColumnsVisibility', defaultColumns);\n    const visibleColumns = visibleColumnSettings.get();\n    visibleColumns.name = true;\n    visibleColumns.timeline = true;\n\n    const configs: {\n      [x: string]: {\n        visible: number,\n      },\n    } = {};\n    for (const columnId in visibleColumns) {\n      if (!visibleColumns.hasOwnProperty(columnId)) {\n        continue;\n      }\n      configs[columnId.toLowerCase()] = {visible: visibleColumns[columnId]};\n    }\n    const newSetting = Settings.instance().createSetting('networkLogColumns', {});\n    newSetting.set(configs);\n    removeSetting(visibleColumnSettings);\n  }\n\n  private updateVersionFrom19To20(): void {\n    const oldSetting = Settings.instance().createSetting('InspectorView.panelOrder', {});\n    const newSetting = Settings.instance().createSetting('panel-tabOrder', {});\n    newSetting.set(oldSetting.get());\n    removeSetting(oldSetting);\n  }\n\n  private updateVersionFrom20To21(): void {\n    const networkColumns = Settings.instance().createSetting('networkLogColumns', {});\n    const columns = (networkColumns.get() as {\n      [x: string]: string,\n    });\n    delete columns['timeline'];\n    delete columns['waterfall'];\n    networkColumns.set(columns);\n  }\n\n  private updateVersionFrom21To22(): void {\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const breakpointsSetting = Settings.instance().createLocalSetting<any>('breakpoints', []);\n    const breakpoints = breakpointsSetting.get();\n    for (const breakpoint of breakpoints) {\n      breakpoint['url'] = breakpoint['sourceFileId'];\n      delete breakpoint['sourceFileId'];\n    }\n    breakpointsSetting.set(breakpoints);\n  }\n\n  private updateVersionFrom22To23(): void {\n    // This update is no-op.\n  }\n\n  private updateVersionFrom23To24(): void {\n    const oldSetting = Settings.instance().createSetting('searchInContentScripts', false);\n    const newSetting = Settings.instance().createSetting('searchInAnonymousAndContentScripts', false);\n    newSetting.set(oldSetting.get());\n    removeSetting(oldSetting);\n  }\n\n  private updateVersionFrom24To25(): void {\n    const defaultColumns = {status: true, type: true, initiator: true, size: true, time: true};\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const networkLogColumnsSetting = Settings.instance().createSetting<any>('networkLogColumns', defaultColumns);\n    const columns = networkLogColumnsSetting.get();\n    delete columns.product;\n    networkLogColumnsSetting.set(columns);\n  }\n\n  private updateVersionFrom25To26(): void {\n    const oldSetting = Settings.instance().createSetting('messageURLFilters', {});\n    const urls = Object.keys(oldSetting.get());\n    const textFilter = urls.map(url => `-url:${url}`).join(' ');\n    if (textFilter) {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const textFilterSetting = Settings.instance().createSetting<any>('console.textFilter', '');\n      const suffix = textFilterSetting.get() ? ` ${textFilterSetting.get()}` : '';\n      textFilterSetting.set(`${textFilter}${suffix}`);\n    }\n    removeSetting(oldSetting);\n  }\n\n  private updateVersionFrom26To27(): void {\n    function renameKeyInObjectSetting(settingName: string, from: string, to: string): void {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const setting = Settings.instance().createSetting<any>(settingName, {});\n      const value = setting.get();\n      if (from in value) {\n        value[to] = value[from];\n        delete value[from];\n        setting.set(value);\n      }\n    }\n\n    function renameInStringSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting(settingName, '');\n      const value = setting.get();\n      if (value === from) {\n        setting.set(to);\n      }\n    }\n\n    renameKeyInObjectSetting('panel-tabOrder', 'audits2', 'audits');\n    renameKeyInObjectSetting('panel-closeableTabs', 'audits2', 'audits');\n    renameInStringSetting('panel-selectedTab', 'audits2', 'audits');\n  }\n\n  private updateVersionFrom27To28(): void {\n    const setting = Settings.instance().createSetting('uiTheme', 'systemPreferred');\n    if (setting.get() === 'default') {\n      setting.set('systemPreferred');\n    }\n  }\n\n  private updateVersionFrom28To29(): void {\n    function renameKeyInObjectSetting(settingName: string, from: string, to: string): void {\n      // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const setting = Settings.instance().createSetting<any>(settingName, {});\n      const value = setting.get();\n      if (from in value) {\n        value[to] = value[from];\n        delete value[from];\n        setting.set(value);\n      }\n    }\n\n    function renameInStringSetting(settingName: string, from: string, to: string): void {\n      const setting = Settings.instance().createSetting(settingName, '');\n      const value = setting.get();\n      if (value === from) {\n        setting.set(to);\n      }\n    }\n\n    renameKeyInObjectSetting('panel-tabOrder', 'audits', 'lighthouse');\n    renameKeyInObjectSetting('panel-closeableTabs', 'audits', 'lighthouse');\n    renameInStringSetting('panel-selectedTab', 'audits', 'lighthouse');\n  }\n\n  private updateVersionFrom29To30(): void {\n    // Create new location agnostic setting\n    const closeableTabSetting = Settings.instance().createSetting('closeableTabs', {});\n\n    // Read current settings\n    const panelCloseableTabSetting = Settings.instance().createSetting('panel-closeableTabs', {});\n    const drawerCloseableTabSetting = Settings.instance().createSetting('drawer-view-closeableTabs', {});\n    const openTabsInPanel = panelCloseableTabSetting.get();\n    const openTabsInDrawer = panelCloseableTabSetting.get();\n\n    // Set #value of new setting\n    const newValue = Object.assign(openTabsInDrawer, openTabsInPanel);\n    closeableTabSetting.set(newValue);\n\n    // Remove old settings\n    removeSetting(panelCloseableTabSetting);\n    removeSetting(drawerCloseableTabSetting);\n  }\n\n  private updateVersionFrom30To31(): void {\n    // Remove recorder_recordings setting that was used for storing recordings\n    // by an old recorder experiment.\n    const recordingsSetting = Settings.instance().createSetting('recorder_recordings', []);\n    removeSetting(recordingsSetting);\n  }\n\n  private migrateSettingsFromLocalStorage(): void {\n    // This step migrates all the settings except for the ones below into the browser profile.\n    const localSettings = new Set<string>([\n      'advancedSearchConfig',\n      'breakpoints',\n      'consoleHistory',\n      'domBreakpoints',\n      'eventListenerBreakpoints',\n      'fileSystemMapping',\n      'lastSelectedSourcesSidebarPaneTab',\n      'previouslyViewedFiles',\n      'savedURLs',\n      'watchExpressions',\n      'workspaceExcludedFolders',\n      'xhrBreakpoints',\n    ]);\n    if (!window.localStorage) {\n      return;\n    }\n\n    for (const key in window.localStorage) {\n      if (localSettings.has(key)) {\n        continue;\n      }\n      const value = window.localStorage[key];\n      window.localStorage.removeItem(key);\n      Settings.instance().globalStorage.set(key, value);\n    }\n  }\n\n  private clearBreakpointsWhenTooMany(breakpointsSetting: Setting<unknown[]>, maxBreakpointsCount: number): void {\n    // If there are too many breakpoints in a storage, it is likely due to a recent bug that caused\n    // periodical breakpoints duplication leading to inspector slowness.\n    if (breakpointsSetting.get().length > maxBreakpointsCount) {\n      breakpointsSetting.set([]);\n    }\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum SettingStorageType {\n  /**\n   * Synced storage persists settings with the active Chrome profile but also\n   * syncs the settings across devices via Chrome Sync.\n   */\n  Synced = 'Synced',\n  /** Global storage persists settings with the active Chrome profile */\n  Global = 'Global',\n  /** Uses Window.localStorage */\n  Local = 'Local',\n  /** Session storage dies when DevTools window closes */\n  Session = 'Session',\n}\n\nexport function moduleSetting(settingName: string): Setting<unknown> {\n  return Settings.instance().moduleSetting(settingName);\n}\n\nexport function settingForTest(settingName: string): Setting<unknown> {\n  return Settings.instance().settingForTest(settingName);\n}\n\nexport function detectColorFormat(color: Color): Format {\n  const cf = Format;\n  let format;\n  const formatSetting = Settings.instance().moduleSetting('colorFormat').get();\n  if (formatSetting === cf.Original) {\n    format = cf.Original;\n  } else if (formatSetting === cf.RGB) {\n    format = cf.RGB;\n  } else if (formatSetting === cf.HSL) {\n    format = cf.HSL;\n  } else if (formatSetting === cf.HWB) {\n    format = cf.HWB;\n  } else if (formatSetting === cf.HEX) {\n    format = color.detectHEXFormat();\n  } else {\n    format = cf.RGB;\n  }\n\n  return format;\n}\n\nexport {\n  getLocalizedSettingsCategory,\n  getRegisteredSettings,\n  maybeRemoveSettingExtension,\n  registerSettingExtension,\n  RegExpSettingItem,\n  SettingCategory,\n  SettingExtensionOption,\n  SettingRegistration,\n  SettingType,\n  registerSettingsForTest,\n  resetSettings,\n};\n\nexport interface Serializer<I, O> {\n  stringify: (value: I) => string;\n  parse: (value: string) => O;\n}\n\nexport interface SimpleSettingOption {\n  value: string|boolean;\n  title: string;\n  text?: string;\n  raw?: boolean;\n}\n"]}