{"version":3,"file":"SimpleHistoryManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/SimpleHistoryManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2014 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport interface HistoryEntry {\n  valid(): boolean;\n\n  reveal(): void;\n}\n\nexport class SimpleHistoryManager {\n  #entries: HistoryEntry[];\n  #activeEntryIndex: number;\n  #coalescingReadonly: number;\n  readonly #historyDepth: number;\n  constructor(historyDepth: number) {\n    this.#entries = [];\n    this.#activeEntryIndex = -1;\n\n    // Lock is used to make sure that reveal() does not\n    // make any changes to the history while we are\n    // rolling back or rolling over.\n    this.#coalescingReadonly = 0;\n    this.#historyDepth = historyDepth;\n  }\n\n  private readOnlyLock(): void {\n    ++this.#coalescingReadonly;\n  }\n\n  private releaseReadOnlyLock(): void {\n    --this.#coalescingReadonly;\n  }\n\n  private getPreviousValidIndex(): number {\n    if (this.empty()) {\n      return -1;\n    }\n\n    let revealIndex = this.#activeEntryIndex - 1;\n    while (revealIndex >= 0 && !this.#entries[revealIndex].valid()) {\n      --revealIndex;\n    }\n    if (revealIndex < 0) {\n      return -1;\n    }\n\n    return revealIndex;\n  }\n\n  private getNextValidIndex(): number {\n    let revealIndex = this.#activeEntryIndex + 1;\n\n    while (revealIndex < this.#entries.length && !this.#entries[revealIndex].valid()) {\n      ++revealIndex;\n    }\n    if (revealIndex >= this.#entries.length) {\n      return -1;\n    }\n\n    return revealIndex;\n  }\n\n  private readOnly(): boolean {\n    return Boolean(this.#coalescingReadonly);\n  }\n\n  filterOut(filterOutCallback: (arg0: HistoryEntry) => boolean): void {\n    if (this.readOnly()) {\n      return;\n    }\n    const filteredEntries = [];\n    let removedBeforeActiveEntry = 0;\n    for (let i = 0; i < this.#entries.length; ++i) {\n      if (!filterOutCallback(this.#entries[i])) {\n        filteredEntries.push(this.#entries[i]);\n      } else if (i <= this.#activeEntryIndex) {\n        ++removedBeforeActiveEntry;\n      }\n    }\n    this.#entries = filteredEntries;\n    this.#activeEntryIndex = Math.max(0, this.#activeEntryIndex - removedBeforeActiveEntry);\n  }\n\n  empty(): boolean {\n    return !this.#entries.length;\n  }\n\n  active(): HistoryEntry|null {\n    return this.empty() ? null : this.#entries[this.#activeEntryIndex];\n  }\n\n  push(entry: HistoryEntry): void {\n    if (this.readOnly()) {\n      return;\n    }\n    if (!this.empty()) {\n      this.#entries.splice(this.#activeEntryIndex + 1);\n    }\n    this.#entries.push(entry);\n    if (this.#entries.length > this.#historyDepth) {\n      this.#entries.shift();\n    }\n    this.#activeEntryIndex = this.#entries.length - 1;\n  }\n\n  canRollback(): boolean {\n    return this.getPreviousValidIndex() >= 0;\n  }\n\n  canRollover(): boolean {\n    return this.getNextValidIndex() >= 0;\n  }\n\n  rollback(): boolean {\n    const revealIndex = this.getPreviousValidIndex();\n    if (revealIndex === -1) {\n      return false;\n    }\n    this.readOnlyLock();\n    this.#activeEntryIndex = revealIndex;\n    this.#entries[revealIndex].reveal();\n    this.releaseReadOnlyLock();\n\n    return true;\n  }\n\n  rollover(): boolean {\n    const revealIndex = this.getNextValidIndex();\n    if (revealIndex === -1) {\n      return false;\n    }\n\n    this.readOnlyLock();\n    this.#activeEntryIndex = revealIndex;\n    this.#entries[revealIndex].reveal();\n    this.releaseReadOnlyLock();\n\n    return true;\n  }\n}\n"]}