{"version":3,"file":"Trie.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Trie.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport class Trie {\n  #size!: number;\n  #root: number;\n  #edges!: {\n    [x: string]: number,\n  }[];\n  #isWord!: boolean[];\n  #wordsInSubtree!: number[];\n  #freeNodes!: number[];\n\n  constructor() {\n    this.#root = 0;\n    this.clear();\n  }\n\n  add(word: string): void {\n    let node: number = this.#root;\n    ++this.#wordsInSubtree[this.#root];\n    for (let i = 0; i < word.length; ++i) {\n      const edge = word[i];\n      let next: number = this.#edges[node][edge];\n      if (!next) {\n        if (this.#freeNodes.length) {\n          next = (this.#freeNodes.pop() as number);\n        } else {\n          next = this.#size++;\n          this.#isWord.push(false);\n          this.#wordsInSubtree.push(0);\n          this.#edges.push(Object.create(null));\n        }\n        this.#edges[node][edge] = next;\n      }\n      ++this.#wordsInSubtree[next];\n      node = next;\n    }\n    this.#isWord[node] = true;\n  }\n\n  remove(word: string): boolean {\n    if (!this.has(word)) {\n      return false;\n    }\n    let node: number = this.#root;\n    --this.#wordsInSubtree[this.#root];\n    for (let i = 0; i < word.length; ++i) {\n      const edge = word[i];\n      const next = this.#edges[node][edge];\n      if (!--this.#wordsInSubtree[next]) {\n        delete this.#edges[node][edge];\n        this.#freeNodes.push(next);\n      }\n      node = next;\n    }\n    this.#isWord[node] = false;\n    return true;\n  }\n\n  has(word: string): boolean {\n    let node: number = this.#root;\n    for (let i = 0; i < word.length; ++i) {\n      node = this.#edges[node][word[i]];\n      if (!node) {\n        return false;\n      }\n    }\n    return this.#isWord[node];\n  }\n\n  words(prefix?: string): string[] {\n    prefix = prefix || '';\n    let node: number = this.#root;\n    for (let i = 0; i < prefix.length; ++i) {\n      node = this.#edges[node][prefix[i]];\n      if (!node) {\n        return [];\n      }\n    }\n    const results: string[] = [];\n    this.dfs(node, prefix, results);\n    return results;\n  }\n\n  private dfs(node: number, prefix: string, results: string[]): void {\n    if (this.#isWord[node]) {\n      results.push(prefix);\n    }\n    const edges = this.#edges[node];\n    for (const edge in edges) {\n      this.dfs(edges[edge], prefix + edge, results);\n    }\n  }\n\n  longestPrefix(word: string, fullWordOnly: boolean): string {\n    let node: number = this.#root;\n    let wordIndex = 0;\n    for (let i = 0; i < word.length; ++i) {\n      node = this.#edges[node][word[i]];\n      if (!node) {\n        break;\n      }\n      if (!fullWordOnly || this.#isWord[node]) {\n        wordIndex = i + 1;\n      }\n    }\n    return word.substring(0, wordIndex);\n  }\n\n  clear(): void {\n    this.#size = 1;\n    this.#root = 0;\n    this.#edges = [Object.create(null)];\n    this.#isWord = [false];\n    this.#wordsInSubtree = [0];\n    this.#freeNodes = [];\n  }\n}\n"]}