{"version":3,"file":"Mutex.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Mutex.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B;;;;;GAKG;AACH,MAAM,OAAO,KAAK;IAChB,OAAO,GAAG,KAAK,CAAC;IAChB,eAAe,GAAwC,EAAE,CAAC;IAE1D,OAAO;QACL,IAAI,QAAQ,GAAG,CAAC,QAAmB,EAAQ,EAAE,GAAE,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,IAAI,OAAO,CAAY,CAAC,OAAO,EAAQ,EAAE;YACvD,QAAQ,GAAG,OAAO,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,sBAAsB;QACpB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO;SACR;QACD,MAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QACvD,IAAI,iBAAiB,EAAE;YACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC7C;IACH,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;CACF","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\ntype ReleaseFn = () => void;\n\n/**\n * Use Mutex class to coordinate local concurrent operations.\n * Once `acquire` promise resolves, you hold the lock and must\n * call `release` function returned by `acquire` to release the\n * lock. Failing to `release` the lock may lead to deadlocks.\n */\nexport class Mutex {\n  #locked = false;\n  #acquiringQueue: Array<(release: ReleaseFn) => void> = [];\n\n  acquire(): Promise<ReleaseFn> {\n    let resolver = (_release: ReleaseFn): void => {};\n    const promise = new Promise<ReleaseFn>((resolve): void => {\n      resolver = resolve;\n    });\n    this.#acquiringQueue.push(resolver);\n    this.#processAcquiringQueue();\n    return promise;\n  }\n\n  #processAcquiringQueue(): void {\n    if (this.#locked) {\n      return;\n    }\n    const nextAquirePromise = this.#acquiringQueue.shift();\n    if (nextAquirePromise) {\n      this.#locked = true;\n      nextAquirePromise(this.#release.bind(this));\n    }\n  }\n\n  #release(): void {\n    this.#locked = false;\n    this.#processAcquiringQueue();\n  }\n}\n"]}