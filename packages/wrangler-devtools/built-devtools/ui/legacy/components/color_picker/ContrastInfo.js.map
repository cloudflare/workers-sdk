{"version":3,"file":"ContrastInfo.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/color_picker/ContrastInfo.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\n\nexport class ContrastInfo extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private readonly isNullInternal: boolean;\n  private contrastRatioInternal: number|null;\n  private contrastRatioAPCAInternal: number|null;\n  private contrastRatioThresholds: {\n    [x: string]: number,\n  }|null;\n  private readonly contrastRationAPCAThreshold: number|null;\n  private fgColor: Common.Color.Color|null;\n  private bgColorInternal: Common.Color.Color|null;\n  private colorFormatInternal!: string|undefined;\n  constructor(contrastInfo: ContrastInfoType|null) {\n    super();\n    this.isNullInternal = true;\n    this.contrastRatioInternal = null;\n    this.contrastRatioAPCAInternal = null;\n    this.contrastRatioThresholds = null;\n    this.contrastRationAPCAThreshold = 0;\n    this.fgColor = null;\n    this.bgColorInternal = null;\n\n    if (!contrastInfo) {\n      return;\n    }\n\n    if (!contrastInfo.computedFontSize || !contrastInfo.computedFontWeight || !contrastInfo.backgroundColors ||\n        contrastInfo.backgroundColors.length !== 1) {\n      return;\n    }\n\n    this.isNullInternal = false;\n    this.contrastRatioThresholds =\n        Common.ColorUtils.getContrastThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    this.contrastRationAPCAThreshold =\n        Common.ColorUtils.getAPCAThreshold(contrastInfo.computedFontSize, contrastInfo.computedFontWeight);\n    const bgColorText = contrastInfo.backgroundColors[0];\n    const bgColor = Common.Color.Color.parse(bgColorText);\n    if (bgColor) {\n      this.setBgColorInternal(bgColor);\n    }\n  }\n\n  isNull(): boolean {\n    return this.isNullInternal;\n  }\n\n  setColor(fgColor: Common.Color.Color, colorFormat?: string): void {\n    this.fgColor = fgColor;\n    this.colorFormatInternal = colorFormat;\n    this.updateContrastRatio();\n    this.dispatchEventToListeners(Events.ContrastInfoUpdated);\n  }\n\n  colorFormat(): string|undefined {\n    return this.colorFormatInternal;\n  }\n\n  color(): Common.Color.Color|null {\n    return this.fgColor;\n  }\n\n  contrastRatio(): number|null {\n    return this.contrastRatioInternal;\n  }\n\n  contrastRatioAPCA(): number|null {\n    return this.contrastRatioAPCAInternal;\n  }\n\n  contrastRatioAPCAThreshold(): number|null {\n    return this.contrastRationAPCAThreshold;\n  }\n\n  setBgColor(bgColor: Common.Color.Color): void {\n    this.setBgColorInternal(bgColor);\n    this.dispatchEventToListeners(Events.ContrastInfoUpdated);\n  }\n\n  private setBgColorInternal(bgColor: Common.Color.Color): void {\n    this.bgColorInternal = bgColor;\n\n    if (!this.fgColor) {\n      return;\n    }\n\n    const fgRGBA = this.fgColor.rgba();\n\n    // If we have a semi-transparent background color over an unknown\n    // background, draw the line for the \"worst case\" scenario: where\n    // the unknown background is the same color as the text.\n    if (bgColor.hasAlpha()) {\n      const blendedRGBA: number[] = Common.ColorUtils.blendColors(bgColor.rgba(), fgRGBA);\n      this.bgColorInternal = new Common.Color.Color(blendedRGBA, Common.Color.Format.RGBA);\n    }\n\n    this.contrastRatioInternal = Common.ColorUtils.contrastRatio(fgRGBA, this.bgColorInternal.rgba());\n    this.contrastRatioAPCAInternal =\n        Common.ColorUtils.contrastRatioAPCA(this.fgColor.rgba(), this.bgColorInternal.rgba());\n  }\n\n  bgColor(): Common.Color.Color|null {\n    return this.bgColorInternal;\n  }\n\n  private updateContrastRatio(): void {\n    if (!this.bgColorInternal || !this.fgColor) {\n      return;\n    }\n    this.contrastRatioInternal = Common.ColorUtils.contrastRatio(this.fgColor.rgba(), this.bgColorInternal.rgba());\n    this.contrastRatioAPCAInternal =\n        Common.ColorUtils.contrastRatioAPCA(this.fgColor.rgba(), this.bgColorInternal.rgba());\n  }\n\n  contrastRatioThreshold(level: string): number|null {\n    if (!this.contrastRatioThresholds) {\n      return null;\n    }\n    return this.contrastRatioThresholds[level];\n  }\n}\n\nexport const enum Events {\n  ContrastInfoUpdated = 'ContrastInfoUpdated',\n}\n\nexport type EventTypes = {\n  [Events.ContrastInfoUpdated]: void,\n};\n\nexport interface ContrastInfoType {\n  backgroundColors: string[]|null;\n  computedFontSize: string;\n  computedFontWeight: string;\n}\n"]}