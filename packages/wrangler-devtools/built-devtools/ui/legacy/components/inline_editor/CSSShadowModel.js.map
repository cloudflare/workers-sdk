{"version":3,"file":"CSSShadowModel.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/CSSShadowModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\n\nexport class CSSShadowModel {\n  private readonly isBoxShadowInternal: boolean;\n  private insetInternal: boolean;\n  private offsetXInternal: CSSLength;\n  private offsetYInternal: CSSLength;\n  private blurRadiusInternal: CSSLength;\n  private spreadRadiusInternal: CSSLength;\n  private colorInternal: Common.Color.Color;\n  private format: Part[];\n  private important: boolean;\n\n  constructor(isBoxShadow: boolean) {\n    this.isBoxShadowInternal = isBoxShadow;\n    this.insetInternal = false;\n    this.offsetXInternal = CSSLength.zero();\n    this.offsetYInternal = CSSLength.zero();\n    this.blurRadiusInternal = CSSLength.zero();\n    this.spreadRadiusInternal = CSSLength.zero();\n    this.colorInternal = (Common.Color.Color.parse('black') as Common.Color.Color);\n    this.format = [Part.OffsetX, Part.OffsetY];\n    this.important = false;\n  }\n\n  static parseTextShadow(text: string): CSSShadowModel[] {\n    return CSSShadowModel.parseShadow(text, false);\n  }\n\n  static parseBoxShadow(text: string): CSSShadowModel[] {\n    return CSSShadowModel.parseShadow(text, true);\n  }\n\n  private static parseShadow(text: string, isBoxShadow: boolean): CSSShadowModel[] {\n    const shadowTexts = [];\n    // Split by commas that aren't inside of color values to get the individual shadow values.\n    const splits = TextUtils.TextUtils.Utils.splitStringByRegexes(text, [Common.Color.Regex, /,/g]);\n    let currentIndex = 0;\n    for (let i = 0; i < splits.length; i++) {\n      if (splits[i].regexIndex === 1) {\n        const comma = splits[i];\n        shadowTexts.push(text.substring(currentIndex, comma.position));\n        currentIndex = comma.position + 1;\n      }\n    }\n    shadowTexts.push(text.substring(currentIndex, text.length));\n\n    const shadows = [];\n    for (let i = 0; i < shadowTexts.length; i++) {\n      const shadow = new CSSShadowModel(isBoxShadow);\n      shadow.format = [];\n      let nextPartAllowed = true;\n      const regexes = [/!important/gi, /inset/gi, Common.Color.Regex, CSSLength.Regex];\n      const results = TextUtils.TextUtils.Utils.splitStringByRegexes(shadowTexts[i], regexes);\n      for (let j = 0; j < results.length; j++) {\n        const result = results[j];\n        if (result.regexIndex === -1) {\n          // Don't allow anything other than inset, color, length values, and whitespace.\n          if (/\\S/.test(result.value)) {\n            return [];\n          }\n          // All parts must be separated by whitespace.\n          nextPartAllowed = true;\n        } else {\n          if (!nextPartAllowed) {\n            return [];\n          }\n          nextPartAllowed = false;\n          if (result.regexIndex === 0) {\n            shadow.important = true;\n            shadow.format.push(Part.Important);\n          } else if (result.regexIndex === 1) {\n            shadow.insetInternal = true;\n            shadow.format.push(Part.Inset);\n          } else if (result.regexIndex === 2) {\n            const color = Common.Color.Color.parse(result.value);\n            if (!color) {\n              return [];\n            }\n            shadow.colorInternal = color;\n            shadow.format.push(Part.Color);\n          } else if (result.regexIndex === 3) {\n            const length = CSSLength.parse(result.value);\n            if (!length) {\n              return [];\n            }\n            const previousPart = shadow.format.length > 0 ? shadow.format[shadow.format.length - 1] : '';\n            if (previousPart === Part.OffsetX) {\n              shadow.offsetYInternal = length;\n              shadow.format.push(Part.OffsetY);\n            } else if (previousPart === Part.OffsetY) {\n              shadow.blurRadiusInternal = length;\n              shadow.format.push(Part.BlurRadius);\n            } else if (previousPart === Part.BlurRadius) {\n              shadow.spreadRadiusInternal = length;\n              shadow.format.push(Part.SpreadRadius);\n            } else {\n              shadow.offsetXInternal = length;\n              shadow.format.push(Part.OffsetX);\n            }\n          }\n        }\n      }\n      if (invalidCount(shadow, Part.OffsetX, 1, 1) || invalidCount(shadow, Part.OffsetY, 1, 1) ||\n          invalidCount(shadow, Part.Color, 0, 1) || invalidCount(shadow, Part.BlurRadius, 0, 1) ||\n          invalidCount(shadow, Part.Inset, 0, isBoxShadow ? 1 : 0) ||\n          invalidCount(shadow, Part.SpreadRadius, 0, isBoxShadow ? 1 : 0) ||\n          invalidCount(shadow, Part.Important, 0, 1)) {\n        return [];\n      }\n      shadows.push(shadow);\n    }\n    return shadows;\n\n    function invalidCount(shadow: CSSShadowModel, part: string, min: number, max: number): boolean {\n      let count = 0;\n      for (let i = 0; i < shadow.format.length; i++) {\n        if (shadow.format[i] === part) {\n          count++;\n        }\n      }\n      return count < min || count > max;\n    }\n  }\n\n  setInset(inset: boolean): void {\n    this.insetInternal = inset;\n    if (this.format.indexOf(Part.Inset) === -1) {\n      this.format.unshift(Part.Inset);\n    }\n  }\n\n  setOffsetX(offsetX: CSSLength): void {\n    this.offsetXInternal = offsetX;\n  }\n\n  setOffsetY(offsetY: CSSLength): void {\n    this.offsetYInternal = offsetY;\n  }\n\n  setBlurRadius(blurRadius: CSSLength): void {\n    this.blurRadiusInternal = blurRadius;\n    if (this.format.indexOf(Part.BlurRadius) === -1) {\n      const yIndex = this.format.indexOf(Part.OffsetY);\n      this.format.splice(yIndex + 1, 0, Part.BlurRadius);\n    }\n  }\n\n  setSpreadRadius(spreadRadius: CSSLength): void {\n    this.spreadRadiusInternal = spreadRadius;\n    if (this.format.indexOf(Part.SpreadRadius) === -1) {\n      this.setBlurRadius(this.blurRadiusInternal);\n      const blurIndex = this.format.indexOf(Part.BlurRadius);\n      this.format.splice(blurIndex + 1, 0, Part.SpreadRadius);\n    }\n  }\n\n  setColor(color: Common.Color.Color): void {\n    this.colorInternal = color;\n    if (this.format.indexOf(Part.Color) === -1) {\n      this.format.push(Part.Color);\n    }\n  }\n\n  isBoxShadow(): boolean {\n    return this.isBoxShadowInternal;\n  }\n\n  inset(): boolean {\n    return this.insetInternal;\n  }\n\n  offsetX(): CSSLength {\n    return this.offsetXInternal;\n  }\n\n  offsetY(): CSSLength {\n    return this.offsetYInternal;\n  }\n\n  blurRadius(): CSSLength {\n    return this.blurRadiusInternal;\n  }\n\n  spreadRadius(): CSSLength {\n    return this.spreadRadiusInternal;\n  }\n\n  color(): Common.Color.Color {\n    return this.colorInternal;\n  }\n\n  asCSSText(): string {\n    const parts = [];\n    for (let i = 0; i < this.format.length; i++) {\n      const part = this.format[i];\n      if (part === Part.Inset && this.insetInternal) {\n        parts.push('inset');\n      } else if (part === Part.OffsetX) {\n        parts.push(this.offsetXInternal.asCSSText());\n      } else if (part === Part.OffsetY) {\n        parts.push(this.offsetYInternal.asCSSText());\n      } else if (part === Part.BlurRadius) {\n        parts.push(this.blurRadiusInternal.asCSSText());\n      } else if (part === Part.SpreadRadius) {\n        parts.push(this.spreadRadiusInternal.asCSSText());\n      } else if (part === Part.Color) {\n        parts.push(this.colorInternal.asString(this.colorInternal.format()));\n      } else if (part === Part.Important && this.important) {\n        parts.push('!important');\n      }\n    }\n    return parts.join(' ');\n  }\n}\n\nconst enum Part {\n  Inset = 'I',\n  OffsetX = 'X',\n  OffsetY = 'Y',\n  BlurRadius = 'B',\n  SpreadRadius = 'S',\n  Color = 'C',\n  Important = 'M',\n}\n\nexport class CSSLength {\n  amount: number;\n  unit: string;\n  constructor(amount: number, unit: string) {\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  static parse(text: string): CSSLength|null {\n    const lengthRegex = new RegExp('^(?:' + CSSLength.Regex.source + ')$', 'i');\n    const match = text.match(lengthRegex);\n    if (!match) {\n      return null;\n    }\n    if (match.length > 2 && match[2]) {\n      return new CSSLength(parseFloat(match[1]), match[2]);\n    }\n    return CSSLength.zero();\n  }\n\n  static zero(): CSSLength {\n    return new CSSLength(0, '');\n  }\n\n  asCSSText(): string {\n    return this.amount + this.unit;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  static Regex = (function(): RegExp {\n    const number = '([+-]?(?:[0-9]*[.])?[0-9]+(?:[eE][+-]?[0-9]+)?)';\n    const unit = '(ch|cm|em|ex|in|mm|pc|pt|px|rem|vh|vmax|vmin|vw)';\n    const zero = '[+-]?(?:0*[.])?0+(?:[eE][+-]?[0-9]+)?';\n    return new RegExp(number + unit + '|' + zero, 'gi');\n  })();\n}\n"]}