{"version":3,"file":"FilterSuggestionBuilder.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/FilterSuggestionBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nimport type {Suggestion} from './SuggestBox.js';\n\nexport class FilterSuggestionBuilder {\n  private readonly keys: string[];\n  private readonly valueSorter: ((arg0: string, arg1: Array<string>) => void)|\n      ((key: string, result: string[]) => string[]);\n  private readonly valuesMap: Map<string, Set<string>>;\n\n  constructor(keys: string[], valueSorter?: ((arg0: string, arg1: Array<string>) => void)) {\n    this.keys = keys;\n    this.valueSorter = valueSorter || ((key: string, result: string[]): string[] => result.sort());\n    this.valuesMap = new Map();\n  }\n\n  completions(expression: string, prefix: string, force?: boolean): Promise<Suggestion[]> {\n    if (!prefix && !force) {\n      return Promise.resolve([]);\n    }\n\n    const negative = prefix.startsWith('-');\n    if (negative) {\n      prefix = prefix.substring(1);\n    }\n    const modifier = negative ? '-' : '';\n    const valueDelimiterIndex = prefix.indexOf(':');\n\n    const suggestions: Suggestion[] = [];\n    if (valueDelimiterIndex === -1) {\n      const matcher = new RegExp('^' + Platform.StringUtilities.escapeForRegExp(prefix), 'i');\n      for (const key of this.keys) {\n        if (matcher.test(key)) {\n          suggestions.push(({text: modifier + key + ':'} as Suggestion));\n        }\n      }\n    } else {\n      const key = prefix.substring(0, valueDelimiterIndex).toLowerCase();\n      const value = prefix.substring(valueDelimiterIndex + 1);\n      const matcher = new RegExp('^' + Platform.StringUtilities.escapeForRegExp(value), 'i');\n      const values = Array.from(this.valuesMap.get(key) || new Set<string>());\n      this.valueSorter(key, values);\n      for (const item of values) {\n        if (matcher.test(item) && (item !== value)) {\n          suggestions.push(({text: modifier + key + ':' + item} as Suggestion));\n        }\n      }\n    }\n    return Promise.resolve(suggestions);\n  }\n\n  addItem(key: string, value?: string|null): void {\n    if (!value) {\n      return;\n    }\n\n    let set = this.valuesMap.get(key);\n    if (!set) {\n      set = (new Set() as Set<string>);\n      this.valuesMap.set(key, set);\n    }\n    set.add(value);\n  }\n\n  clear(): void {\n    this.valuesMap.clear();\n  }\n}\n"]}