{"version":3,"file":"Context.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/Context.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';  // eslint-disable-line @typescript-eslint/no-unused-vars\n\nimport type {ContextFlavorListener} from './ContextFlavorListener.js';\n\nlet contextInstance: Context;\n\ninterface ConstructorFn<T> {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new(...args: any[]): T;\n}\n\nexport class Context {\n  private readonly flavorsInternal: Map<ConstructorFn<unknown>, Object>;\n  private readonly eventDispatchers: Map<ConstructorFn<unknown>, Common.ObjectWrapper.ObjectWrapper<EventTypes>>;\n\n  private constructor() {\n    this.flavorsInternal = new Map();\n    this.eventDispatchers = new Map();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): Context {\n    const {forceNew} = opts;\n    if (!contextInstance || forceNew) {\n      contextInstance = new Context();\n    }\n\n    return contextInstance;\n  }\n\n  setFlavor<T>(flavorType: ConstructorFn<T>, flavorValue: T|null): void {\n    const value = this.flavorsInternal.get(flavorType) || null;\n    if (value === flavorValue) {\n      return;\n    }\n    if (flavorValue) {\n      this.flavorsInternal.set(flavorType, flavorValue);\n    } else {\n      this.flavorsInternal.delete(flavorType);\n    }\n\n    this.dispatchFlavorChange(flavorType, flavorValue);\n  }\n\n  private dispatchFlavorChange<T>(flavorType: ConstructorFn<T>, flavorValue: T|null): void {\n    for (const extension of getRegisteredListeners()) {\n      if (extension.contextTypes().includes(flavorType)) {\n        void extension.loadListener().then(instance => instance.flavorChanged(flavorValue));\n      }\n    }\n    const dispatcher = this.eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.dispatchEventToListeners(Events.FlavorChanged, flavorValue);\n  }\n\n  addFlavorChangeListener<T>(\n      flavorType: ConstructorFn<T>, listener: (arg0: Common.EventTarget.EventTargetEvent<T>) => void,\n      thisObject?: Object): void {\n    let dispatcher = this.eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      dispatcher = new Common.ObjectWrapper.ObjectWrapper<EventTypes>();\n      this.eventDispatchers.set(flavorType, dispatcher);\n    }\n    dispatcher.addEventListener(Events.FlavorChanged, listener, thisObject);\n  }\n\n  removeFlavorChangeListener<T>(\n      flavorType: ConstructorFn<T>, listener: (arg0: Common.EventTarget.EventTargetEvent<T>) => void,\n      thisObject?: Object): void {\n    const dispatcher = this.eventDispatchers.get(flavorType);\n    if (!dispatcher) {\n      return;\n    }\n    dispatcher.removeEventListener(Events.FlavorChanged, listener, thisObject);\n    if (!dispatcher.hasEventListeners(Events.FlavorChanged)) {\n      this.eventDispatchers.delete(flavorType);\n    }\n  }\n\n  flavor<T>(flavorType: ConstructorFn<T>): T|null {\n    return (this.flavorsInternal.get(flavorType) as T | null) || null;\n  }\n\n  flavors(): Set<ConstructorFn<unknown>> {\n    return new Set(this.flavorsInternal.keys());\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nenum Events {\n  FlavorChanged = 'FlavorChanged',\n}\n\nexport type EventTypes = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [Events.FlavorChanged]: any,\n};\n\nconst registeredListeners: ContextFlavorListenerRegistration[] = [];\n\nexport function registerListener(registration: ContextFlavorListenerRegistration): void {\n  registeredListeners.push(registration);\n}\n\nfunction getRegisteredListeners(): ContextFlavorListenerRegistration[] {\n  return registeredListeners;\n}\nexport interface ContextFlavorListenerRegistration {\n  contextTypes: () => Array<Function>;\n  loadListener: () => Promise<ContextFlavorListener>;\n}\n"]}