{"version":3,"file":"ShortcutRegistry.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/ShortcutRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\n\nimport type {Action} from './ActionRegistration.js';\nimport {getRegisteredActionExtensions, KeybindSet} from './ActionRegistration.js';\nimport type {ActionRegistry} from './ActionRegistry.js';\nimport {Context} from './Context.js';\nimport {Dialog} from './Dialog.js';\nimport {KeyboardShortcut, Modifiers, Type} from './KeyboardShortcut.js';\nimport {isEditing} from './UIUtils.js';\n\nlet shortcutRegistryInstance: ShortcutRegistry|undefined;\n\nexport class ShortcutRegistry {\n  private readonly actionRegistry: ActionRegistry;\n  private readonly actionToShortcut: Platform.MapUtilities.Multimap<string, KeyboardShortcut>;\n  private readonly keyMap: ShortcutTreeNode;\n  private activePrefixKey: ShortcutTreeNode|null;\n  private activePrefixTimeout: number|null;\n  private consumePrefix: (() => Promise<void>)|null;\n  private readonly devToolsDefaultShortcutActions: Set<string>;\n  private readonly disabledDefaultShortcutsForAction: Platform.MapUtilities.Multimap<string, KeyboardShortcut>;\n  private readonly keybindSetSetting: Common.Settings.Setting<string>;\n  private readonly userShortcutsSetting: Common.Settings.Setting<KeyboardShortcut[]>;\n\n  constructor(actionRegistry: ActionRegistry) {\n    this.actionRegistry = actionRegistry;\n    this.actionToShortcut = new Platform.MapUtilities.Multimap();\n    this.keyMap = new ShortcutTreeNode(0, 0);\n    this.activePrefixKey = null;\n    this.activePrefixTimeout = null;\n    this.consumePrefix = null;\n    this.devToolsDefaultShortcutActions = new Set();\n    this.disabledDefaultShortcutsForAction = new Platform.MapUtilities.Multimap();\n    this.keybindSetSetting = Common.Settings.Settings.instance().moduleSetting('activeKeybindSet');\n    this.keybindSetSetting.addChangeListener(event => {\n      Host.userMetrics.keybindSetSettingChanged(event.data);\n      this.registerBindings();\n    });\n    this.userShortcutsSetting = Common.Settings.Settings.instance().moduleSetting('userShortcuts');\n    this.userShortcutsSetting.addChangeListener(this.registerBindings, this);\n\n    this.registerBindings();\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    actionRegistry: ActionRegistry|null,\n  } = {forceNew: null, actionRegistry: null}): ShortcutRegistry {\n    const {forceNew, actionRegistry} = opts;\n    if (!shortcutRegistryInstance || forceNew) {\n      if (!actionRegistry) {\n        throw new Error('Missing actionRegistry for shortcutRegistry');\n      }\n      shortcutRegistryInstance = new ShortcutRegistry(actionRegistry);\n    }\n\n    return shortcutRegistryInstance;\n  }\n\n  static removeInstance(): void {\n    shortcutRegistryInstance = undefined;\n  }\n  private applicableActions(key: number, handlers: {\n    [x: string]: () => Promise<boolean>,\n  }|undefined = {}): Action[] {\n    let actions: string[] = [];\n    const keyMap = this.activePrefixKey || this.keyMap;\n    const keyNode = keyMap.getNode(key);\n    if (keyNode) {\n      actions = keyNode.actions();\n    }\n    const applicableActions = this.actionRegistry.applicableActions(actions, Context.instance());\n    if (keyNode) {\n      for (const actionId of Object.keys(handlers)) {\n        if (keyNode.actions().indexOf(actionId) >= 0) {\n          const action = this.actionRegistry.action(actionId);\n          if (action) {\n            applicableActions.push(action);\n          }\n        }\n      }\n    }\n    return applicableActions;\n  }\n\n  shortcutsForAction(action: string): KeyboardShortcut[] {\n    return [...this.actionToShortcut.get(action)];\n  }\n\n  actionsForDescriptors(descriptors: {\n    key: number,\n    name: string,\n  }[]): string[] {\n    let keyMapNode: (ShortcutTreeNode|null)|ShortcutTreeNode = this.keyMap;\n    for (const {key} of descriptors) {\n      if (!keyMapNode) {\n        return [];\n      }\n      keyMapNode = keyMapNode.getNode(key);\n    }\n    return keyMapNode ? keyMapNode.actions() : [];\n  }\n\n  globalShortcutKeys(): number[] {\n    const keys = [];\n    for (const node of this.keyMap.chords().values()) {\n      const actions = node.actions();\n      const applicableActions = this.actionRegistry.applicableActions(actions, Context.instance());\n      if (applicableActions.length || node.hasChords()) {\n        keys.push(node.key());\n      }\n    }\n    return keys;\n  }\n\n  keysForActions(actionIds: string[]): number[] {\n    const keys = actionIds.flatMap(\n        action => [...this.actionToShortcut.get(action)].flatMap(\n            shortcut => shortcut.descriptors.map(descriptor => descriptor.key)));\n    return [...(new Set(keys))];\n  }\n\n  shortcutTitleForAction(actionId: string): string|undefined {\n    for (const shortcut of this.actionToShortcut.get(actionId)) {\n      return shortcut.title();\n    }\n    return undefined;\n  }\n\n  handleShortcut(event: KeyboardEvent, handlers?: {\n    [x: string]: () => Promise<boolean>,\n  }): void {\n    void this.handleKey(KeyboardShortcut.makeKeyFromEvent(event), event.key, event, handlers);\n  }\n\n  actionHasDefaultShortcut(actionId: string): boolean {\n    return this.devToolsDefaultShortcutActions.has(actionId);\n  }\n\n  getShortcutListener(handlers: {[x: string]: () => Promise<boolean>}): (event: KeyboardEvent) => void {\n    const shortcuts = Object.keys(handlers).flatMap(action => [...this.actionToShortcut.get(action)]);\n    // We only want keys for these specific actions to get handled this\n    // way; all others should be allowed to bubble up.\n    const allowlistKeyMap = new ShortcutTreeNode(0, 0);\n    shortcuts.forEach(shortcut => {\n      allowlistKeyMap.addKeyMapping(shortcut.descriptors.map(descriptor => descriptor.key), shortcut.action);\n    });\n\n    return (event: KeyboardEvent): void => {\n      const key = KeyboardShortcut.makeKeyFromEvent(event);\n      const keyMap = this.activePrefixKey ? allowlistKeyMap.getNode(this.activePrefixKey.key()) : allowlistKeyMap;\n      if (!keyMap) {\n        return;\n      }\n      if (keyMap.getNode(key)) {\n        this.handleShortcut(event, handlers);\n      }\n    };\n  }\n\n  addShortcutListener(element: Element, handlers: {\n    [x: string]: () => Promise<boolean>,\n  }): (arg0: Event) => void {\n    const listener = this.getShortcutListener(handlers) as (event: Event) => void;\n    element.addEventListener('keydown', listener);\n    return listener;\n  }\n\n  async handleKey(key: number, domKey: string, event?: KeyboardEvent, handlers?: {\n    [x: string]: () => Promise<boolean>,\n  }): Promise<void> {\n    const keyModifiers = key >> 8;\n    const hasHandlersOrPrefixKey = Boolean(handlers) || Boolean(this.activePrefixKey);\n    const keyMapNode = this.keyMap.getNode(key);\n    const maybeHasActions =\n        (this.applicableActions(key, handlers)).length > 0 || (keyMapNode && keyMapNode.hasChords());\n    if ((!hasHandlersOrPrefixKey && isPossiblyInputKey()) || !maybeHasActions ||\n        KeyboardShortcut.isModifier(KeyboardShortcut.keyCodeAndModifiersFromKey(key).keyCode)) {\n      return;\n    }\n    if (event) {\n      event.consume(true);\n    }\n    if (!hasHandlersOrPrefixKey && Dialog.hasInstance()) {\n      return;\n    }\n\n    if (this.activePrefixTimeout) {\n      clearTimeout(this.activePrefixTimeout);\n      const handled = await maybeExecuteActionForKey.call(this);\n      this.activePrefixKey = null;\n      this.activePrefixTimeout = null;\n      if (handled) {\n        return;\n      }\n      if (this.consumePrefix) {\n        await this.consumePrefix();\n      }\n    }\n    if (keyMapNode && keyMapNode.hasChords()) {\n      this.activePrefixKey = keyMapNode;\n      this.consumePrefix = async(): Promise<void> => {\n        this.activePrefixKey = null;\n        this.activePrefixTimeout = null;\n        await maybeExecuteActionForKey.call(this);\n      };\n      this.activePrefixTimeout = window.setTimeout(this.consumePrefix, KeyTimeout);\n    } else {\n      await maybeExecuteActionForKey.call(this);\n    }\n\n    function isPossiblyInputKey(): boolean {\n      if (!event || !isEditing() || /^F\\d+|Control|Shift|Alt|Meta|Escape|Win|U\\+001B$/.test(domKey)) {\n        return false;\n      }\n\n      if (!keyModifiers) {\n        return true;\n      }\n\n      const modifiers = Modifiers;\n      // Undo/Redo will also cause input, so textual undo should take precedence over DevTools undo when editing.\n      if (Host.Platform.isMac()) {\n        if (KeyboardShortcut.makeKey('z', modifiers.Meta) === key) {\n          return true;\n        }\n        if (KeyboardShortcut.makeKey('z', modifiers.Meta | modifiers.Shift) === key) {\n          return true;\n        }\n      } else {\n        if (KeyboardShortcut.makeKey('z', modifiers.Ctrl) === key) {\n          return true;\n        }\n        if (KeyboardShortcut.makeKey('y', modifiers.Ctrl) === key) {\n          return true;\n        }\n        if (!Host.Platform.isWin() && KeyboardShortcut.makeKey('z', modifiers.Ctrl | modifiers.Shift) === key) {\n          return true;\n        }\n      }\n\n      if ((keyModifiers & (modifiers.Ctrl | modifiers.Alt)) === (modifiers.Ctrl | modifiers.Alt)) {\n        return Host.Platform.isWin();\n      }\n\n      return !hasModifier(modifiers.Ctrl) && !hasModifier(modifiers.Alt) && !hasModifier(modifiers.Meta);\n    }\n\n    function hasModifier(mod: number): boolean {\n      return Boolean(keyModifiers & mod);\n    }\n\n    /** ;\n     */\n    async function maybeExecuteActionForKey(this: ShortcutRegistry): Promise<boolean> {\n      const actions = this.applicableActions(key, handlers);\n      if (!actions.length) {\n        return false;\n      }\n      for (const action of actions) {\n        let handled;\n        if (handlers && handlers[action.id()]) {\n          handled = await handlers[action.id()]();\n        }\n        if (!handlers) {\n          handled = await action.execute();\n        }\n        if (handled) {\n          Host.userMetrics.keyboardShortcutFired(action.id());\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  registerUserShortcut(shortcut: KeyboardShortcut): void {\n    for (const otherShortcut of this.disabledDefaultShortcutsForAction.get(shortcut.action)) {\n      if (otherShortcut.descriptorsMatch(shortcut.descriptors) &&\n          otherShortcut.hasKeybindSet(this.keybindSetSetting.get())) {\n        // this user shortcut is the same as a disabled default shortcut,\n        // so we should just enable the default\n        this.removeShortcut(otherShortcut);\n        return;\n      }\n    }\n    for (const otherShortcut of this.actionToShortcut.get(shortcut.action)) {\n      if (otherShortcut.descriptorsMatch(shortcut.descriptors) &&\n          otherShortcut.hasKeybindSet(this.keybindSetSetting.get())) {\n        // don't allow duplicate shortcuts\n        return;\n      }\n    }\n    this.addShortcutToSetting(shortcut);\n  }\n\n  removeShortcut(shortcut: KeyboardShortcut): void {\n    if (shortcut.type === Type.DefaultShortcut || shortcut.type === Type.KeybindSetShortcut) {\n      this.addShortcutToSetting(shortcut.changeType(Type.DisabledDefault));\n    } else {\n      this.removeShortcutFromSetting(shortcut);\n    }\n  }\n\n  disabledDefaultsForAction(actionId: string): Set<KeyboardShortcut> {\n    return this.disabledDefaultShortcutsForAction.get(actionId);\n  }\n\n  private addShortcutToSetting(shortcut: KeyboardShortcut): void {\n    const userShortcuts = this.userShortcutsSetting.get();\n    userShortcuts.push(shortcut);\n    this.userShortcutsSetting.set(userShortcuts);\n  }\n\n  private removeShortcutFromSetting(shortcut: KeyboardShortcut): void {\n    const userShortcuts = this.userShortcutsSetting.get();\n    const index = userShortcuts.findIndex(shortcut.equals, shortcut);\n    if (index !== -1) {\n      userShortcuts.splice(index, 1);\n      this.userShortcutsSetting.set(userShortcuts);\n    }\n  }\n\n  private registerShortcut(shortcut: KeyboardShortcut): void {\n    this.actionToShortcut.set(shortcut.action, shortcut);\n    this.keyMap.addKeyMapping(shortcut.descriptors.map(descriptor => descriptor.key), shortcut.action);\n  }\n\n  private registerBindings(): void {\n    this.actionToShortcut.clear();\n    this.keyMap.clear();\n    const keybindSet = this.keybindSetSetting.get();\n    this.disabledDefaultShortcutsForAction.clear();\n    this.devToolsDefaultShortcutActions.clear();\n    const forwardedKeys: {\n      keyCode: number,\n      modifiers: number,\n    }[] = [];\n    if (Root.Runtime.experiments.isEnabled('keyboardShortcutEditor')) {\n      const userShortcuts = this.userShortcutsSetting.get();\n      for (const userShortcut of userShortcuts) {\n        const shortcut = KeyboardShortcut.createShortcutFromSettingObject(userShortcut);\n        if (shortcut.type === Type.DisabledDefault) {\n          this.disabledDefaultShortcutsForAction.set(shortcut.action, shortcut);\n        } else {\n          if (ForwardedActions.has(shortcut.action)) {\n            forwardedKeys.push(\n                ...shortcut.descriptors.map(descriptor => KeyboardShortcut.keyCodeAndModifiersFromKey(descriptor.key)));\n          }\n          this.registerShortcut(shortcut);\n        }\n      }\n    }\n    for (const actionExtension of getRegisteredActionExtensions()) {\n      const actionId = actionExtension.id();\n      const bindings = actionExtension.bindings();\n      for (let i = 0; bindings && i < bindings.length; ++i) {\n        const keybindSets = bindings[i].keybindSets;\n        if (!platformMatches(bindings[i].platform) || !keybindSetsMatch(keybindSets)) {\n          continue;\n        }\n        const keys = bindings[i].shortcut.split(/\\s+/);\n        const shortcutDescriptors = keys.map(KeyboardShortcut.makeDescriptorFromBindingShortcut);\n        if (shortcutDescriptors.length > 0) {\n          if (this.isDisabledDefault(shortcutDescriptors, actionId)) {\n            this.devToolsDefaultShortcutActions.add(actionId);\n            continue;\n          }\n\n          if (ForwardedActions.has(actionId)) {\n            forwardedKeys.push(\n                ...shortcutDescriptors.map(shortcut => KeyboardShortcut.keyCodeAndModifiersFromKey(shortcut.key)));\n          }\n          if (!keybindSets) {\n            this.devToolsDefaultShortcutActions.add(actionId);\n            this.registerShortcut(new KeyboardShortcut(shortcutDescriptors, actionId, Type.DefaultShortcut));\n          } else {\n            if (keybindSets.includes(KeybindSet.DEVTOOLS_DEFAULT)) {\n              this.devToolsDefaultShortcutActions.add(actionId);\n            }\n            this.registerShortcut(\n                new KeyboardShortcut(shortcutDescriptors, actionId, Type.KeybindSetShortcut, new Set(keybindSets)));\n          }\n        }\n      }\n    }\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.setWhitelistedShortcuts(JSON.stringify(forwardedKeys));\n\n    function platformMatches(platformsString?: string): boolean {\n      if (!platformsString) {\n        return true;\n      }\n      const platforms = platformsString.split(',');\n      let isMatch = false;\n      const currentPlatform = Host.Platform.platform();\n      for (let i = 0; !isMatch && i < platforms.length; ++i) {\n        isMatch = platforms[i] === currentPlatform;\n      }\n      return isMatch;\n    }\n\n    function keybindSetsMatch(keybindSets?: string[]): boolean {\n      if (!keybindSets) {\n        return true;\n      }\n      return keybindSets.includes(keybindSet);\n    }\n  }\n\n  private isDisabledDefault(\n      shortcutDescriptors: {\n        key: number,\n        name: string,\n      }[],\n      action: string): boolean {\n    const disabledDefaults = this.disabledDefaultShortcutsForAction.get(action);\n    for (const disabledDefault of disabledDefaults) {\n      if (disabledDefault.descriptorsMatch(shortcutDescriptors)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport class ShortcutTreeNode {\n  private readonly keyInternal: number;\n  private actionsInternal: string[];\n  private chordsInternal: Map<number, ShortcutTreeNode>;\n  private readonly depth: number;\n\n  constructor(key: number, depth: number = 0) {\n    this.keyInternal = key;\n    this.actionsInternal = [];\n    this.chordsInternal = new Map();\n    this.depth = depth;\n  }\n\n  addAction(action: string): void {\n    this.actionsInternal.push(action);\n  }\n\n  key(): number {\n    return this.keyInternal;\n  }\n\n  chords(): Map<number, ShortcutTreeNode> {\n    return this.chordsInternal;\n  }\n\n  hasChords(): boolean {\n    return this.chordsInternal.size > 0;\n  }\n\n  addKeyMapping(keys: number[], action: string): void {\n    if (keys.length < this.depth) {\n      return;\n    }\n\n    if (keys.length === this.depth) {\n      this.addAction(action);\n    } else {\n      const key = keys[this.depth];\n      if (!this.chordsInternal.has(key)) {\n        this.chordsInternal.set(key, new ShortcutTreeNode(key, this.depth + 1));\n      }\n      (this.chordsInternal.get(key) as ShortcutTreeNode).addKeyMapping(keys, action);\n    }\n  }\n\n  getNode(key: number): ShortcutTreeNode|null {\n    return this.chordsInternal.get(key) || null;\n  }\n\n  actions(): string[] {\n    return this.actionsInternal;\n  }\n\n  clear(): void {\n    this.actionsInternal = [];\n    this.chordsInternal = new Map();\n  }\n}\n\nexport class ForwardedShortcut {\n  static instance = new ForwardedShortcut();\n}\n\nexport const ForwardedActions = new Set<string>([\n  'main.toggle-dock',\n  'debugger.toggle-breakpoints-active',\n  'debugger.toggle-pause',\n  'commandMenu.show',\n  'console.show',\n]);\nexport const KeyTimeout = 1000;\nexport const DefaultShortcutSetting = 'devToolsDefault';\n"]}