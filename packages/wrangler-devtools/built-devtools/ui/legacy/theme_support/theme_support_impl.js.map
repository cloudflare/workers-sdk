{"version":3,"file":"theme_support_impl.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/legacy/theme_support/theme_support_impl.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2011 Google Inc.  All rights reserved.\n * Copyright (C) 2006, 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2007 Matt Lilek (pewtermoose@gmail.com).\n * Copyright (C) 2009 Joseph Pecoraro\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. (\"Apple\") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../../core/common/common.js';\n\nimport inspectorSyntaxHighlightStyles from '../inspectorSyntaxHighlight.css.legacy.js';\n\nlet themeSupportInstance: ThemeSupport;\n\nconst themeValuesCache = new Map<CSSStyleDeclaration, Map<string, string>>();\n\nexport class ThemeSupport extends EventTarget {\n  private themeNameInternal = 'default';\n  private customSheets: Set<string> = new Set();\n  private computedRoot = Common.Lazy.lazy(() => window.getComputedStyle(document.documentElement));\n\n  private constructor(private setting: Common.Settings.Setting<string>) {\n    super();\n  }\n\n  static hasInstance(): boolean {\n    return typeof themeSupportInstance !== 'undefined';\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    setting: Common.Settings.Setting<string>|null,\n  } = {forceNew: null, setting: null}): ThemeSupport {\n    const {forceNew, setting} = opts;\n    if (!themeSupportInstance || forceNew) {\n      if (!setting) {\n        throw new Error(`Unable to create theme support: setting must be provided: ${new Error().stack}`);\n      }\n\n      themeSupportInstance = new ThemeSupport(setting);\n    }\n\n    return themeSupportInstance;\n  }\n\n  getComputedValue(variableName: string, target: Element|null = null): string {\n    const computedRoot = target ? window.getComputedStyle(target) : this.computedRoot();\n    if (typeof computedRoot === 'symbol') {\n      throw new Error(`Computed value for property (${variableName}) could not be found on :root.`);\n    }\n\n    // Since we might query the same variable name from various targets we need to support\n    // per-target caching of computed values. Here we attempt to locate the particular computed\n    // value cache for the target. If no target was specified we use the default computed root,\n    // which belongs to the document element.\n    let computedRootCache = themeValuesCache.get(computedRoot);\n    if (!computedRootCache) {\n      computedRootCache = new Map<string, string>();\n      themeValuesCache.set(computedRoot, computedRootCache);\n    }\n\n    // Since theme changes trigger a reload, we can avoid repeatedly looking up color values\n    // dynamically. Instead we can look up the first time and cache them for future use,\n    // knowing that the cache will be invalidated by virtue of a reload when the theme changes.\n    let cachedValue = computedRootCache.get(variableName);\n    if (!cachedValue) {\n      cachedValue = computedRoot.getPropertyValue(variableName).trim();\n\n      // If we receive back an empty value (nothing has been set) we don't store it for the future.\n      // This means that subsequent requests will continue to query the styles in case the value\n      // has been set.\n      if (cachedValue) {\n        computedRootCache.set(variableName, cachedValue);\n      }\n    }\n\n    return cachedValue;\n  }\n\n  hasTheme(): boolean {\n    return this.themeNameInternal !== 'default';\n  }\n\n  themeName(): string {\n    return this.themeNameInternal;\n  }\n\n  injectHighlightStyleSheets(element: Element|ShadowRoot): void {\n    this.appendStyle(element, inspectorSyntaxHighlightStyles);\n  }\n\n  appendStyle(node: Node, {cssContent}: {cssContent: string}): void {\n    const styleElement = document.createElement('style');\n    styleElement.textContent = cssContent;\n    node.appendChild(styleElement);\n  }\n\n  injectCustomStyleSheets(element: Element|ShadowRoot): void {\n    for (const sheet of this.customSheets) {\n      const styleElement = document.createElement('style');\n      styleElement.textContent = sheet;\n      element.appendChild(styleElement);\n    }\n  }\n\n  addCustomStylesheet(sheetText: string): void {\n    this.customSheets.add(sheetText);\n  }\n\n  applyTheme(document: Document): void {\n    const isForcedColorsMode = window.matchMedia('(forced-colors: active)').matches;\n    if (isForcedColorsMode) {\n      return;\n    }\n\n    const systemPreferredTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'default';\n    this.themeNameInternal = this.setting.get() === 'systemPreferred' ? systemPreferredTheme : this.setting.get();\n\n    const wasDarkThemed = document.documentElement.classList.contains('-theme-with-dark-background');\n    document.documentElement.classList.toggle('-theme-with-dark-background', this.themeNameInternal === 'dark');\n\n    const isDarkThemed = document.documentElement.classList.contains('-theme-with-dark-background');\n\n    // In the event the theme changes we need to clear caches and notify subscribers.\n    if (wasDarkThemed !== isDarkThemed) {\n      themeValuesCache.clear();\n      this.customSheets.clear();\n      this.dispatchEvent(new ThemeChangeEvent());\n    }\n  }\n}\n\nexport class ThemeChangeEvent extends Event {\n  static readonly eventName = 'themechange';\n\n  constructor() {\n    super(ThemeChangeEvent.eventName, {bubbles: true, composed: true});\n  }\n}\n"]}