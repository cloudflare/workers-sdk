{"version":3,"file":"SettingCheckbox.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/settings/SettingCheckbox.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,gBAAgB,MAAM,qCAAqC,CAAC;AACxE,OAAO,KAAK,OAAO,MAAM,4BAA4B,CAAC;AAEtD,OAAO,KAAK,KAAK,MAAM,mBAAmB,CAAC;AAC3C,OAAO,qBAAqB,MAAM,0BAA0B,CAAC;AAW7D;;GAEG;AACH,MAAM,OAAO,eAAgB,SAAQ,WAAW;IAC9C,MAAM,CAAU,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,kBAAkB,CAAC;IACtD,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAErD,QAAQ,CAAoC;IAC5C,SAAS,GAAY,KAAK,CAAC;IAC3B,yBAAyB,CAAsC;IAE/D,iBAAiB;QACf,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,CAAC,KAAK,CAAC,cAAc,EAAE,qBAAqB,CAAC,CAAC;IAClF,CAAC;IAED,IAAI,IAAI,CAAC,IAAyB;QAChC,IAAI,IAAI,CAAC,yBAAyB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnD,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;SAC7E;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAExC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACpE,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,OAAO;QACL,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SAC/D;QAED,OAAO,CAAC,MAAM,CACV,OAAO,CAAC,IAAI,CAAA;;;4CAGwB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,cACnD,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,IAAI,CAAC,gBAAgB,eAC3E,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;;WAElD,EACH,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IAClC,CAAC;IAED,gBAAgB,CAAC,CAAQ;QACvB,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAE,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC,CAAC;IAC7D,CAAC;;AAGH,gBAAgB,CAAC,cAAc,CAAC,eAAe,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../core/common/common.js';\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport * as Input from '../input/input.js';\nimport settingCheckboxStyles from './settingCheckbox.css.js';\n\nexport interface SettingCheckboxData {\n  setting: Common.Settings.Setting<boolean>;\n  /**\n   * If set to true, the checkbox is disabled and not clickable by the user.\n   * The checkbox will still reflect the current value of the setting (i.e. checked/unchecked).\n   */\n  disabled?: boolean;\n}\n\n/**\n * A simple checkbox that is backed by a boolean setting.\n */\nexport class SettingCheckbox extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`setting-checkbox`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #setting?: Common.Settings.Setting<boolean>;\n  #disabled: boolean = false;\n  #changeListenerDescriptor?: Common.EventTarget.EventDescriptor;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, settingCheckboxStyles];\n  }\n\n  set data(data: SettingCheckboxData) {\n    if (this.#changeListenerDescriptor && this.#setting) {\n      this.#setting.removeChangeListener(this.#changeListenerDescriptor.listener);\n    }\n\n    this.#setting = data.setting;\n    this.#disabled = Boolean(data.disabled);\n\n    this.#changeListenerDescriptor = this.#setting.addChangeListener(() => {\n      this.#render();\n    });\n    this.#render();\n  }\n\n  #render(): void {\n    if (!this.#setting) {\n      throw new Error('No \"Setting\" object provided for rendering');\n    }\n\n    LitHtml.render(\n        LitHtml.html`\n      <p>\n        <label>\n          <input type=\"checkbox\" ?checked=${this.#setting.get()} ?disabled=${\n            this.#disabled || this.#setting.disabled()} @change=${this.#checkboxChanged} aria-label=${\n            this.#setting.title()} /> ${this.#setting.title()}\n        </label>\n      </p>`,\n        this.#shadow, {host: this});\n  }\n\n  #checkboxChanged(e: Event): void {\n    this.#setting?.set((e.target as HTMLInputElement).checked);\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('setting-checkbox', SettingCheckbox);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'setting-checkbox': SettingCheckbox;\n  }\n}\n"]}