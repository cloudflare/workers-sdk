{"version":3,"file":"TreeOutline.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/tree_outline/TreeOutline.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as CodeHighlighter from '../code_highlighter/code_highlighter.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\nimport * as Coordinator from '../render_coordinator/render_coordinator.js';\n\nimport treeOutlineStyles from './treeOutline.css.js';\n\nimport type {TreeNodeId, TreeNode, TreeNodeWithChildren} from './TreeOutlineUtils.js';\nimport {\n  findNextNodeForTreeOutlineKeyboardNavigation,\n  getNodeChildren,\n  getPathToTreeNode,\n  isExpandableNode,\n  trackDOMNodeToTreeNode,\n} from './TreeOutlineUtils.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nexport interface TreeOutlineData<TreeNodeDataType> {\n  defaultRenderer: (node: TreeNode<TreeNodeDataType>, state: {isExpanded: boolean}) => LitHtml.TemplateResult;\n  /**\n   * Note: it is important that all the TreeNode objects are unique. They are\n   * used internally to the TreeOutline as keys to track state (such as if a\n   * node is expanded or not), and providing the same object multiple times will\n   * cause issues in the TreeOutline.\n   */\n  tree: readonly TreeNode<TreeNodeDataType>[];\n  filter?: (node: TreeNodeDataType) => FilterOption;\n  compact?: boolean;\n}\n\nexport function defaultRenderer(node: TreeNode<string>): LitHtml.TemplateResult {\n  return LitHtml.html`${node.treeNodeData}`;\n}\n\nexport class ItemSelectedEvent<TreeNodeDataType> extends Event {\n  static readonly eventName = 'itemselected';\n  data: {\n    node: TreeNode<TreeNodeDataType>,\n  };\n\n  constructor(node: TreeNode<TreeNodeDataType>) {\n    super(ItemSelectedEvent.eventName, {bubbles: true, composed: true});\n    this.data = {node};\n  }\n}\n\nexport class ItemMouseOverEvent<TreeNodeDataType> extends Event {\n  static readonly eventName = 'itemmouseover';\n  data: {\n    node: TreeNode<TreeNodeDataType>,\n  };\n\n  constructor(node: TreeNode<TreeNodeDataType>) {\n    super(ItemMouseOverEvent.eventName, {bubbles: true, composed: true});\n    this.data = {node};\n  }\n}\n\nexport class ItemMouseOutEvent<TreeNodeDataType> extends Event {\n  static readonly eventName = 'itemmouseout';\n  data: {\n    node: TreeNode<TreeNodeDataType>,\n  };\n\n  constructor(node: TreeNode<TreeNodeDataType>) {\n    super(ItemMouseOutEvent.eventName, {bubbles: true, composed: true});\n    this.data = {node};\n  }\n}\n\n/**\n *\n * The tree can be filtered by providing a custom filter function.\n * The filter is applied on every node when constructing the tree\n * and proceeds as follows:\n * - If the filter return SHOW for a node, the node is included in the tree.\n * - If the filter returns FLATTEN, the node is ignored but its subtree is included.\n */\nexport const enum FilterOption {\n  SHOW = 'SHOW',\n  FLATTEN = 'FLATTEN',\n}\n\nexport class TreeOutline<TreeNodeDataType> extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-tree-outline`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #treeData: readonly TreeNode<TreeNodeDataType>[] = [];\n  #nodeExpandedMap: Map<string, boolean> = new Map();\n  #domNodeToTreeNodeMap: WeakMap<HTMLLIElement, TreeNode<TreeNodeDataType>> = new WeakMap();\n  #hasRenderedAtLeastOnce = false;\n  /**\n   * If we have expanded to a certain node, we want to focus it once we've\n   * rendered. But we render lazily and wrapped in LitHtml.until, so we can't\n   * know for sure when that node will be rendered. This variable tracks the\n   * node that we want focused but may not yet have been rendered.\n   */\n  #nodeIdPendingFocus: TreeNodeId|null = null;\n  #selectedTreeNode: TreeNode<TreeNodeDataType>|null = null;\n  #defaultRenderer = (node: TreeNode<TreeNodeDataType>, _state: {isExpanded: boolean}): LitHtml.TemplateResult => {\n    if (typeof node.treeNodeData !== 'string') {\n      console.warn(`The default TreeOutline renderer simply stringifies its given value. You passed in ${\n          JSON.stringify(\n              node.treeNodeData, null,\n              2)}. Consider providing a different defaultRenderer that can handle nodes of this type.`);\n    }\n    return LitHtml.html`${String(node.treeNodeData)}`;\n  };\n  #nodeFilter?: ((node: TreeNodeDataType) => FilterOption);\n  #compact = false;\n\n  /**\n   * scheduledRender = render() has been called and scheduled a render.\n   */\n  #scheduledRender = false;\n  /**\n   * enqueuedRender = render() was called mid-way through an existing render.\n   */\n  #enqueuedRender = false;\n\n  static get observedAttributes(): string[] {\n    return ['nowrap', 'toplevelbordercolor'];\n  }\n\n  attributeChangedCallback(name: 'nowrap'|'toplevelbordercolor', oldValue: string|null, newValue: string|null): void {\n    switch (name) {\n      case 'nowrap': {\n        this.#setNodeKeyNoWrapCSSVariable(newValue);\n        break;\n      }\n      case 'toplevelbordercolor': {\n        this.#setTopLevelNodeBorderColorCSSVariable(newValue);\n        break;\n      }\n    }\n  }\n\n  connectedCallback(): void {\n    this.#setTopLevelNodeBorderColorCSSVariable(this.getAttribute('toplevelbordercolor'));\n    this.#setNodeKeyNoWrapCSSVariable(this.getAttribute('nowrap'));\n    this.#shadow.adoptedStyleSheets = [treeOutlineStyles, CodeHighlighter.Style.default];\n  }\n\n  get data(): TreeOutlineData<TreeNodeDataType> {\n    return {\n      tree: this.#treeData as TreeNode<TreeNodeDataType>[],\n      defaultRenderer: this.#defaultRenderer,\n    };\n  }\n\n  set data(data: TreeOutlineData<TreeNodeDataType>) {\n    this.#defaultRenderer = data.defaultRenderer;\n    this.#treeData = data.tree;\n    this.#nodeFilter = data.filter;\n    this.#compact = data.compact || false;\n\n    if (!this.#hasRenderedAtLeastOnce) {\n      this.#selectedTreeNode = this.#treeData[0];\n    }\n    void this.#render();\n  }\n\n  /**\n   * Recursively expands the tree from the root nodes, to a max depth. The max\n   * depth is 0 indexed - so a maxDepth of 2 (default) will expand 3 levels: 0,\n   * 1 and 2.\n   */\n  async expandRecursively(maxDepth = 2): Promise<void> {\n    await Promise.all(this.#treeData.map(rootNode => this.#expandAndRecurse(rootNode, 0, maxDepth)));\n    await this.#render();\n  }\n\n  /**\n   * Collapses all nodes in the tree.\n   */\n  async collapseAllNodes(): Promise<void> {\n    this.#nodeExpandedMap.clear();\n    await this.#render();\n  }\n\n  /**\n   * Takes a TreeNode, expands the outline to reveal it, and focuses it.\n   */\n  async expandToAndSelectTreeNode(targetTreeNode: TreeNode<TreeNodeDataType>): Promise<void> {\n    return this.expandToAndSelectTreeNodeId(targetTreeNode.id);\n  }\n\n  /**\n   * Takes a TreeNode ID, expands the outline to reveal it, and focuses it.\n   */\n  async expandToAndSelectTreeNodeId(targetTreeNodeId: TreeNodeId): Promise<void> {\n    const pathToTreeNode = await getPathToTreeNode(this.#treeData, targetTreeNodeId);\n\n    if (pathToTreeNode === null) {\n      throw new Error(`Could not find node with id ${targetTreeNodeId} in the tree.`);\n    }\n    pathToTreeNode.forEach((node, index) => {\n      // We don't expand the very last node, which was the target node.\n      if (index < pathToTreeNode.length - 1) {\n        this.#setNodeExpandedState(node, true);\n      }\n    });\n\n    // Mark the node as pending focus so when it is rendered into the DOM we can focus it\n    this.#nodeIdPendingFocus = targetTreeNodeId;\n    await this.#render();\n  }\n\n  /**\n   * Takes a list of TreeNode IDs and expands the corresponding nodes.\n   */\n  expandNodeIds(nodeIds: TreeNodeId[]): Promise<void> {\n    nodeIds.forEach(id => this.#nodeExpandedMap.set(id, true));\n    return this.#render();\n  }\n\n  /**\n   * Takes a TreeNode ID and focuses the corresponding node.\n   */\n  focusNodeId(nodeId: TreeNodeId): Promise<void> {\n    this.#nodeIdPendingFocus = nodeId;\n    return this.#render();\n  }\n\n  async collapseChildrenOfNode(domNode: HTMLLIElement): Promise<void> {\n    const treeNode = this.#domNodeToTreeNodeMap.get(domNode);\n    if (!treeNode) {\n      return;\n    }\n    await this.#recursivelyCollapseTreeNodeChildren(treeNode);\n    await this.#render();\n  }\n\n  #setNodeKeyNoWrapCSSVariable(attributeValue: string|null): void {\n    ComponentHelpers.SetCSSProperty.set(\n        this, '--override-key-whitespace-wrapping', attributeValue !== null ? 'nowrap' : 'initial');\n  }\n\n  #setTopLevelNodeBorderColorCSSVariable(attributeValue: string|null): void {\n    ComponentHelpers.SetCSSProperty.set(\n        this, '--override-top-node-border', attributeValue ? `1px solid ${attributeValue}` : '');\n  }\n\n  async #recursivelyCollapseTreeNodeChildren(treeNode: TreeNode<TreeNodeDataType>): Promise<void> {\n    if (!isExpandableNode(treeNode) || !this.#nodeIsExpanded(treeNode)) {\n      return;\n    }\n    const children = await this.#fetchNodeChildren(treeNode);\n    const childRecursions = Promise.all(children.map(child => this.#recursivelyCollapseTreeNodeChildren(child)));\n    await childRecursions;\n    this.#setNodeExpandedState(treeNode, false);\n  }\n\n  #getSelectedTreeNode(): TreeNode<TreeNodeDataType> {\n    if (!this.#selectedTreeNode) {\n      throw new Error('getSelectedNode was called but selectedTreeNode is null');\n    }\n    return this.#selectedTreeNode;\n  }\n\n  async #flattenSubtree(node: TreeNodeWithChildren<TreeNodeDataType>, filter: (node: TreeNodeDataType) => FilterOption):\n      Promise<TreeNode<TreeNodeDataType>[]> {\n    const children = await getNodeChildren(node);\n    const filteredChildren = [];\n    for (const child of children) {\n      const filtering = filter(child.treeNodeData);\n      // We always include the selected node in the tree, regardless of its filtering status.\n      const toBeSelected = this.#isSelectedNode(child) || child.id === this.#nodeIdPendingFocus;\n      // If a node is already expanded we should not flatten it away.\n      const expanded = this.#nodeExpandedMap.get(child.id);\n      if (filtering === FilterOption.SHOW || toBeSelected || expanded) {\n        filteredChildren.push(child);\n      } else if (filtering === FilterOption.FLATTEN && isExpandableNode(child)) {\n        const grandChildren = await this.#flattenSubtree(child, filter);\n        filteredChildren.push(...grandChildren);\n      }\n    }\n    return filteredChildren;\n  }\n\n  async #fetchNodeChildren(node: TreeNodeWithChildren<TreeNodeDataType>): Promise<TreeNode<TreeNodeDataType>[]> {\n    const children = await getNodeChildren(node);\n    const filter = this.#nodeFilter;\n    if (!filter) {\n      return children;\n    }\n    const filteredDescendants = await this.#flattenSubtree(node, filter);\n    return filteredDescendants.length ? filteredDescendants : children;\n  }\n\n  #setNodeExpandedState(node: TreeNode<TreeNodeDataType>, newExpandedState: boolean): void {\n    this.#nodeExpandedMap.set(node.id, newExpandedState);\n  }\n\n  #nodeIsExpanded(node: TreeNode<TreeNodeDataType>): boolean {\n    return this.#nodeExpandedMap.get(node.id) || false;\n  }\n\n  async #expandAndRecurse(node: TreeNode<TreeNodeDataType>, currentDepth: number, maxDepth: number): Promise<void> {\n    if (!isExpandableNode(node)) {\n      return;\n    }\n    this.#setNodeExpandedState(node, true);\n    if (currentDepth === maxDepth || !isExpandableNode(node)) {\n      return;\n    }\n    const children = await this.#fetchNodeChildren(node);\n    await Promise.all(children.map(child => this.#expandAndRecurse(child, currentDepth + 1, maxDepth)));\n  }\n\n  #onArrowClick(node: TreeNode<TreeNodeDataType>): ((e: Event) => void) {\n    return (event: Event): void => {\n      event.stopPropagation();\n      if (isExpandableNode(node)) {\n        this.#setNodeExpandedState(node, !this.#nodeIsExpanded(node));\n        void this.#render();\n      }\n    };\n  }\n\n  #onNodeClick(event: Event): void {\n    // Avoid it bubbling up to parent tree elements, else clicking a node deep in the tree will toggle it + all its ancestor's visibility.\n    event.stopPropagation();\n    const nodeClickExpandsOrContracts = this.getAttribute('clickabletitle') !== null;\n    const domNode = event.currentTarget as HTMLLIElement;\n    const node = this.#domNodeToTreeNodeMap.get(domNode);\n    if (nodeClickExpandsOrContracts && node && isExpandableNode(node)) {\n      this.#setNodeExpandedState(node, !this.#nodeIsExpanded(node));\n    }\n    void this.#focusTreeNode(domNode);\n  }\n\n  async #focusTreeNode(domNode: HTMLLIElement): Promise<void> {\n    const treeNode = this.#domNodeToTreeNodeMap.get(domNode);\n    if (!treeNode) {\n      return;\n    }\n    this.#selectedTreeNode = treeNode;\n    await this.#render();\n    this.dispatchEvent(new ItemSelectedEvent(treeNode));\n    void coordinator.write('DOMNode focus', () => {\n      domNode.focus();\n    });\n  }\n\n  #processHomeAndEndKeysNavigation(key: 'Home'|'End'): void {\n    if (key === 'Home') {\n      const firstRootNode = this.#shadow.querySelector<HTMLLIElement>('ul[role=\"tree\"] > li[role=\"treeitem\"]');\n      if (firstRootNode) {\n        void this.#focusTreeNode(firstRootNode);\n      }\n    } else if (key === 'End') {\n      /**\n       * The End key takes the user to the last visible node in the tree - you\n       * can think of this as the one that's rendered closest to the bottom of\n       * the page.\n       *\n       * We could walk our tree and compute this - but it will also be the last\n       * li[role=\"treeitem\"] in the DOM because we only render visible nodes.\n       * Therefore we can select all the nodes and pick the last one.\n       */\n      const allTreeItems = this.#shadow.querySelectorAll<HTMLLIElement>('li[role=\"treeitem\"]');\n      const lastTreeItem = allTreeItems[allTreeItems.length - 1];\n      if (lastTreeItem) {\n        void this.#focusTreeNode(lastTreeItem);\n      }\n    }\n  }\n\n  async #processArrowKeyNavigation(key: Platform.KeyboardUtilities.ArrowKey, currentDOMNode: HTMLLIElement):\n      Promise<void> {\n    const currentTreeNode = this.#domNodeToTreeNodeMap.get(currentDOMNode);\n    if (!currentTreeNode) {\n      return;\n    }\n\n    const domNode = findNextNodeForTreeOutlineKeyboardNavigation({\n      currentDOMNode,\n      currentTreeNode,\n      direction: key,\n      setNodeExpandedState: (node, expanded) => this.#setNodeExpandedState(node, expanded),\n    });\n    await this.#focusTreeNode(domNode);\n  }\n\n  #processEnterOrSpaceNavigation(currentDOMNode: HTMLLIElement): void {\n    const currentTreeNode = this.#domNodeToTreeNodeMap.get(currentDOMNode);\n    if (!currentTreeNode) {\n      return;\n    }\n    if (isExpandableNode(currentTreeNode)) {\n      const currentExpandedState = this.#nodeIsExpanded(currentTreeNode);\n      this.#setNodeExpandedState(currentTreeNode, !currentExpandedState);\n      void this.#render();\n    }\n  }\n\n  async #onTreeKeyDown(event: KeyboardEvent): Promise<void> {\n    if (!(event.target instanceof HTMLLIElement)) {\n      throw new Error('event.target was not an <li> element');\n    }\n\n    if (event.key === 'Home' || event.key === 'End') {\n      event.preventDefault();\n      this.#processHomeAndEndKeysNavigation(event.key);\n    } else if (Platform.KeyboardUtilities.keyIsArrowKey(event.key)) {\n      event.preventDefault();\n      await this.#processArrowKeyNavigation(event.key, event.target);\n    } else if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      this.#processEnterOrSpaceNavigation(event.target);\n    }\n  }\n\n  #focusPendingNode(domNode: HTMLLIElement): void {\n    this.#nodeIdPendingFocus = null;\n    void this.#focusTreeNode(domNode);\n  }\n\n  #isSelectedNode(node: TreeNode<TreeNodeDataType>): boolean {\n    if (this.#selectedTreeNode) {\n      return node.id === this.#selectedTreeNode.id;\n    }\n    return false;\n  }\n\n  #renderNode(node: TreeNode<TreeNodeDataType>, {depth, setSize, positionInSet}: {\n    depth: number,\n    setSize: number,\n    positionInSet: number,\n  }): LitHtml.TemplateResult {\n    let childrenToRender;\n    const nodeIsExpanded = this.#nodeIsExpanded(node);\n    if (!isExpandableNode(node) || !nodeIsExpanded) {\n      childrenToRender = LitHtml.nothing;\n    } else {\n      const childNodes = this.#fetchNodeChildren(node).then(children => {\n        return children.map((childNode, index) => {\n          return this.#renderNode(childNode, {depth: depth + 1, setSize: children.length, positionInSet: index});\n        });\n      });\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      childrenToRender = LitHtml.html`<ul role=\"group\">${LitHtml.Directives.until(childNodes)}</ul>`;\n      // clang-format on\n    }\n\n    const nodeIsFocusable = this.#getSelectedTreeNode() === node;\n    const tabIndex = nodeIsFocusable ? 0 : -1;\n    const listItemClasses = LitHtml.Directives.classMap({\n      expanded: isExpandableNode(node) && nodeIsExpanded,\n      parent: isExpandableNode(node),\n      selected: this.#isSelectedNode(node),\n      'is-top-level': depth === 0,\n      compact: this.#compact,\n    });\n    const ariaExpandedAttribute =\n        LitHtml.Directives.ifDefined(isExpandableNode(node) ? String(nodeIsExpanded) : undefined);\n\n    let renderedNodeKey: LitHtml.TemplateResult;\n    if (node.renderer) {\n      renderedNodeKey = node.renderer(node, {isExpanded: nodeIsExpanded});\n    } else {\n      renderedNodeKey = this.#defaultRenderer(node, {isExpanded: nodeIsExpanded});\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return LitHtml.html`\n      <li role=\"treeitem\"\n        tabindex=${tabIndex}\n        aria-setsize=${setSize}\n        aria-expanded=${ariaExpandedAttribute}\n        aria-level=${depth + 1}\n        aria-posinset=${positionInSet + 1}\n        class=${listItemClasses}\n        @click=${this.#onNodeClick}\n        track-dom-node-to-tree-node=${trackDOMNodeToTreeNode(this.#domNodeToTreeNodeMap, node)}\n        on-render=${ComponentHelpers.Directives.nodeRenderedCallback(domNode => {\n         /**\n           * Because TreeNodes are lazily rendered, you can call\n           * `outline.expandToAndSelect(NodeX)`, but `NodeX` will be rendered at some\n           * later point, once it's been fully resolved, within a LitHtml.until\n           * directive. That means we don't have a direct hook into when it's\n           * rendered, which we need because we want to focus the element, so we use this directive to receive a callback when the node is rendered.\n           */\n          if (!(domNode instanceof HTMLLIElement)) {\n            return;\n          }\n\n          if (this.#nodeIdPendingFocus && node.id === this.#nodeIdPendingFocus) {\n            this.#focusPendingNode(domNode);\n          }\n        })}\n      >\n        <span class=\"arrow-and-key-wrapper\"\n          @mouseover=${(): void => {\n            this.dispatchEvent(new ItemMouseOverEvent(node));\n          }}\n          @mouseout=${(): void => {\n            this.dispatchEvent(new ItemMouseOutEvent(node));\n          }}\n        >\n          <span class=\"arrow-icon\" @click=${this.#onArrowClick(node)}>\n          </span>\n          <span class=\"tree-node-key\" data-node-key=${node.treeNodeData}>${renderedNodeKey}</span>\n        </span>\n        ${childrenToRender}\n      </li>\n    `;\n    // clang-format on\n  }\n\n  async #render(): Promise<void> {\n    if (this.#scheduledRender) {\n      // If we are already rendering, don't render again immediately, but\n      // enqueue it to be run after we're done on our current render.\n      this.#enqueuedRender = true;\n      return;\n    }\n\n    this.#scheduledRender = true;\n\n    await coordinator.write('TreeOutline render', () => {\n      // Disabled until https://crbug.com/1079231 is fixed.\n      // clang-format off\n      LitHtml.render(LitHtml.html`\n      <div class=\"wrapping-container\">\n        <ul role=\"tree\" @keydown=${this.#onTreeKeyDown}>\n          ${this.#treeData.map((topLevelNode, index) => {\n            return this.#renderNode(topLevelNode, {\n              depth: 0,\n              setSize: this.#treeData.length,\n              positionInSet: index,\n            });\n          })}\n        </ul>\n      </div>\n      `, this.#shadow, {\n        host: this,\n      });\n    });\n    // clang-format on\n    this.#hasRenderedAtLeastOnce = true;\n    this.#scheduledRender = false;\n\n    // If render() was called when we were already mid-render, let's re-render\n    // to ensure we're not rendering any stale UI.\n    if (this.#enqueuedRender) {\n      this.#enqueuedRender = false;\n      return this.#render();\n    }\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-tree-outline', TreeOutline);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-tree-outline': TreeOutline<unknown>;\n  }\n}\n"]}