{"version":3,"file":"DataGridEvents.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/data_grid/DataGridEvents.ts"],"names":[],"mappings":"AAKA,MAAM,OAAO,sBAAuB,SAAQ,KAAK;IAC/C,MAAM,CAAU,SAAS,GAAG,mBAAmB,CAAC;IAEhD,IAAI,CAGF;IAEF,YAAY,MAAc,EAAE,WAAmB;QAC7C,KAAK,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,GAAG;YACV,MAAM;YACN,WAAW;SACZ,CAAC;IACJ,CAAC;;AAGH,MAAM,OAAO,+BAAgC,SAAQ,KAAK;IACxD,MAAM,CAAU,SAAS,GAAG,4BAA4B,CAAC;IACzD,IAAI,CAEF;IAEF,YAAY,MAAc;QACxB,KAAK,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC;QACjD,IAAI,CAAC,IAAI,GAAG;YACV,MAAM;SACP,CAAC;IACJ,CAAC;;AAGH,MAAM,OAAO,gCAAiC,SAAQ,KAAK;IACzD,MAAM,CAAU,SAAS,GAAG,6BAA6B,CAAC;IAC1D;QACE,KAAK,CAAC,gCAAgC,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC;;AAGH,MAAM,OAAO,sBAAuB,SAAQ,KAAK;IAC/C,MAAM,CAAU,SAAS,GAAG,mBAAmB,CAAC;IAChD,IAAI,CAAuB;IAE3B,YAAY,UAAkB;QAC5B,KAAK,CAAC,sBAAsB,CAAC,SAAS,EAAE;YACtC,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,GAAG;YACV,UAAU;SACX,CAAC;IACJ,CAAC;;AAGH,MAAM,OAAO,oBAAqB,SAAQ,KAAK;IAC7C,MAAM,CAAU,SAAS,GAAG,aAAa,CAAC;IAC1C;;;;;OAKG;IACH,IAAI,CAGF;IAEF,YAAY,IAAU,EAAE,GAAQ;QAC9B,KAAK,CAAC,oBAAoB,CAAC,SAAS,EAAE;YACpC,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,GAAG;YACV,IAAI;YACJ,GAAG;SACJ,CAAC;IACJ,CAAC","sourcesContent":["// Copyright (c) 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type {Cell, Column, Row} from './DataGridUtils.js';\n\nexport class ColumnHeaderClickEvent extends Event {\n  static readonly eventName = 'columnheaderclick';\n\n  data: {\n    column: Column,\n    columnIndex: number,\n  };\n\n  constructor(column: Column, columnIndex: number) {\n    super(ColumnHeaderClickEvent.eventName);\n    this.data = {\n      column,\n      columnIndex,\n    };\n  }\n}\n\nexport class ContextMenuColumnSortClickEvent extends Event {\n  static readonly eventName = 'contextmenucolumnsortclick';\n  data: {\n    column: Column,\n  };\n\n  constructor(column: Column) {\n    super(ContextMenuColumnSortClickEvent.eventName);\n    this.data = {\n      column,\n    };\n  }\n}\n\nexport class ContextMenuHeaderResetClickEvent extends Event {\n  static readonly eventName = 'contextmenuheaderresetclick';\n  constructor() {\n    super(ContextMenuHeaderResetClickEvent.eventName);\n  }\n}\n\nexport class NewUserFilterTextEvent extends Event {\n  static readonly eventName = 'newuserfiltertext';\n  data: {filterText: string};\n\n  constructor(filterText: string) {\n    super(NewUserFilterTextEvent.eventName, {\n      composed: true,\n    });\n\n    this.data = {\n      filterText,\n    };\n  }\n}\n\nexport class BodyCellFocusedEvent extends Event {\n  static readonly eventName = 'cellfocused';\n  /**\n   * Although the DataGrid cares only about the focused cell, and has no concept\n   * of a focused row, many components that render a data grid want to know what\n   * row is active, so on the cell focused event we also send the row that the\n   * cell is part of.\n   */\n  data: {\n    cell: Cell,\n    row: Row,\n  };\n\n  constructor(cell: Cell, row: Row) {\n    super(BodyCellFocusedEvent.eventName, {\n      composed: true,\n    });\n    this.data = {\n      cell,\n      row,\n    };\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    [ColumnHeaderClickEvent.eventName]: ColumnHeaderClickEvent;\n    [ContextMenuColumnSortClickEvent.eventName]: ContextMenuColumnSortClickEvent;\n    [ContextMenuHeaderResetClickEvent.eventName]: ContextMenuHeaderResetClickEvent;\n    [NewUserFilterTextEvent.eventName]: NewUserFilterTextEvent;\n    [BodyCellFocusedEvent.eventName]: BodyCellFocusedEvent;\n  }\n}\n"]}