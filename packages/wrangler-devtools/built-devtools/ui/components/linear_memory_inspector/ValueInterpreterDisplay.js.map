{"version":3,"file":"ValueInterpreterDisplay.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/linear_memory_inspector/ValueInterpreterDisplay.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport inspectorCommonStyles from '../../legacy/inspectorCommon.css.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\nimport * as IconButton from '../icon_button/icon_button.js';\n\nimport valueInterpreterDisplayStyles from './valueInterpreterDisplay.css.js';\nimport {\n  Endianness,\n  format,\n  getDefaultValueTypeMapping,\n  getPointerAddress,\n  isNumber,\n  isPointer,\n  isValidMode,\n  VALUE_TYPE_MODE_LIST,\n  ValueType,\n  ValueTypeMode,\n} from './ValueInterpreterDisplayUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Tooltip text that appears when hovering over an unsigned interpretation of the memory under the Value Interpreter\n  */\n  unsignedValue: '`Unsigned` value',\n  /**\n   *@description Tooltip text that appears when hovering over the element to change value type modes of under the Value Interpreter. Value type modes\n   *             are different ways of viewing a certain value, e.g.: 10 (decimal) can be 0xa in hexadecimal mode, or 12 in octal mode.\n   */\n  changeValueTypeMode: 'Change mode',\n  /**\n  *@description Tooltip text that appears when hovering over a signed interpretation of the memory under the Value Interpreter\n  */\n  signedValue: '`Signed` value',\n  /**\n  *@description Tooltip text that appears when hovering over a 'jump-to-address' button that is next to a pointer (32-bit or 64-bit) under the Value Interpreter\n  */\n  jumpToPointer: 'Jump to address',\n  /**\n  *@description Tooltip text that appears when hovering over a 'jump-to-address' button that is next to a pointer (32-bit or 64-bit) with an invalid address under the Value Interpreter.\n  */\n  addressOutOfRange: 'Address out of memory range',\n\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/linear_memory_inspector/ValueInterpreterDisplay.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst {render, html} = LitHtml;\n\nconst SORTED_VALUE_TYPES = Array.from(getDefaultValueTypeMapping().keys());\n\nexport interface ValueDisplayData {\n  buffer: ArrayBuffer;\n  valueTypes: Set<ValueType>;\n  endianness: Endianness;\n  memoryLength: number;\n  valueTypeModes?: Map<ValueType, ValueTypeMode>;\n}\n\nexport class ValueTypeModeChangedEvent extends Event {\n  static readonly eventName = 'valuetypemodechanged';\n  data: {type: ValueType, mode: ValueTypeMode};\n\n  constructor(type: ValueType, mode: ValueTypeMode) {\n    super(ValueTypeModeChangedEvent.eventName, {\n      composed: true,\n    });\n    this.data = {type, mode};\n  }\n}\n\nexport class JumpToPointerAddressEvent extends Event {\n  static readonly eventName = 'jumptopointeraddress';\n  data: number;\n\n  constructor(address: number) {\n    super(JumpToPointerAddressEvent.eventName, {\n      composed: true,\n    });\n    this.data = address;\n  }\n}\n\nexport class ValueInterpreterDisplay extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-linear-memory-inspector-interpreter-display`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #endianness = Endianness.Little;\n  #buffer = new ArrayBuffer(0);\n  #valueTypes: Set<ValueType> = new Set();\n  #valueTypeModeConfig: Map<ValueType, ValueTypeMode> = getDefaultValueTypeMapping();\n  #memoryLength = 0;\n\n  constructor() {\n    super();\n    this.#shadow.adoptedStyleSheets = [\n      inspectorCommonStyles,\n    ];\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [valueInterpreterDisplayStyles];\n  }\n\n  set data(data: ValueDisplayData) {\n    this.#buffer = data.buffer;\n    this.#endianness = data.endianness;\n    this.#valueTypes = data.valueTypes;\n    this.#memoryLength = data.memoryLength;\n\n    if (data.valueTypeModes) {\n      data.valueTypeModes.forEach((mode, valueType) => {\n        if (isValidMode(valueType, mode)) {\n          this.#valueTypeModeConfig.set(valueType, mode);\n        }\n      });\n    }\n\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"value-types\">\n        ${SORTED_VALUE_TYPES.map(type => this.#valueTypes.has(type) ? this.#showValue(type) : '')}\n      </div>\n    `, this.#shadow, {host: this},\n    );\n    // clang-format on\n  }\n\n  #showValue(type: ValueType): LitHtml.TemplateResult {\n    if (isNumber(type)) {\n      return this.#renderNumberValues(type);\n    }\n    if (isPointer(type)) {\n      return this.#renderPointerValue(type);\n    }\n    throw new Error(`No known way to format ${type}`);\n  }\n\n  #renderPointerValue(type: ValueType): LitHtml.TemplateResult {\n    const unsignedValue = this.#parse({type, signed: false});\n    const address = getPointerAddress(type, this.#buffer, this.#endianness);\n    const jumpDisabled = Number.isNaN(address) || BigInt(address) >= BigInt(this.#memoryLength);\n    const buttonTitle = jumpDisabled ? i18nString(UIStrings.addressOutOfRange) : i18nString(UIStrings.jumpToPointer);\n    const iconColor = jumpDisabled ? 'var(--color-text-secondary)' : 'var(--color-primary)';\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <span class=\"value-type-cell-no-mode value-type-cell selectable-text\">${i18n.i18n.lockedString(type)}</span>\n      <div class=\"value-type-cell\">\n        <div class=\"value-type-value-with-link\" data-value=\"true\">\n        <span class=\"selectable-text\">${unsignedValue}</span>\n          ${\n            html`\n              <button class=\"jump-to-button\" data-jump=\"true\" title=${buttonTitle} ?disabled=${jumpDisabled}\n                @click=${this.#onJumpToAddressClicked.bind(this, Number(address))}>\n                <${IconButton.Icon.Icon.litTagName} .data=${\n                  {iconName: 'link_icon', color: iconColor, width: '14px'} as IconButton.Icon.IconWithName}>\n                </${IconButton.Icon.Icon.litTagName}>\n              </button>`}\n        </div>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  #onJumpToAddressClicked(address: number): void {\n    this.dispatchEvent(new JumpToPointerAddressEvent(address));\n  }\n\n  #renderNumberValues(type: ValueType): LitHtml.TemplateResult {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    return html`\n      <span class=\"value-type-cell selectable-text\">${i18n.i18n.lockedString(type)}</span>\n      <div>\n        <select title=${i18nString(UIStrings.changeValueTypeMode)}\n          data-mode-settings=\"true\"\n          class=\"chrome-select\"\n          style=\"border: none; background-color: transparent; cursor: pointer; color: var(--color-text-secondary);\"\n          @change=${this.#onValueTypeModeChange.bind(this, type)}>\n            ${VALUE_TYPE_MODE_LIST.filter(x => isValidMode(type, x)).map(mode => {\n              return html`\n                <option value=${mode} .selected=${this.#valueTypeModeConfig.get(type) === mode}>${\n                  i18n.i18n.lockedString(mode)}\n                </option>`;\n            })}\n        </select>\n      </div>\n      ${this.#renderSignedAndUnsigned(type)}\n    `;\n    // clang-format on\n  }\n\n  #renderSignedAndUnsigned(type: ValueType): LitHtml.TemplateResult {\n    const unsignedValue = this.#parse({type, signed: false});\n    const signedValue = this.#parse({type, signed: true});\n    const mode = this.#valueTypeModeConfig.get(type);\n    const showSignedAndUnsigned =\n        signedValue !== unsignedValue && mode !== ValueTypeMode.Hexadecimal && mode !== ValueTypeMode.Octal;\n\n    const unsignedRendered = html`<span class=\"value-type-cell selectable-text\"  title=${\n        i18nString(UIStrings.unsignedValue)} data-value=\"true\">${unsignedValue}</span>`;\n    if (!showSignedAndUnsigned) {\n      return unsignedRendered;\n    }\n\n    // Some values are too long to show in one line, we're putting them into the next line.\n    const showInMultipleLines = type === ValueType.Int32 || type === ValueType.Int64;\n    const signedRendered = html`<span class=\"selectable-text\" data-value=\"true\" title=${\n        i18nString(UIStrings.signedValue)}>${signedValue}</span>`;\n\n    if (showInMultipleLines) {\n      return html`\n        <div class=\"value-type-cell\">\n          ${unsignedRendered}\n          ${signedRendered}\n        </div>\n        `;\n    }\n\n    return html`\n      <div class=\"value-type-cell\" style=\"flex-direction: row;\">\n        ${unsignedRendered}\n        <span class=\"signed-divider\"></span>\n        ${signedRendered}\n      </div>\n    `;\n  }\n\n  #onValueTypeModeChange(type: ValueType, event: Event): void {\n    event.preventDefault();\n    const select = event.target as HTMLInputElement;\n    const mode = select.value as ValueTypeMode;\n    this.dispatchEvent(new ValueTypeModeChangedEvent(type, mode));\n  }\n\n  #parse(data: {type: ValueType, signed?: boolean}): string {\n    const mode = this.#valueTypeModeConfig.get(data.type);\n    return format(\n        {buffer: this.#buffer, type: data.type, endianness: this.#endianness, signed: data.signed || false, mode});\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent(\n    'devtools-linear-memory-inspector-interpreter-display', ValueInterpreterDisplay);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter-display': ValueInterpreterDisplay;\n  }\n}\n"]}