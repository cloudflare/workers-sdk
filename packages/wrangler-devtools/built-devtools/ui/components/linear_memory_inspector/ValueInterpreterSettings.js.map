{"version":3,"file":"ValueInterpreterSettings.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/linear_memory_inspector/ValueInterpreterSettings.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as ComponentHelpers from '../helpers/helpers.js';\nimport * as Input from '../input/input.js';\n\nimport {ValueType, valueTypeToLocalizedString} from './ValueInterpreterDisplayUtils.js';\nimport valueInterpreterSettingsStyles from './valueInterpreterSettings.css.js';\n\nconst {render, html} = LitHtml;\n\nconst UIStrings = {\n  /**\n  *@description Name of a group of selectable value types that do not fall under integer and floating point value types, e.g. Pointer32. The group appears name appears under the Value Interpreter Settings.\n  */\n  otherGroup: 'Other',\n};\nconst str_ =\n    i18n.i18n.registerUIStrings('ui/components/linear_memory_inspector/ValueInterpreterSettings.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface ValueInterpreterSettingsData {\n  valueTypes: Set<ValueType>;\n}\n\nconst enum ValueTypeGroup {\n  Integer = 'Integer',\n  Float = 'Floating point',\n  Other = 'Other',\n}\n\nconst GROUP_TO_TYPES = new Map(\n    [\n      [ValueTypeGroup.Integer, [ValueType.Int8, ValueType.Int16, ValueType.Int32, ValueType.Int64]],\n      [ValueTypeGroup.Float, [ValueType.Float32, ValueType.Float64]],\n      [ValueTypeGroup.Other, [ValueType.Pointer32, ValueType.Pointer64]],\n    ],\n);\n\nfunction valueTypeGroupToLocalizedString(group: ValueTypeGroup): string {\n  if (group === ValueTypeGroup.Other) {\n    return i18nString(UIStrings.otherGroup);\n  }\n\n  // The remaining group type names should not be localized.\n  return group;\n}\n\nexport class TypeToggleEvent extends Event {\n  static readonly eventName = 'typetoggle';\n  data: {type: ValueType, checked: boolean};\n\n  constructor(type: ValueType, checked: boolean) {\n    super(TypeToggleEvent.eventName);\n    this.data = {type, checked};\n  }\n}\n\nexport class ValueInterpreterSettings extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-linear-memory-inspector-interpreter-settings`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #valueTypes: Set<ValueType> = new Set();\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [Input.checkboxStyles, valueInterpreterSettingsStyles];\n  }\n\n  set data(data: ValueInterpreterSettingsData) {\n    this.#valueTypes = data.valueTypes;\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"settings\">\n       ${[...GROUP_TO_TYPES.keys()].map(group => {\n        return html`\n          <div class=\"value-types-selection\">\n            <span class=\"group\">${valueTypeGroupToLocalizedString(group)}</span>\n            ${this.#plotTypeSelections(group)}\n          </div>\n        `;})}\n      </div>\n      `, this.#shadow, {host: this});\n  }\n\n  #plotTypeSelections(group: ValueTypeGroup): LitHtml.TemplateResult {\n    const types = GROUP_TO_TYPES.get(group);\n    if (!types) {\n      throw new Error(`Unknown group ${group}`);\n    }\n    return html`\n      ${types.map(type => {\n        return html`\n          <label class=\"type-label\" title=${valueTypeToLocalizedString(type)}>\n            <input data-input=\"true\" type=\"checkbox\" .checked=${this.#valueTypes.has(type)} @change=${(e: Event): void => this.#onTypeToggle(type, e)}>\n            <span data-title=\"true\">${valueTypeToLocalizedString(type)}</span>\n          </label>\n     `;})}`;\n  }\n\n  #onTypeToggle(type: ValueType, event: Event): void {\n    const checkbox = event.target as HTMLInputElement;\n    this.dispatchEvent(new TypeToggleEvent(type, checkbox.checked));\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-linear-memory-inspector-interpreter-settings', ValueInterpreterSettings);\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-interpreter-settings': ValueInterpreterSettings;\n  }\n}\n"]}