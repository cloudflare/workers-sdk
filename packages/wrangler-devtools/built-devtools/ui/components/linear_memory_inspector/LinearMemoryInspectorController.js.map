{"version":3,"file":"LinearMemoryInspectorController.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport * as UI from '../../legacy/legacy.js';\n\nimport type {Settings} from './LinearMemoryInspector.js';\nimport {Events as LmiEvents, LinearMemoryInspectorPaneImpl} from './LinearMemoryInspectorPane.js';\nimport type {ValueType, ValueTypeMode} from './ValueInterpreterDisplayUtils.js';\nimport {Endianness, getDefaultValueTypeMapping} from './ValueInterpreterDisplayUtils.js';\nimport * as Bindings from '../../../models/bindings/bindings.js';\nimport type {HighlightInfo} from './LinearMemoryViewerUtils.js';\n\nconst UIStrings = {\n  /**\n  *@description Error message that shows up in the console if a buffer to be opened in the linear memory inspector cannot be found.\n  */\n  couldNotOpenLinearMemory: 'Could not open linear memory inspector: failed locating buffer.',\n};\nconst str_ =\n    i18n.i18n.registerUIStrings('ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP = 'linear-memory-inspector';\nconst MEMORY_TRANSFER_MIN_CHUNK_SIZE = 1000;\nexport const ACCEPTED_MEMORY_TYPES = ['webassemblymemory', 'typedarray', 'dataview', 'arraybuffer'];\n\nlet controllerInstance: LinearMemoryInspectorController;\n\nexport interface LazyUint8Array {\n  getRange(start: number, end: number): Promise<Uint8Array>;\n  length(): number;\n}\n\nexport class RemoteArrayBufferWrapper implements LazyUint8Array {\n  #remoteArrayBuffer: SDK.RemoteObject.RemoteArrayBuffer;\n\n  constructor(arrayBuffer: SDK.RemoteObject.RemoteArrayBuffer) {\n    this.#remoteArrayBuffer = arrayBuffer;\n  }\n\n  length(): number {\n    return this.#remoteArrayBuffer.byteLength();\n  }\n\n  async getRange(start: number, end: number): Promise<Uint8Array> {\n    const newEnd = Math.min(end, this.length());\n    if (start < 0 || start > newEnd) {\n      console.error(`Requesting invalid range of memory: (${start}, ${end})`);\n      return new Uint8Array(0);\n    }\n    const array = await this.#remoteArrayBuffer.bytes(start, newEnd);\n    return new Uint8Array(array);\n  }\n}\n\nasync function getBufferFromObject(obj: SDK.RemoteObject.RemoteObject): Promise<SDK.RemoteObject.RemoteArrayBuffer> {\n  console.assert(obj.type === 'object');\n  console.assert(obj.subtype !== undefined && ACCEPTED_MEMORY_TYPES.includes(obj.subtype));\n  const response = await obj.runtimeModel().agent.invoke_callFunctionOn({\n    objectId: obj.objectId,\n    functionDeclaration:\n        'function() { return this instanceof ArrayBuffer || (typeof SharedArrayBuffer !== \\'undefined\\' && this instanceof SharedArrayBuffer) ? this : this.buffer; }',\n    silent: true,\n    // Set object group in order to bind the object lifetime to the linear memory inspector.\n    objectGroup: LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP,\n  });\n\n  const error = response.getError();\n  if (error) {\n    throw new Error(`Remote object representing ArrayBuffer could not be retrieved: ${error}`);\n  }\n  obj = obj.runtimeModel().createRemoteObject(response.result);\n  return new SDK.RemoteObject.RemoteArrayBuffer(obj);\n}\n\nexport function isDWARFMemoryObject(obj: SDK.RemoteObject.RemoteObject): boolean {\n  if (obj instanceof Bindings.DebuggerLanguagePlugins.ValueNode) {\n    return obj.inspectableAddress !== undefined;\n  }\n  if (obj instanceof Bindings.DebuggerLanguagePlugins.ExtensionRemoteObject) {\n    return obj.linearMemoryAddress !== undefined;\n  }\n  return false;\n}\n\nexport function isMemoryObjectProperty(obj: SDK.RemoteObject.RemoteObject): boolean {\n  const isWasmOrBuffer = obj.type === 'object' && obj.subtype && ACCEPTED_MEMORY_TYPES.includes(obj.subtype);\n  if (isWasmOrBuffer || isDWARFMemoryObject(obj)) {\n    return true;\n  }\n\n  return false;\n}\n\ntype SerializableSettings = {\n  valueTypes: ValueType[],\n  valueTypeModes: [ValueType, ValueTypeMode][],\n  endianness: Endianness,\n};\n\nexport class LinearMemoryInspectorController extends SDK.TargetManager.SDKModelObserver<SDK.RuntimeModel.RuntimeModel> {\n  #paneInstance = LinearMemoryInspectorPaneImpl.instance();\n  #bufferIdToRemoteObject: Map<string, SDK.RemoteObject.RemoteObject> = new Map();\n  #settings: Common.Settings.Setting<SerializableSettings>;\n\n  private constructor() {\n    super();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.RuntimeModel.RuntimeModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared, this.#onGlobalObjectClear, this);\n    this.#paneInstance.addEventListener(LmiEvents.ViewClosed, this.#viewClosed.bind(this));\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerPaused, this.#onDebuggerPause, this);\n\n    const defaultValueTypeModes = getDefaultValueTypeMapping();\n    const defaultSettings: SerializableSettings = {\n      valueTypes: Array.from(defaultValueTypeModes.keys()),\n      valueTypeModes: Array.from(defaultValueTypeModes),\n      endianness: Endianness.Little,\n    };\n    this.#settings = Common.Settings.Settings.instance().createSetting('lmiInterpreterSettings', defaultSettings);\n  }\n\n  static instance(): LinearMemoryInspectorController {\n    if (controllerInstance) {\n      return controllerInstance;\n    }\n    controllerInstance = new LinearMemoryInspectorController();\n    return controllerInstance;\n  }\n\n  static async getMemoryForAddress(memoryWrapper: LazyUint8Array, address: number):\n      Promise<{memory: Uint8Array, offset: number}> {\n    // Provide a chunk of memory that covers the address to show and some before and after\n    // as 1. the address shown is not necessarily at the beginning of a page and\n    // 2. to allow for fewer memory requests.\n    const memoryChunkStart = Math.max(0, address - MEMORY_TRANSFER_MIN_CHUNK_SIZE / 2);\n    const memoryChunkEnd = memoryChunkStart + MEMORY_TRANSFER_MIN_CHUNK_SIZE;\n    const memory = await memoryWrapper.getRange(memoryChunkStart, memoryChunkEnd);\n    return {memory: memory, offset: memoryChunkStart};\n  }\n\n  static async getMemoryRange(memoryWrapper: LazyUint8Array, start: number, end: number): Promise<Uint8Array> {\n    // Check that the requested start is within bounds.\n    // If the requested end is larger than the actual\n    // memory, it will be automatically capped when\n    // requesting the range.\n    if (start < 0 || start > end || start >= memoryWrapper.length()) {\n      throw new Error('Requested range is out of bounds.');\n    }\n    const chunkEnd = Math.max(end, start + MEMORY_TRANSFER_MIN_CHUNK_SIZE);\n    return await memoryWrapper.getRange(start, chunkEnd);\n  }\n\n  saveSettings(data: Settings): void {\n    const valueTypes = Array.from(data.valueTypes);\n    const modes = [...data.modes];\n    this.#settings.set({valueTypes, valueTypeModes: modes, endianness: data.endianness});\n  }\n\n  loadSettings(): Settings {\n    const settings = this.#settings.get();\n    return {\n      valueTypes: new Set(settings.valueTypes),\n      modes: new Map(settings.valueTypeModes),\n      endianness: settings.endianness,\n    };\n  }\n\n  static async retrieveDWARFMemoryObjectAndAddress(obj: SDK.RemoteObject.RemoteObject):\n      Promise<{obj: SDK.RemoteObject.RemoteObject, address: number}|undefined> {\n    if (obj instanceof Bindings.DebuggerLanguagePlugins.ExtensionRemoteObject) {\n      const valueNode = obj;\n      const address = valueNode.linearMemoryAddress || 0;\n      const callFrame = valueNode.callFrame;\n      const response = await obj.debuggerModel().agent.invoke_evaluateOnCallFrame({\n        callFrameId: callFrame.id,\n        expression: 'memories[0]',\n      });\n      const error = response.getError();\n      if (error) {\n        console.error(error);\n        Common.Console.Console.instance().error(i18nString(UIStrings.couldNotOpenLinearMemory));\n      }\n      const runtimeModel = obj.debuggerModel().runtimeModel();\n      return {obj: runtimeModel.createRemoteObject(response.result), address};\n    }\n    if (!(obj instanceof Bindings.DebuggerLanguagePlugins.ValueNode)) {\n      return;\n    }\n\n    const valueNode = obj;\n    const address = valueNode.inspectableAddress || 0;\n    const callFrame = valueNode.callFrame;\n    const response = await obj.debuggerModel().agent.invoke_evaluateOnCallFrame({\n      callFrameId: callFrame.id,\n      expression: 'memories[0]',\n    });\n    const error = response.getError();\n    if (error) {\n      console.error(error);\n      Common.Console.Console.instance().error(i18nString(UIStrings.couldNotOpenLinearMemory));\n    }\n    const runtimeModel = obj.debuggerModel().runtimeModel();\n    obj = runtimeModel.createRemoteObject(response.result);\n    return {obj, address};\n  }\n\n  async openInspectorView(obj: SDK.RemoteObject.RemoteObject, address?: number): Promise<void> {\n    const response = await LinearMemoryInspectorController.retrieveDWARFMemoryObjectAndAddress(obj);\n    let memoryObj = obj;\n    let memoryAddress = address;\n    if (response !== undefined) {\n      memoryAddress = response.address;\n      memoryObj = response.obj;\n    }\n\n    const highlightInfo = this.#extractHighlightInfo(obj, memoryAddress);\n\n    if (memoryAddress !== undefined) {\n      Host.userMetrics.linearMemoryInspectorTarget(\n          Host.UserMetrics.LinearMemoryInspectorTarget.DWARFInspectableAddress);\n    } else if (memoryObj.subtype === Protocol.Runtime.RemoteObjectSubtype.Arraybuffer) {\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.ArrayBuffer);\n    } else if (memoryObj.subtype === Protocol.Runtime.RemoteObjectSubtype.Dataview) {\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.DataView);\n    } else if (memoryObj.subtype === Protocol.Runtime.RemoteObjectSubtype.Typedarray) {\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.TypedArray);\n    } else {\n      console.assert(memoryObj.subtype === Protocol.Runtime.RemoteObjectSubtype.Webassemblymemory);\n      Host.userMetrics.linearMemoryInspectorTarget(Host.UserMetrics.LinearMemoryInspectorTarget.WebAssemblyMemory);\n    }\n    const buffer = await getBufferFromObject(memoryObj);\n    const {internalProperties} = await buffer.object().getOwnProperties(false);\n    const idProperty = internalProperties?.find(({name}) => name === '[[ArrayBufferData]]');\n    const id = idProperty?.value?.value;\n    if (!id) {\n      throw new Error('Unable to find backing store id for array buffer');\n    }\n    const memoryProperty = internalProperties?.find(({name}) => name === '[[WebAssemblyMemory]]');\n    const memory = memoryProperty?.value;\n\n    if (this.#bufferIdToRemoteObject.has(id)) {\n      this.#paneInstance.reveal(id, memoryAddress, highlightInfo);\n      void UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector');\n      return;\n    }\n\n    const title = String(memory ? memory.description : buffer.object().description);\n    this.#bufferIdToRemoteObject.set(id, buffer.object());\n    const arrayBufferWrapper = new RemoteArrayBufferWrapper(buffer);\n\n    this.#paneInstance.create(id, title, arrayBufferWrapper, memoryAddress, highlightInfo);\n    void UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector');\n  }\n\n  #extractHighlightInfo(obj: SDK.RemoteObject.RemoteObject, memoryAddress?: number): HighlightInfo|undefined {\n    let highlightInfo;\n    if (obj instanceof Bindings.DebuggerLanguagePlugins.ValueNode) {\n      // Currently, only the StaticallyTypedValueNode subclass implements the sourceType getter.\n      // The other subclasses throw a 'Not Implemented' Error.\n      try {\n        highlightInfo = {\n          startAddress: memoryAddress || 0,\n          size: obj.sourceType.typeInfo.size,\n        };\n      } catch (unusedError) {\n      }\n    }\n    return highlightInfo;\n  }\n\n  modelRemoved(model: SDK.RuntimeModel.RuntimeModel): void {\n    for (const [bufferId, remoteObject] of this.#bufferIdToRemoteObject) {\n      if (model === remoteObject.runtimeModel()) {\n        this.#bufferIdToRemoteObject.delete(bufferId);\n        this.#paneInstance.close(bufferId);\n      }\n    }\n  }\n\n  #onDebuggerPause(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const debuggerModel = event.data;\n    for (const [bufferId, remoteObject] of this.#bufferIdToRemoteObject) {\n      if (debuggerModel.runtimeModel() === remoteObject.runtimeModel()) {\n        this.#paneInstance.resetHighlightInfo(bufferId);\n        this.#paneInstance.refreshView(bufferId);\n      }\n    }\n  }\n\n  #onGlobalObjectClear(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    this.modelRemoved(event.data.runtimeModel());\n  }\n\n  #viewClosed({data: bufferId}: Common.EventTarget.EventTargetEvent<string>): void {\n    const remoteObj = this.#bufferIdToRemoteObject.get(bufferId);\n    if (remoteObj) {\n      remoteObj.release();\n    }\n    this.#bufferIdToRemoteObject.delete(bufferId);\n  }\n}\n"]}