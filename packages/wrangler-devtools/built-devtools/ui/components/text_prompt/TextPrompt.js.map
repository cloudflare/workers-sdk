{"version":3,"file":"TextPrompt.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/text_prompt/TextPrompt.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as ComponentHelpers from '../../components/helpers/helpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport textPromptStyles from './textPrompt.css.js';\n\nexport interface TextPromptData {\n  ariaLabel: string;\n  prefix: string;\n  suggestion: string;\n}\n\nexport class PromptInputEvent extends Event {\n  static readonly eventName = 'promptinputchanged';\n  data: string;\n\n  constructor(value: string) {\n    super(PromptInputEvent.eventName);\n    this.data = value;\n  }\n}\n\nexport class TextPrompt extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-text-prompt`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #ariaLabelText = '';\n  #prefixText = '';\n  #suggestionText = '';\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [textPromptStyles];\n  }\n\n  set data(data: TextPromptData) {\n    this.#ariaLabelText = data.ariaLabel;\n    this.#prefixText = data.prefix;\n    this.#suggestionText = data.suggestion;\n    this.#render();\n  }\n\n  get data(): TextPromptData {\n    return {\n      ariaLabel: this.#ariaLabelText,\n      prefix: this.#prefixText,\n      suggestion: this.#suggestionText,\n    };\n  }\n\n  focus(): void {\n    this.#input().focus();\n  }\n\n  #input(): HTMLInputElement {\n    const inputElement = this.#shadow.querySelector<HTMLInputElement>('.input');\n    if (!inputElement) {\n      throw new Error('Expected an input element!');\n    }\n    return inputElement;\n  }\n\n  moveCaretToEndOfInput(): void {\n    this.setSelectedRange(this.#text().length, this.#text().length);\n  }\n\n  onInput(): void {\n    this.#suggestion().value = this.#text();\n    this.dispatchEvent(new PromptInputEvent(this.#text().trim()));\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    if (event.key === Platform.KeyboardUtilities.ENTER_KEY) {\n      event.preventDefault();\n    }\n  }\n\n  setSelectedRange(startIndex: number, endIndex: number): void {\n    if (startIndex < 0) {\n      throw new RangeError('Selected range start must be a nonnegative integer');\n    }\n    const textContentLength = this.#text().length;\n    if (endIndex > textContentLength) {\n      endIndex = textContentLength;\n    }\n    if (endIndex < startIndex) {\n      endIndex = startIndex;\n    }\n    this.#input().setSelectionRange(startIndex, endIndex);\n  }\n\n  setPrefix(prefix: string): void {\n    this.#prefixText = prefix;\n    this.#render();\n  }\n\n  setSuggestion(suggestion: string): void {\n    this.#suggestionText = suggestion;\n    this.#suggestion().value += this.#suggestionText;\n    this.#render();\n  }\n\n  setText(text: string): void {\n    this.#input().value = text;\n    this.#suggestion().value = this.#text();\n\n    if (this.#input().hasFocus()) {\n      this.moveCaretToEndOfInput();\n      this.#input().scrollIntoView();\n    }\n  }\n\n  #suggestion(): HTMLInputElement {\n    const suggestionElement = this.#shadow.querySelector<HTMLInputElement>('.suggestion');\n    if (!suggestionElement) {\n      throw new Error('Expected an suggestion element!');\n    }\n    return suggestionElement;\n  }\n\n  #text(): string {\n    return this.#input().value || '';\n  }\n\n  #render(): void {\n    const output = LitHtml.html`\n      <span class=\"prefix\">${this.#prefixText} </span>\n      <span class=\"text-prompt-input\"><input class=\"input\" aria-label=${\n        this.#ariaLabelText} spellcheck=\"false\" @input=${this.onInput} @keydown=${\n        this.onKeyDown}/><input class=\"suggestion\" aria-label=${this.#ariaLabelText + ' Suggestion'}></span>`;\n    LitHtml.render(output, this.#shadow, {host: this});\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-text-prompt', TextPrompt);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-text-prompt': TextPrompt;\n  }\n\n  interface HTMLElementEventMap {\n    'promptinputchanged': PromptInputEvent;\n  }\n}\n"]}