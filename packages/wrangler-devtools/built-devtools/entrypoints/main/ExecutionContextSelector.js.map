{"version":3,"file":"ExecutionContextSelector.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/main/ExecutionContextSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Common from '../../core/common/common.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\n\nexport class ExecutionContextSelector implements SDK.TargetManager.SDKModelObserver<SDK.RuntimeModel.RuntimeModel> {\n  #targetManager: SDK.TargetManager.TargetManager;\n  #context: UI.Context.Context;\n  #lastSelectedContextId?: string;\n  #ignoreContextChanged?: boolean;\n\n  constructor(targetManager: SDK.TargetManager.TargetManager, context: UI.Context.Context) {\n    context.addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.#executionContextChanged, this);\n    context.addFlavorChangeListener(SDK.Target.Target, this.#targetChanged, this);\n\n    targetManager.addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextCreated, this.#onExecutionContextCreated,\n        this);\n    targetManager.addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextDestroyed,\n        this.#onExecutionContextDestroyed, this);\n    targetManager.addModelListener(\n        SDK.RuntimeModel.RuntimeModel, SDK.RuntimeModel.Events.ExecutionContextOrderChanged,\n        this.#onExecutionContextOrderChanged, this);\n    this.#targetManager = targetManager;\n    this.#context = context;\n    targetManager.observeModels(SDK.RuntimeModel.RuntimeModel, this);\n  }\n\n  modelAdded(runtimeModel: SDK.RuntimeModel.RuntimeModel): void {\n    // Defer selecting default target since we need all clients to get their\n    // targetAdded notifications first.\n    queueMicrotask(deferred.bind(this));\n\n    function deferred(this: ExecutionContextSelector): void {\n      // We always want the second context for the service worker targets.\n      if (!this.#context.flavor(SDK.Target.Target)) {\n        this.#context.setFlavor(SDK.Target.Target, runtimeModel.target());\n      }\n    }\n  }\n\n  modelRemoved(runtimeModel: SDK.RuntimeModel.RuntimeModel): void {\n    const currentExecutionContext = this.#context.flavor(SDK.RuntimeModel.ExecutionContext);\n    if (currentExecutionContext && currentExecutionContext.runtimeModel === runtimeModel) {\n      this.#currentExecutionContextGone();\n    }\n\n    const models = this.#targetManager.models(SDK.RuntimeModel.RuntimeModel);\n    if (this.#context.flavor(SDK.Target.Target) === runtimeModel.target() && models.length) {\n      this.#context.setFlavor(SDK.Target.Target, models[0].target());\n    }\n  }\n\n  #executionContextChanged({\n    data: newContext,\n  }: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext|null>): void {\n    if (newContext) {\n      this.#context.setFlavor(SDK.Target.Target, newContext.target());\n      if (!this.#ignoreContextChanged) {\n        this.#lastSelectedContextId = this.#contextPersistentId(newContext);\n      }\n    }\n  }\n\n  #contextPersistentId(executionContext: SDK.RuntimeModel.ExecutionContext): string {\n    return executionContext.isDefault ? executionContext.target().name() + ':' + executionContext.frameId : '';\n  }\n\n  #targetChanged({data: newTarget}: Common.EventTarget.EventTargetEvent<SDK.Target.Target|null>): void {\n    const currentContext = this.#context.flavor(SDK.RuntimeModel.ExecutionContext);\n\n    if (!newTarget || (currentContext && currentContext.target() === newTarget)) {\n      return;\n    }\n\n    const runtimeModel = newTarget.model(SDK.RuntimeModel.RuntimeModel);\n    const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n    if (!executionContexts.length) {\n      return;\n    }\n\n    let newContext: SDK.RuntimeModel.ExecutionContext|null = null;\n    for (let i = 0; i < executionContexts.length && !newContext; ++i) {\n      if (this.#shouldSwitchToContext(executionContexts[i])) {\n        newContext = executionContexts[i];\n      }\n    }\n    for (let i = 0; i < executionContexts.length && !newContext; ++i) {\n      if (this.#isDefaultContext(executionContexts[i])) {\n        newContext = executionContexts[i];\n      }\n    }\n    this.#ignoreContextChanged = true;\n    this.#context.setFlavor(SDK.RuntimeModel.ExecutionContext, newContext || executionContexts[0]);\n    this.#ignoreContextChanged = false;\n  }\n\n  #shouldSwitchToContext(executionContext: SDK.RuntimeModel.ExecutionContext): boolean {\n    if (this.#lastSelectedContextId && this.#lastSelectedContextId === this.#contextPersistentId(executionContext)) {\n      return true;\n    }\n    return !this.#lastSelectedContextId && this.#isDefaultContext(executionContext);\n  }\n\n  #isDefaultContext(executionContext: SDK.RuntimeModel.ExecutionContext): boolean {\n    if (!executionContext.isDefault || !executionContext.frameId) {\n      return false;\n    }\n    if (executionContext.target().parentTarget()) {\n      return false;\n    }\n    const resourceTreeModel = executionContext.target().model(SDK.ResourceTreeModel.ResourceTreeModel);\n    const frame = resourceTreeModel && resourceTreeModel.frameForId(executionContext.frameId);\n    return Boolean(frame?.isTopFrame());\n  }\n\n  #onExecutionContextCreated(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>): void {\n    this.#switchContextIfNecessary(event.data);\n  }\n\n  #onExecutionContextDestroyed(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.ExecutionContext>): void {\n    const executionContext = event.data;\n    if (this.#context.flavor(SDK.RuntimeModel.ExecutionContext) === executionContext) {\n      this.#currentExecutionContextGone();\n    }\n  }\n\n  #onExecutionContextOrderChanged(event: Common.EventTarget.EventTargetEvent<SDK.RuntimeModel.RuntimeModel>): void {\n    const runtimeModel = event.data;\n    const executionContexts = runtimeModel.executionContexts();\n    for (let i = 0; i < executionContexts.length; i++) {\n      if (this.#switchContextIfNecessary(executionContexts[i])) {\n        break;\n      }\n    }\n  }\n\n  #switchContextIfNecessary(executionContext: SDK.RuntimeModel.ExecutionContext): boolean {\n    if (!this.#context.flavor(SDK.RuntimeModel.ExecutionContext) || this.#shouldSwitchToContext(executionContext)) {\n      this.#ignoreContextChanged = true;\n      this.#context.setFlavor(SDK.RuntimeModel.ExecutionContext, executionContext);\n      this.#ignoreContextChanged = false;\n      return true;\n    }\n    return false;\n  }\n\n  #currentExecutionContextGone(): void {\n    const runtimeModels = this.#targetManager.models(SDK.RuntimeModel.RuntimeModel);\n    let newContext: SDK.RuntimeModel.ExecutionContext|null = null;\n    for (let i = 0; i < runtimeModels.length && !newContext; ++i) {\n      const executionContexts = runtimeModels[i].executionContexts();\n      for (const executionContext of executionContexts) {\n        if (this.#isDefaultContext(executionContext)) {\n          newContext = executionContext;\n          break;\n        }\n      }\n    }\n    if (!newContext) {\n      for (let i = 0; i < runtimeModels.length && !newContext; ++i) {\n        const executionContexts = runtimeModels[i].executionContexts();\n        if (executionContexts.length) {\n          newContext = executionContexts[0];\n          break;\n        }\n      }\n    }\n    this.#ignoreContextChanged = true;\n    this.#context.setFlavor(SDK.RuntimeModel.ExecutionContext, newContext);\n    this.#ignoreContextChanged = false;\n  }\n}\n"]}