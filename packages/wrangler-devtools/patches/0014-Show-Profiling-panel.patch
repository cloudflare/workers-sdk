From 0488c38300b4125cd9c8d1956894baac47d03d9a Mon Sep 17 00:00:00 2001
From: Workers DevProd <workers-devprod@cloudflare.com>
Date: Wed, 4 Oct 2023 01:11:14 +0100
Subject: [PATCH 14/15] Show Profiling panel

---
 front_end/entrypoints/main/MainImpl.ts        |  1 +
 .../panels/js_profiler/js_profiler-meta.ts    | 99 +------------------
 front_end/panels/profiler/ProfilesPanel.ts    |  1 -
 3 files changed, 2 insertions(+), 99 deletions(-)

diff --git a/front_end/entrypoints/main/MainImpl.ts b/front_end/entrypoints/main/MainImpl.ts
index e4d10c442a..e66c539007 100644
--- a/front_end/entrypoints/main/MainImpl.ts
+++ b/front_end/entrypoints/main/MainImpl.ts
@@ -439,6 +439,7 @@ export class MainImpl {
       Root.Runtime.ExperimentName.OUTERMOST_TARGET_SELECTOR,
       Root.Runtime.ExperimentName.AUTHORED_DEPLOYED_GROUPING,
       Root.Runtime.ExperimentName.JUST_MY_CODE,
+      Root.Runtime.ExperimentName.JS_PROFILER_TEMP_ENABLE,
     ]);
 
     Root.Runtime.experiments.setNonConfigurableExperiments([
diff --git a/front_end/panels/js_profiler/js_profiler-meta.ts b/front_end/panels/js_profiler/js_profiler-meta.ts
index 2c0f3e64ec..0bcdf01551 100644
--- a/front_end/panels/js_profiler/js_profiler-meta.ts
+++ b/front_end/panels/js_profiler/js_profiler-meta.ts
@@ -88,7 +88,7 @@ UI.ViewManager.registerViewExtension({
   title: i18nLazyString(UIStrings.profiler),
   commandPrompt: i18nLazyString(UIStrings.showProfiler),
   order: 65,
-  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,
+  persistence: UI.ViewManager.ViewPersistence.PERMANENT,
   experiment: Root.Runtime.ExperimentName.JS_PROFILER_TEMP_ENABLE,
   async loadView() {
     const Profiler = await loadProfilerModule();
@@ -96,20 +96,6 @@ UI.ViewManager.registerViewExtension({
   },
 });
 
-UI.ViewManager.registerViewExtension({
-  location: UI.ViewManager.ViewLocationValues.PANEL,
-  id: 'timeline',
-  title: i18nLazyString(UIStrings.performance),
-  commandPrompt: i18nLazyString(UIStrings.showPerformance),
-  order: 66,
-  hasToolbar: false,
-  isPreviewFeature: true,
-  async loadView() {
-    const Timeline = await loadTimelineModule();
-    return Timeline.TimelinePanel.TimelinePanel.instance({forceNew: null, isNode: true});
-  },
-});
-
 UI.ActionRegistration.registerActionExtension({
   actionId: 'profiler.js-toggle-recording',
   category: UI.ActionRegistration.ActionCategory.JAVASCRIPT_PROFILER,
@@ -136,86 +122,3 @@ UI.ActionRegistration.registerActionExtension({
     },
   ],
 });
-
-UI.ActionRegistration.registerActionExtension({
-  actionId: 'timeline.show-history',
-  async loadActionDelegate() {
-    const Timeline = await loadTimelineModule();
-    return Timeline.TimelinePanel.ActionDelegate.instance();
-  },
-  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,
-  title: i18nLazyString(UIStrings.showRecentTimelineSessions),
-  contextTypes() {
-    return maybeRetrieveTimelineContextTypes(Timeline => [Timeline.TimelinePanel.TimelinePanel]);
-  },
-  bindings: [
-    {
-      platform: UI.ActionRegistration.Platforms.WindowsLinux,
-      shortcut: 'Ctrl+H',
-    },
-    {
-      platform: UI.ActionRegistration.Platforms.Mac,
-      shortcut: 'Meta+Y',
-    },
-  ],
-});
-
-UI.ActionRegistration.registerActionExtension({
-  actionId: 'timeline.toggle-recording',
-  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,
-  iconClass: UI.ActionRegistration.IconClass.START_RECORDING,
-  toggleable: true,
-  toggledIconClass: UI.ActionRegistration.IconClass.STOP_RECORDING,
-  toggleWithRedColor: true,
-  contextTypes() {
-    return maybeRetrieveTimelineContextTypes(Timeline => [Timeline.TimelinePanel.TimelinePanel]);
-  },
-  async loadActionDelegate() {
-    const Timeline = await loadTimelineModule();
-    return Timeline.TimelinePanel.ActionDelegate.instance();
-  },
-  options: [
-    {
-      value: true,
-      title: i18nLazyString(UIStrings.record),
-    },
-    {
-      value: false,
-      title: i18nLazyString(UIStrings.stop),
-    },
-  ],
-  bindings: [
-    {
-      platform: UI.ActionRegistration.Platforms.WindowsLinux,
-      shortcut: 'Ctrl+E',
-    },
-    {
-      platform: UI.ActionRegistration.Platforms.Mac,
-      shortcut: 'Meta+E',
-    },
-  ],
-});
-
-UI.ActionRegistration.registerActionExtension({
-  actionId: 'timeline.record-reload',
-  iconClass: UI.ActionRegistration.IconClass.REFRESH,
-  contextTypes() {
-    return maybeRetrieveTimelineContextTypes(Timeline => [Timeline.TimelinePanel.TimelinePanel]);
-  },
-  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,
-  title: i18nLazyString(UIStrings.startProfilingAndReloadPage),
-  async loadActionDelegate() {
-    const Timeline = await loadTimelineModule();
-    return Timeline.TimelinePanel.ActionDelegate.instance();
-  },
-  bindings: [
-    {
-      platform: UI.ActionRegistration.Platforms.WindowsLinux,
-      shortcut: 'Ctrl+Shift+E',
-    },
-    {
-      platform: UI.ActionRegistration.Platforms.Mac,
-      shortcut: 'Meta+Shift+E',
-    },
-  ],
-});
diff --git a/front_end/panels/profiler/ProfilesPanel.ts b/front_end/panels/profiler/ProfilesPanel.ts
index a175dfb050..28d46d7378 100644
--- a/front_end/panels/profiler/ProfilesPanel.ts
+++ b/front_end/panels/profiler/ProfilesPanel.ts
@@ -753,7 +753,6 @@ export class JSProfilerPanel extends ProfilesPanel implements UI.ActionRegistrat
         ],
         /* disableSetting? */ undefined);
     infobar.setParentView(this);
-    this.splitWidget().mainWidget()?.element.prepend(infobar.element);
   }
 
   #showDeprecationWarningAndNoPanel(): void {
-- 
2.39.3 (Apple Git-145)

