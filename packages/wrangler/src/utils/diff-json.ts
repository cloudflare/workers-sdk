import jsonDiff from "json-diff";

export type Json =
	| string
	| number
	| boolean
	| null
	| Json[]
	| { [id: string]: Json };

export type DiffJson = Json | (Json & { __old: DiffJson; __new: DiffJson });

/**
 * Given two objects A and B that are Json serializable this function computes the difference between them
 *
 * The difference object includes:
 *  - fields in object B but not in object A included as `<fieldKey__added>`
 *  - fields in object A but not in object B included as `<fieldKey__deleted>`
 *  - fields present in both objects but modified as `<fieldKey>: { __old: <objectAValue>, __new: <objectBValue> }`
 *
 * Additionally the difference object contains a `toString` method that can be used to generate a string representation
 * of the difference between the two objects (to be presented to users)
 *
 * @param jsonObjA The first target object
 * @param jsonObjB The second target object
 * @returns An object representing the diff between the two objects, or null if the objects are equal
 */
export function diffJsonObjects(
	jsonObjA: Record<string, Json>,
	jsonObjB: Record<string, Json>
): Record<string, DiffJson> | null {
	const result = jsonDiff.diff(jsonObjA, jsonObjB);

	if (result) {
		result.toString = () => jsonDiff.diffString(jsonObjA, jsonObjB);
		return result;
	} else {
		return null;
	}
}

/**
 * Given a diff object (generated by `diffJsonObjects`) this function computes whether the
 * difference is non-destructive, i.e. if the second object only contained additions to the
 * first one and no removal nor modifications.
 *
 * @param diff The difference object to use (generated by `diffJsonObjects`)
 * @returns `true` if the difference is non-destructive, `false` if it is
 */
export function isNonDestructive(diff: DiffJson): boolean {
	if (diff === null || typeof diff !== "object") {
		return true;
	}

	if (
		Object.keys(diff).some(
			(key) => key === "__old" || key.endsWith("__deleted")
		)
	) {
		return false;
	}

	if (Array.isArray(diff)) {
		for (const field of diff) {
			if (!isNonDestructive(field)) {
				return false;
			}
		}
	} else {
		for (const field in diff) {
			if (!isNonDestructive(diff[field])) {
				return false;
			}
		}
	}

	return true;
}
